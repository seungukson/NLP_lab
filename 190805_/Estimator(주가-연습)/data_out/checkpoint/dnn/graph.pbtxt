node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 659
          }
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 659
          }
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        tensor_content: "lK\004?U\226v?)T\335?\3115\232?uV\371?\346\332\262?V\027\022@\312|\331?$\016[@\225\254\304?H)\214?v\014\312?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@\3115\232?uV\371?\346\332\262?V\027\022@\312|\331?$\016[@\225\254\304?H)\214?v\014\312?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@V\027\022@\312|\331?$\016[@\225\254\304?H)\214?v\014\312?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\225\254\304?H)\214?v\014\312?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\005\232\263\276\001|\277\276\223N\260\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\005\232\263\276\001|\277\276\223N\260\276\312h\262\276\220K\237\276\275\365\276\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\005\232\263\276\001|\277\276\223N\260\276\312h\262\276\220K\237\276\275\365\276\276R\333\244\276e`\266\276\345\224\261\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\005\232\263\276\001|\277\276\223N\260\276\312h\262\276\220K\237\276\275\365\276\276R\333\244\276e`\266\276\345\224\261\276[)\265\276\272\033\266\276\334&\275\276"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 659
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 659
          }
          dim {
            size: 1
          }
        }
        tensor_content: "0\361\264?\302\237\005@\rp\'@\316V\r@\261\017\232@\3661\211?>\237\311?\207\225&@R\365\300?g,\253?\023`,@U\307\301?\r\t\032@\242J\014@xS\345?\222M\214@T\177\270?\217\'\266?\350\036\253?\232\000\377?aQ\264?\352\340\222?0c\216?\342/`@?\365\006@\375V.@\023\377P@\333\246;@(P\n@\325M\301?@\301\016@\230\260\036@\031\213\032@\272\n\374?\226\215>@c\300\005@\036\204\261@v\301=@\271\340\034@\304d\202@\226\256\275?G\360o?H\225\245?\233\233\217?0-\237?\343\253\252?\305b(@\302y7@\001\326)@\326k\256?\341\326\220?.:~@b\004\375?a%\203?\305\2667@\217\317\354?\351\000o@\214\231\354?\323*\324?n\241*@\304\216\240?)\025\216?iR\236?\232\271\204?\350\327\023@\367F\217?x\001\244?\022\242)?-\233\272?\365\262\351?\355\247\251?\005f\010@\354\257h@`\215\004@\307\031\037@\261H\376?\242\243!@c\227]@\220\316\375?`I\324?\365*`A~\003\347?\277\315]@T\321\367?\314\000>@.\274O@\336\355\326\276\246b\220\276\3469\262\276\267\353\256\276y\230\304\276h\211\277\276\336\302\271\276\2076\271\276\357\177\277\276r\205\277\276#4\302\276\026\222\272\276\t\'\250\276f\241\251\276\200\034\266\276\320\014\300\276#I\302\276C2\263\276\014C\262\276|[\240\276\203\324\222\276\267V\272\276\204\364\274\276\346\311\271\276r4\275\276\030v\227\276W\001\255\276\264\265\273\276S\004\302\276\032\335\274\276\000\r\273\276\347\250\247\276y\004\304\276\021\226\275\276\275\372\270\276\350\202\267\276wT\310\276\375\341\300\276\267h\302\276\3548\307\276z\216\305\276@\372\275\276\227\332\303\276\333<\311\276W?\304\276\272=\276\276\305\231\266\276n\342\270\276*;\257\276\032[\302\276I\033\274\276\364&\301\276\315\223\275\276f\251\273\276\025M\275\276o\276\277\276s\026\301\276\027\213\276\276\017G\252\276\275\r\265\276ry\303\276\347w\274\276=H\274\276\323g\306\2767\366\274\276\017\301\303\276\375O\300\276\346\201\275\276\034\027\307\276\217\246\300\276\302\310\300\276\t\352\263\2767t\300\276Ho\275\276\337\371\266\276\270:\300\276\325\226\302\276\r\275\302\276\243>\262\276\225p\302\276\177h\245\276I\021\267\2768S\241\276\206\001\302\276\204\215\273\276\0307\312\276><\306\276|d\300\276r\242\300\276Kp\277\276\301\036\271\276{\325\265\276\257\317\277\276\224\246\305\276F\254\272\276\001Z\271\276\223\347\301\276\r\016\303\276\366#\263\276{b\270\276\340\016\267\276\246N\302\276\n\377\265\276\366\251\267\276n\215\301\276\253\365\303\276_\305\273\276T8\270\276J`\304\276\216o\305\276\366\263\313\276\036\256\307\276\222\226\273\276A\274\273\276u\235\260\276\273.\303\276\216\204\224\276\025R\310\276&<\300\276\225\234\304\276m\265\263\276\216m\262\276be\306\276\337\330\276\276\360\022\266\276\347N\301\276\374\373\262\276\362\371\265\276\326\375z\276\025#\222\276\242\215\273\276\205\n\300\276\343S\274\276\017\307\242\276~\022\270\276\360\031\305\276\2532\253\276\345\'\302\276\250\325\261\276V\321\257\276\210\261\275\276x5\272\276\306\273\306\276M\223\303\276\215\317\300\276\325\356\304\276\235\326\304\276\307\340\273\276VE\275\276\003-\274\276oR\304\276\326m\276\276\231\030\247\276\234\233\277\276T\346\264\276\351p\263\276\372\'\253\276\247\205\237\276\370\353\276\276\006R\273\276\366f\304\276L\216\301\276\3104\305\276\274\204\262\276\320\222\306\276S\236\303\276\023\221\311\276G\025\306\276t\350\257\276\264\236\271\276\350m\273\276\275g\252\276\306\322\310\276\305\364\277\276\277\265\274\276\350\321\302\2761\357\265\276+\244\307\276Tl\273\276\337`\307\276\235\223\302\276\252K\272\276\263\034\271\276\'\023\272\276\023\255\270\276\277\310\266\276\377\302\305\276\035\320\276\276\026\233\276\2765\332\272\276M@\254\276\3621\277\276\036\302\304\276\223A\304\276\252\272\276\276e\337\276\276?\325\306\276\003\210\303\276\313\311\230\276\000U\306\276\260K\303\276oC\301\276g\234\304\276\003S\301\276\3068\266\276A\247\233\276f\212\307\276\032\026\274\276XN\311\276\026\217\302\276\\\205\224\276\233\306\272\276\"\206\241\276\344\355\277\276Z)\244\276\027\322\273\276\361\274\254\276\374\233\300\276\005\213\262\2766$\241\276\263@\251\276\253\307\275\276\017}\274\276C\310\273\276?\353\247\276x\004\300\276\335\366\266\276\236\r\300\276\364X\300\276\266\354\274\276\331\022\305\276\303\202\273\276\257U\306\276\031\365\277\276K\t\276\276\023\032\310\276,\356\300\276D\232\273\276c\366\266\2763\300\251\276\216\202\275\276\026\277\256\276\310%\306\276-\206\300\276\375\360\277\276\330\330\300\276m\246\303\276ee\262\276\230i\301\276\370\024\272\276\"d\267\276\240\277\277\276<\302\300\276\320\334\306\276+\026\302\276\306\037\301\276=\\\271\276\211\"\267\276]Z\252\276\353\275\304\276\271\354\273\276\331\246\270\276\207\245\275\276\034p\310\276w\267\277\276rL\304\276\370\304\311\276\014\n\267\276fL\277\276\007D\260\276\274Y\267\276qQ\272\276\030<\265\276\275T\277\276\334\177\300\276$b\275\276\177r\273\276L\217\265\276F\276\261\276\334\316\311\276\370v\301\276\006K_\276w\376\276\276\266\324\271\276j5\276\276\001\254\272\276\302\373\302\276\367\220\267\276\326\373\266\276\372m\303\276\243\213\273\276}\254\263\276\246\206\274\276\375N\277\276\023*\273\276\333\t\272\276\023s\251\276\233\337\300\276\tC\306\276\331\334\275\276\335\354\261\276\r\356\276\276(\374\273\276\032\373\300\276R\235\276\276~\230\253\276G\271\275\276\3059\225\276\021\036\271\276\2470\304\276\275+\304\276\235\267\301\276^\327\275\276\243\324\272\276\350\013\303\276\206B\302\276\260\035\277\276\243L\237\276g\220\267\276R\316\270\276\234\031\243\276o\235\305\276\356\203\301\276\235\036\303\276\262\254\261\276m\026\307\276\357\321\261\276\240\347\265\276\'\212\275\276mb\276\276+@\317\276\322C\301\276\003\037\276\276}=\276\276\307z\252\276\241\021\270\276JT\256\276\006\220\303\276\3428\275\276\025\225\273\276\250\307\302\276l~\305\2767\316\265\276\223{\302\276\365\267\300\276J\025\301\276\207\227\277\276u\311\277\276b\235\261\2760\262\273\276\031\337\276\276\245\270\302\276\270\226\273\276\277\230\254\276\355\356\250\276!\271\216\276\335H\272\276\272\\\303\276\005\335\304\276u\033\264\276\033\245\306\276\377\260\275\276\3466\307\276+\362\302\276\334\357\301\276\232\020\310\276\267\252\277\276\200\026\267\276\352I\304\276\275~\271\276\271\234\274\276\346\352\302\276\214\247\304\276\303\231\277\276}\304\266\276\312C\262\276?\320\273\276\354\352\274\2762\361\256\276..\244\276\363M\301\276\260\203\275\276U\014\257\276\271\255\301\276G\t\273\276?\315\307\276\0228\246\276\226>\255\276\342\037\304\276\nJ\271\276R;\267\276\262\036\273\276Ha\262\276\212\204\300\276#\247\256\276\3017\220\276\025(\277\276Q\374\232\276\253\013\262\276\326\006\277\276\224\020\256\276e_\206\276\212L\267\276\204\372\254\276\261\365\273\276\274\003\273\276\'T\272\276\023\372\301\276\214\307\275\276\237\311\302\276ge\253\276v\223\276\276\2163\301\276A\203\276\276\214\354\275\276Gj\301\276\206\006\276\276\315\232\312\276\034\363\270\276z\016\276\276Kf\266\276\352\263\271\276\244\356\266\276JO\277\276\006-\271\276\2628\302\276\377\361\254\276\316=\305\276^U\303\276\211\340\306\276\300\374\273\276#\223\244\276\262\254\261\276d\027\265\276^\032\261\276\224\036\273\276B\271\266\276\337\305\265\276\377\244\301\276\304\204\226\276\335\317\262\276jq\263\276\345\363\261\276i\313\300\276>i\270\276\373\350\266\276\215\203\255\276P\221\272\276\322\336\305\276m8\263\276[\202\270\276\2375\276\276K\305\266\276\343]\301\276=f\276\276\223\330\276\276\304\253\270\276n`\255\276\3345\255\276Sv\274\276\363\322\265\276x:\264\276\030\330\253\276wy\233\276\003\307\277\276\360&\261\276Tm\004\276\300\202\261\276lu\226\276&\344\277\276\200\233\251\276L\225\262\276\301:\210\276\024\037\267\276p\345\270\276\247\337\264\276$\324\227\276J\210\255\276\202\306\301\276@X\252\276\262\n\240\2761\371\215\276/Y\264\276\005\213\243\276\316\324\277\276q\370\270\276Jf\243\276(7\277\276\332m\237\2766\272\211\276\030\276\263\276}m\271\276\2157\247\276x*\262\276\025\267\266\276O\320\277\276~\374\264\276\332\024\234\276\362\365\276\276\344w\260\276\242\271\273\276\031l\301\276\214\324\270\276\323\330\254\276Z\010\273\276\320\250\247\276+\347\274\276\370,\260\276X\277\240\276\237k\264\276\003\210\224\276}\232\253\276\241)\273\276\213\256\242\276\\\324\260\276v\345\241\2764\"\263\276\337\324\264\276aJ\247\276\353\225\256\276$J\270\276\256\233\274\276}\037\276\276D#\247\276\254\336\245\276@\304\266\276\226\334\264\276\332\030\206\276\376)\262\276\t3\263\276X\352\260\276\007\232\273\276_J\216\2761G\266\276_\244\224\276\014S\230\276\211^\254\276\231\261\224\276\273\017\276\276\257\226\244\276\2074\231\276\247I\212\276{O\236\276\361\017\244\276q:\266\276\242I\245\276$\007\224\276{\243\266\276\355\'\265\276\030*\276\276\364\221\235\276\203{\204\276S\r\210\276\003qG\276\272\233\256\276\321\250\251\276{l\277\276\260y\272\276\373\013\265\276\366u\247\276{\260\261\276b\307\274\276Oc\243\276\275\030\273\276_\246\266\276u\365\237\276\353\000\270\276\010?\251\276\005\232\263\276\312h\262\276R\333\244\276[)\265\276F\317\251\276"
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 64
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_ushGj6Alf4s"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1527949720621109
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1527949720621109
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9042608
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "R\321\320\275 ~\036\275\216(\r\274\353\026\242<\324\244\256\275x\005s\274\0224K\2756\313\307\275\304D\306\275&\256\030<=2\253=(o\366\275\\\233\252<\322\314*\275\241\245!\275UC\212\274m9h\271\371U\337<\250G\027=%\233\314=fm8\275\316\203\242<W\034\230\275\006\214!\275\230L\361\274IE\312\275\341Q\236\275h\346\201=p\233\024>O+\022=\000\306\244\274\233\3375\275\3029\r\276\221\275\222\275\321\233<=\246\336;\275\024\256V\275\304\351\211=\034\350\'>\243L\263\274\224\327\013\276\330\013*;\257\307\033\275\034\203t=\267\370\211=`\322\227<\201\320V\275W\255\016\274]\236\002;\207H\r=\220\367\031\274\326\017.=,\313\253\273\250pC=\341\202\254\2729\225\214<\350\'c<\277\000X<\363%3\274pT\301=\3558\323\275\272\0330\275\355Yr<R\303u\275\252-\245\275\2545\220<\327@\261\275Y\333\247\275\370L\332=\274\"}\275\367x6<B@\262=\016B2\275\244\230\322\274~\3433\274\032\336\254=Jz\333\275S\2008;\211ox=!v\t<\336\'\266\275\376m\277<Dm\025\276\317\205V\275\020m\235\273U9\"\276\270C\231<\037\346%<\007\234\006\275\277\207<=\375\323\356\275T\334\275\272/\013\220=\002\345\216\275\002\275\017<\274\362\302\274\252t\034\275\021\245\361=\277\3220=&<09\206\262\033=K\207H>\216\340\020=\005\"\013\275\347\335#=\377e\255\274\252\002\356\273\221\271h\272\231\212j=>\326x<\316\244}\274_\202\252\275\211\016/<\022o/\275\372\307\342:\312\341\356\274\"d\034=\023\365%=\230\004\n\275\257\344\205;K\370A\273\250\037\235=\205J\033=1\317\031<\005\336\032<\234F\312=^\252\031<\236\307u=D\221i\275c\"\002=\313\335\233=\325\326\205\275@\210o=z7\327<\344\227c<\262\227.=\000\022\215=\001 :<<\271\274\275\352\014\330=L\242\254\274Vs\000\275\271\322\332<\212Cf\275n\255\367\275\000b\245<\212\316\255\275\1778s\275\252\220\006\275\241g$=\265Gp\275\007\374\212<\316\326K\275Q\206\035\273\022\022\250\275\225T\361\275%\234\035\275\260}E=\310\247\367\274\374\313\t\275h\330\237\275#?\341\273\263C\016\276V\266\226;;\205b\2752\226^\275\212\206\007=5\216\237\275\'\2301\275\271J\373</\226\211;D\302\t>\257=\305\274@\240\374<r\327G\2747\254h\275h\316I\273\304+\214=T\031\231<\344k\211<\234r\"=}\356\201\275\350\340\000>6\030\374=x\234\232\274\216\377\036=\352:\272\274\031{\305\274\313Lk\275\310q\343:\232\274j\275\224Y\201=]\3079<\224qS=\014\302\311\275\272\005\343\275\027\236\201=\005Mn=\263\254\237;4\0210=i\345G={\366\353<\201G0=\331|\227=\207\361d<=\237\204=C\353\242\275T\022\006=H\366C=\362\243\211\273\021^\223=\032\0039;q\026\232<r-\037\274\022\224\'=\353\335\252;\260\030\236\274#E\373<:.\260\275\360\372y=8\321\261\274x\226\254\275\271\005T=\250\326\240\275^\230r\274\3055\026>\314\201`\275G\216\265;^\311\217=Q\256\223\273\217\237\022=\260\013\312:\013\003\r\275V\227\237<\231\204\220\275\2273\327\274C[\025\275L\345^\274\352\213J=\346\324\013=\353S\275=&%R=Ii\220\275G\244\247\275Z\270\'\275\2002\327\275^\221S\2740>(=6\342c\276o\310\210=d\\\375<\r\345<=\271}\367\274\033\350\221=9@2<\"\n\001>\224\277R=,\365\022\272\237\314\002=\332\017\263=\315\'\211\274\212\306\007\275\177\250u=g$\311\275ny\347\274\033\370\010\275-\207_=\356:%:\200\200\":0$\334\273\035\360\202=l\301\347<U\033\023\274\353\303\374=\324\265{\275\365d)<3qR=\370a\206\275s\356K\274!\344\356<RUp\275T%\313\275^\3366=Qu\323\275o0\311=\0030\271<h\256\332<\356+2=\325\242#\276\263_d=w\317\021\275v\365\305<\034\000\233\274\262\007\213\274\030\242V\274\303X5\274\327\261\211\275\305_\263<\264\257\031=\307\254\210=@S\036=o\367}\274\027\2076=\\\261\235=!\207\377\275|\036,=!\320\241\275\027FU<\246\227\314=\356\223\275\274\267\274\020<\340\235L\275U\340j=\\E\311\274\260B\220\275\030x\347<\302\212\206\275\021\320\216\275\241\313\346\274DK\266<\274\025\317<\357\313\242=\261}\204\275\"\001(\274\336\263\177\275\215\217\216=\260\'\004<\307\267B\275B\225J\275\204d\016<\005\320\010>\020(\301\275l7\220\275\207\017\271\275\305\007\312\275M\213\026\274\370+\244\275\221\032\231=\027\226\r>e\016<\275\243\261\030=\023\312\251=\3352\234\274\363\247\310<\360\271\222\275!\230\333<\017\373\016=\225v\375<b\302\212=:\031\236\273\237\225\351\275\027\337\275<e2\177<\274;\251<\326\304\355\275#\033\374\274\326s\345\275O\222\\=\305J\220\275\313\263\225=\207\326\244\274\336\377;:\263\371\304<\323\3634=V\375\337\274\272\006w\275u\276\n= \344X\274\260pO;-\366\326\275\002>\341\274\244\262\260<\314\014F=\315\376\366\274,F\032=7Z\302\274\253w\356\275\'\251\257\275\214 @=\375\035%<\301\341L\275k#\204=,\214\325<(\254\016=\221;\036=A\362u=\374\305\031\276\023\237\231\275I\0374\275\373F\206\275+\022\033>Qt\000\275\344\321\006\276T\304\206<\232eZ\276\033\244&=\177_\311\274\366\013O=\363#\363\275\240\023>=\334\315\266<\261@\240\274\313lP<7v\301\273_\233>\275\031\032\220=\010n\002\274M\310Z=\367\354\210<\251\202\202\275!6\374<Dq\222=\341P\302\275O\'\037\275\226wM\273\222c\355\275\327\225\365\273\336\302\271<U\307L\275,\302L;\340@\243\275\t\025\t\275\236\2070\274rG\214\273\333I\353=u\242\'\274~\320\235\273t\014J;\351^\207\275\312\371\212\274\366r}\275\232\000O\274\301\3408<_\244\006\273F\202O\275\022a\001\2761\346.=\202\\g\275PK\217\272\214\275\002\276!\364\306\275Y\244\034;\2759\327=\347,\014\2752V\370\274O\303\375<\275\010\241\274\264M <\215\347s\274\033Cr\275<\251\222\275U\326\001=\001\261\346\275f\316#\275>\335\272\274\351\240&<^\001\205\275\242\177\305<s$\t=\233\314\334\274\316\252\006>\320\355\005=\366L\215\274\001\271H\275d{\332\274N\266\256\274-\321c\275q\214l\275-\232\003>\203\322\200=+f.;\005=\332=Z\027,\276\213\364\203\275\313\202\315\274l\356y<\335\003p\275\365Q\213\275\2239\037=\tf\304\275\013.\225=q\211\347<\211\306\201\274\"\342\324\273\350U\342\275y\031y\274\335o^<hs\322<hj\214\275\234\250\017<\301.Q\275\362\335\274\275\343NV\274\026Q\230\275\346\210\327<\334\363\242\274\000q\323\274\334\327\\=\2258\346<G\331\230<!L\244=\334\016\370=\302~\332=\233HC<)0\274;A\250\021<d\246\315\274\022\307\277\275F\300\263\275\314Q\372\275i\"}\273s\3668\275\337f\370=s\022\270=k\233\214\275`y\355<\320\352T\275\t\210\273;+\230\235\274\354K\346:\273J\266=Ex3=f\207\335=\307\324\304=<C\212=\037\342\217\275\351\373\345=H`\277=\235\000\205\275\'^@\275>w\230<L\343I=\223\237\035\2762\265\221\275\302\003\215<[\034\370\274\325:\305=\021\277x=\rM\243=})\224\274A\374%\275a\333\246<\233\236\317<\271\312\236\275n\361\240=\364rX=\245\364\010\276(\320\374<\036\033\240\273L:+\275\221U\\=\276\253B=\245\234|=\265r\303\275\337\254-=\005(y=\304\207\200\274\r\027\251\274;\177V=\204\276\016\275\264\263\001=\362\2562=\354=\210<\272\277\210=`z\254\273Byy<\007\003m\274\277\222n\2742\341\244<\216\320j=\263\263M=E\251\213\273#]A\274\217\035Z=%n\207\275\345\306\n=\310\216:=\237\254\306=\365\320\314\275\210\315[=q\230\253<\250 \001;\312V\246\275r+\"=\271\231\307\275G\222\263=\177\206T;\356\323\003\275P\364\234\275e\301r\2742\346\t\275\324\224\233\275B\206\235\275\201\314\034<\216\r\256<s\233x\275;LN=\203\267\001\275V<0\275k\203\222=0\375?=,8_<F\227P:J\033z\275b 4\275oy;<\273\271\374<.\211I=t\354\326\275\321\352T=\311\262L\275\361}\327<da\224=\330\354-=\211I\022<\232\030\227\275\355y\024\275\342\200\230\275?wR=\247\214E=\227]\027\275\025\323\230<\270\220\207\275\024\337\026<\255\200\240=j\224\206\274\361Q+\276A\212\247=\373H\233\275\001U\222=\033\202\361<;3C\276V\227\261\273\375\306\214\275\0225\022=~\177\213\275e4\006;G\016\244<g\224\370\274N\'^\275\253\321\t\274D8\004=\340\007\337\274\250\257C\275\035\315\333=\335\333/\276q\265T\275\373\302\231<\270\332\300\274\304n\022\275yi\312<\\\214\021=n\311\026\274\266\211\304\275#\256\277<\334\314\334\275!\251\373=4\322\243\275t\314D=\315\025\354;\267\304\177=v\234\350=E\256\230\2742g\254=\233\243\235\275\236\330\226\274\023n\002=M\300\344\2754\315\221\2747\354.\275I<\265<\337\316*\275K%\021<\033\203h=\204\252\253\274\314\035 =\240L\014=\3612\315;l7\032\275\022\272\260<\363\206\335:\264\213\017\275\217\334\373<XR\256<*\264\034\274\260\327\311\274\207D\030=\242\220I;\342\327c<!\024\271\275\261\353\250=\306\316\373\274\376\303\266\274\232\014\227=e\020\013\275\320\304\242\275\316\352\220=\'\344O\275\356\351\234\275\247\007\267\275\332\351\365\274\007Rm\275]\354\350\275,\342_\275~\033\031<\225\275\300=\330^*=\205|\361\275\303\336[=c\267\004\274\353<\\\275\205\331\272<\032a\300\275\346\324\312=\247\037\177\275&\2449\275\037\027\302\274\220E\271:\227St\275\037\220\006>\313\357w<\263\310[\275s\237\263<\030%3<#\277\262\274\007\3205\274\302\255\277=\203\341\372=e\016\016>4\361[:}\275\014\275\277t\250\273\351\363\257=mE\247\275]#\345=\372Q\236\274\351\215\006>r|\211\274\305)\216<\246h\'\276I\205b\275\302p\320=!O\326<1<2=<SB\275%D,;\320~m\275\033\375_<3c\345<\367jX=J&\326<L\t\000<$\373k=\236\023\325\274\221y\336<X1:=\027\327\037\275\324:\271=\3663\r\275V\354\022\275g\224t\275\260S,\275\204`M\275{>\003>\304\347\347=M\360\017\271UP\231<\336v\024=\n\311e\275D\362\010=\224\372\">\304\365\276\275vMH\275\256\270+:\247\'\231<\260a\312\275Zx\215\274`9\030\276\270\005\275\275$\270\014=\313\347\252<\277\210\263:_\016\025\272\324Yv<.\017\311\275\342U\302\274\325\317\n\276\017(\213\274\205\031b=h\2201>\326\220o<\255\320\365=\260\362\\<l\364|\275\2532\245==x\305<\031\336\215<\325\215\272<\010\326L=]\317\005\275\226r\027\275\177D\356=\232\260\250=K\367\031\275\030\275g=\031\322\243=^\r<=\317[\001=\0268]<\223\267\327\275\354\361\240\274\023\347z\275^Lp\275\322\335`;\364\032S\275\037\003w=H\304+\275\267d\021\275\240\371\321<\267\204\222<\234\325\357\274\371&\320\274\372\023\223=\007\022d=:\006\266<!a\202=\367+n\275\224/\330\274\306\357\035=\236`\306=\261a\000\275\347r\200\274L\014\342=\356|\023>\306\227\233=L\254\216=\2647\004\275Y\246\r\271\231z\036\276\036\337\240\273\220\n\241;\224\352\316<\233\262q\274\226g\357\273\034\221\263\274f\222%\274LZ\r\276\024\333\033=\272\032%=ZL\347=HF\233\275\370\321y\274\276\300\243\275a\300\342\275|\326\222\273/=\272<0\301m=#\224\004\275\244F\'<9\226\213\275\353\301\267\274\032\362p\275\'\357\r=\nJ \275\207^\317\274\3354\301\2734\304&\275\200\352}\275\336\265\277=\346\267\327\275\031tU=P\210\312\274\227,\r=\260\232:<\366\331J=\350\324\035\275\264\241\346\274\356\261\034<\346\r\320<\032\324H\275E\263\006\274\007X\227=4\020L<;?\210\275\3531\032>\315v\236\275\263\030\002=\345\030\002=\354kh=\264\253\312\275\360\006\366\275\255\225\372\275t\251\014\275\020yD\274d\025\310=>\251\331=\306\220\023>\257\337p=*\032~\2757b\347=\237Vn<\363\255\255\2757\316*=\001Bz\272\322\317\031\275\275I\247<3[+=L\\e\274\347pv\275\217\244\200<\224->\275\367-\316\2759\r\201\274\304\220K=YR\307\274\013P\310=Y=B=\025m\341\274o\372\032\273\000\361\235\275\3758Y=FoO<GD\233\275\031 \322\275\204\351\355\274!F3<9\2109\274\036\251\251\275h\301~=\232Y\347\274\216(\t=r@\202<\243\351\247:db\274;\372K\334;A\342s\275\223u\307\275\225Ny=\245\211\374< \267V\275\2136\342<\030\206f\275\333\371\251<\034\250:\275\307&d=\242\030\214<\242\271\316;\362\'\037\274zr!;a4\n\275[\253\223<\225\014\367\274\256\001\347\274\351\373\251<\033\373%=\275\034B\275\237\377\300=\254\366}\273\245\321\210\274\233\347\201\275_R\314=\2233\010=\360)\200\275k-\300\274\213\377\002\275\315#h\273y\212\216<\357\207!=\006\327w\274\350<\221=l\004\177\2751\214P\275xot\275\031\376\217\274\224\010\333=\255\261\343\275\335h\032<x\262R\275\235\273\343\274\310s\221\274y\352\353\275\212\263m\275\205\263\271=\246\212\232<\'Y\264\275\300\035\006\276\340\320a=\032\250\227\275\204A2=\274\305\005\276\353\267\363<\006g\001\274#\024\302=\210\001\010\275p\213|\275\311\033\021\274\003\225\237\274\240\352\212\275\300\2063=\225)9=\317\312\367<\224\256\013>B\\\320\275\217\3335\2747hp\275\225\005O\2758\204c\274\323wq\274\236\375\266\274\']\372\274\035\017=\275\267\255X\274(B\200\275\373h\274\275P\300T\275\304 6<\036C\262\275\026\243\257<~?_=\316\320\231\275\270\353\023<\305\301\324=\215\373\366=\203\364E=G\"\236\275\234\270\243\275\005OE\274\235Q\355\274\246?\023>%\222\222\275\327\2113\274#\tY\275P\350\246=\037\362\215\275E|}=\272-\304<\371v\026\276\343\276\200<\214pa=P=j:I4\270=]\301\207\275\201\351W\275k\270c:\276zS>J.[\274^\232\265\275\245\244\276\275\315$\204<\253\236\364<\256\302\242\274(\270\'\275\353\274\332<\334\227\374<;nK\275]\322G\275\373`\031=b\034\373<X),\274c\306C\275\337\"\226\275\001\365\201=w\"\234<\360\0019=\220\016\304\275\242#=\275j\031\224<\302\305h=\t)X\275\213\232\246<\371\033\312=)\201\023=\002\360\273=\005M\002=<\210\243<\266\367\000=\272*\203\275\243(\227<\032\306=\275\017l\254\275t\213\327\273\023\366\257\273\016\244\356\275b\\\360\274\237)\205=\034\340\204=\177\226|\2750\337\200<\212\0046=\2066\261\275D\256\242\274\274\3006\275v\344\001\275\315}2\275\375\303L=\243\025\001\275\203\361\360\275\036\254 \275\010\261\r\275R\000\365<~\205\177\275\274\\\246=F\177j=\211r+\275N?\216\275/\254\231<\241UK<\254\021O\275\351\255\033\275)l\354<^\372\234<\304%\251\273t{\016\275@z\336;\261\346\303\275\346\266\273\275\353+\353;\234\222\202=Qq\240<\253s\010\275\314\214\017\275\342\256)\275\255\036\273\275\357?:=\004\031\021\275}x\t\2764\302q\275Q\'\325\275R\211\317\274h\322\333<Nb\307\274\216\006\254\274\231\336\034\274\273d\000<\243\320\244=HF!<\036\017\240<\035\246F\275\256\000\252\274T6H\275kdN=8$\261\274\n\312\307=\342\000\262<\307f\036=X\313\226\274\306T\354<\311\2670<.\035p=\356\"\315=ZH\233\275Q\205\006\275\331si=\311\203\210\275?\244\003\275y\223\304\275\207\303\351\273;5\376\273\036\n\226=\027\324$\275\337\245\004=t\024\306=\246C$=\277\202\333;B\013\213<:\247\026=\305\211\317\275\212\030\025>\346\030\347=\261N\204\274m:\213=\253\316/\275\232\000\266\275\262VM\274\002[\357\274\014rV=\315o,=)R\010\275\3315\240\274%\035X\275\326\206f\275\212\324\014>\356;\346=6$z<\031\323\323<W\245\244\271\263\357\010;\010=\210\272\355=#<\255\354*=WA\016=\013b\232=`\027S=\344\225\302\274\001\225)=\371^v=D\357\222=1\227S=\027\'\r\275\277\237\364=~-\252<\033F0\275\311\307]=C\216\244=\370\273\237\275\020/K\275\331\203\030=`\340\246\275\"\005><\314\262\313<U\033\266;\353\031L\275M\024\242\275$l\233\275\226\301\256\274\335\205c>\n\027\262\274\361\237\006\275uG\220\273\272B\255<\320\000\264=.3\214=v\221O=KA\210=\t&\366\275\017E/<\220\307\371\273<}X=\006e\026=`\377\273\274*\347\343=\243-\006\2767\255E\274r\245\r=5<\202=\203\201\217\275\242U\227\274\346\202\211\275D\260\362=J\366\232;Z>\245=\206\310\315\275\251\003\244=}y\230\274\rfs=\233\274\240\275[#c\2759\366D=\301jZ\275 n\016=\370Y\364<(M\211\273%p\320\274\356\037\272<\027~\221\275\357\224\327\275\030\272\243\275c7\355\275i\222\330;\024\245\000\276\243\203U=V\003R\275r\221\316\275\301:\337\2757\361\223<\034\366\014\275#\'\204\275\006g2=\243\356\237\274\360\264\331\275\316\002!\275\001\303\370<\221\\\007\275\233l.\275s\0337=\200q\271=\220\244r=\231\266\376<\n\374\240=~\357\241=j\277\221\274{A\031=wB\265<\264C\001>/\353y=L\312\227\275\343<=\276\232\251W\275f\234\322\273\211d\202\275\277\2528\275\244\"\371\275\307|\211=\341\305w=\036g=\275\223\260\t\275\231\371\337\274\033\362\265\275\266\252\323=\340\351\241=LP\324\274Yy\235\273\355fN\273\235\266\023=\2302\013=\357S)=\244j\267<7\377j>{ \315=\327\212]\2755\342\360\274G|\331\275\216\376=\275\230\344b\2744c(\275\200(#\275\222I\344;\002\230\312=X\003Y=\204\302\032<\\\311\242=\231\304>\275t\007\307<=\340\242\275\205\177\013>D\202\272\275`\351\004\2750\207\2308\224yS\275nC\254<\025\031\337\275$\266\326<V,\231=\253\252\317;\250\033\253\274\215T\235=\031\336\322\275\227\017\253\273Iv\341\274\237\010\023=x\241h=\033\326\025:p\260\355\275\022\345\275=\230Y\017\275\243T)\275G\371\347\274h\241\200\275\254\250\014=\004\007\200\275\232\227\267\275z\342d\275\365\255\250:\306\315\337=;0r\273\\\235\272\275\325\013\233\275\221>6\275|w\237\275\363H,91\215I=\363z\030>\n\2405=\324&\030=\320\215v=\300\237\274<\024\rm=Vz&\275\027% =\316\003\214=\217\364\022>\210\242\367<\314\025\037\275\236w\035<\274\243\224\275\353!\354\274.I \275\367,\241<\305_G\275\215\2075\2756\346\275\275\nM\214\275\222\003$<1\242\257\275]\266h\275q\334c=\226\032\026\275d\306\307\274\353@\016\275\343\037H\275\227m\236\275\217\261\204=\005\274F\275\345R\251<\002pn<\326\032\232<\002R\265\275\312<\007\2758\310r\273\013t\366=\006X\207=KW\n=\242\321\375:z\310\234\275\377\216\232;ns\221=\nX9=2\325\315\275\233<\035\275\327l\341<M,\245\275\3205\366\275Z\222\250\2759\322\214=F\252\036=*?f=\031\2253<M\025Y<\027l\271=!\372\314\274\242\351\335<(Y5\275\216x\034<\221\360\030\271\017\016E\275\230Y\262\275\200-|;\265@\376\273\262\307E\275\030\036\251\275fyC<C2\302\274\340\357M=u\247\370<b\036\317=\026|\234\275\257R\"\275l\236\026=\000\264\366<\214.\224<\201J\025\275\361\024@\275\025\002\004\274\303\023\310\275O\261\254\275\3404O<\272[\223=@\205\022\275U\'\231=g\r\261\275f\311\206=\221\320+=\301\210\"\275H\364X<\210\333\261\273Lhh=`\357\243;\340\243p=+?==\366?X\2744\245\226\274\210\260N\275I\022 \273\3323\302\274\220&v\274\003\327\034\275\376\023!\274\335U\232\275oi\265=\260\307!\276hK8=\360_\000\275\341\236n\274\214Y\022\275\362\361\207\274Vm0\274\020bg=\205\367\237=\244\200\000=\272g\034>\024$\250=\2635\031=\022\236\271<0\205\014\276P\254\237\275\177Q\343\275\010\017\217\274<\035\220=/\204\225\275p\374\252\274/\216R<\222\267\303\274s\355\220\275-\233\247\274 \224\211=\321{Z\274\264O\326\275\363H\317=_\340c\275C=\272:\301\2430\274\245\026w=@Z\r<\276_!\275\353O*=V\026#\274\3579*\274\002\233\204\274mX,<\231\343\226\275#n\n\276g\017A<\275\303Z\275\254,\374\274\300\034\260\275#\367\217=\250\236\024==4J<j\020\262\272\3253\"\275\251\354\035\274\277\250\305=1\321?=aE\022:-\275\215<a\266\213<\334d\260\275E65\275\226\014\027>\336\204\212\273\267\336}=B\340\206=\210\312\356\274\205\223)\275\032H\"\275\360)\227<\004\020\212\273\206\341\373;\014\030\321\275.\210\251\275\313\'\267\275\3071\226<*r\240\273W\005t= \206S\275D\250;<\267\322\317=\226E\352=\351\246\210\274\235KZ<\326\253\265=\332\370\233=\021\023\215\275\2519\030\275\225\205\307;&?\003=u\271\n>\2646\013\276~\2431=5\265\270\274@\242\240\275\305\n;=\211\227,<G\235\263\275\237\037\220=%\205?<\340\032\200\275\353\273\341<\234Z\364\274\331\311\233\274\013@\207\274\245\243\003\275\006\3323=\036\226\357<@\233\323\274\365\267\216=\n5\232\2759w\206\274\013\305h=2S\324\275\025-\250\275Mf\357\275\271+\326\275\243\2300=\261l\264\275\331\342*\275\360\300\361=\200\027\036\275Zeh=\351\361\254\274<\326\354<\\\244\255=4U\310\274\225\\c\273\014\207V=\371f\311;[o\377=\344\320\021<W\343w</\255\014\275\354\026\'=_\202\004<x\267\252=\217\314\206=\332\210\236\274\361\3301\274E\014\025=W\313M\275}\353[\274J1\362<\205@<\274\270[\366\275\214L\211<%\353\031\275\307\331\201\275\204~\202=\267\217\270\274I\027\215\274\240\246\372:\004\217\244=\0213\031<Z\2331\275\277QU<\344r\007\275\215lW=\232\373c;\225\265\357\274\300\023\363=\361k\254\275\027BN\2741\017\306<\213\034\356=}\317\204<<\\\266=m\323t=\302\237\203\274S\340\227\275d\306F\275KY$<\206\t\261;Q\217%=\247\241\016\276:p_\275\016i;\275l\266\'=\010z\241=\206L\212<\323\305\272\274\2267\367:}gZ\274\312n\230=\250\346\216\275\351`\016<\207\252\364\274\323\277\000\275\375Xp\275\334\300\331\274\334\\\n\275E0a<\344}\347<\214\324\306\275\374>\224=F\245\207\275x3\027\275\215S\021=4\341\000\276\225\372 =\206\334\213\2740N\245\275laX\274\025b\034=\374\334N\275\347\002\235\274\370\017\275\275e\264\200=p\332\353\271x\346R\274\321\334`\275c\331i\275X\001\007=\354\320\030=\227\177a\276\247\270s\275\321p\004\275\354R/<I\3066=5(]\275j\341\307\275/`<\276\236\307\231=\007?\215\275p\247\317<\355\014\312\275\260<$;\277N\246\2744\307\007\276\241I\234\275\200\316\265\275H\343q<\017\244#\274\227\337\004\275\345\177\234\275\205Y\203\275\022\302\362\275,\330\361\2746\301\272=\257I\254=\353w\255\275F\214\212=WD\353=\001\251\t=\026\271\031\274\346\325\025<qOq;\335 \336=\305\231U=\211\177\240=\214c\232=\270\2705\274\220]\255\2739\243\350\275B\314d\274V\023\232\275\213q\271\275\357\341\227\275/\245\200=\334\023\200\275Q\316\260\274\233I\214\275\371\324\342<\002u\003\275\033\020(=K\352\222=c\371\033\274\374\325Y<\002\267\024=\232>\023=\002b\221\274\366\314\212=\261\027\203\274\237\307#\275\245o\022<\233\326\237\274n\2116<\006P\034=\235\016\223=/\213T=\005\320g\274\037\251\247\275#\234y=\317<\215\275A/\212\275\244\325l\275\'\223B\275\"!\313=E\344);\336\n\322=\\,)<i\232\271\274SV\201\274G\346\215:\273\010\240=\002\"\346\273s\263@\275\202\224\357\274\362\263\216\275\351&\001\276\215\232\341\274(\222\250<\354\272\321\2759\244P\274\001C\003\274\001p\374\273\306e\271=%\t\000\276L\357\276==O\023=3\304\002>\227H\223=\343Y\257\275\275z\277;\021\376\t=u\316\347<\006+\316=l&x\274iAW=\000\227\300=\243:$=\310\360i\274\201\355}\272qX\'<\310\270\214<\217\235\002\275\261w\333<\323?r=3xt\274S\035\266<\253d\347\274\016\222\213=\203\310Z=\207\311%\275\260\317(\275s/K<\365\242\222=W\334\272\274f\3605\275\235{\277\274O\243\230;L\372\t\275\306\\v\2748\\\215\274\201nR<\334\367\264\275\330\002\262\274+\035\350<3\333Q\275\334\271\031=\273u\002\276:\330d=6\323r:\265\332n=8\306\225=\212\341I\275\226z\244\271=\177\225\275\323\247A=\254Cr=O\265\312=\333p\261\275\375\315\266;\"\014\032=\214\027`=\251\237\213\274\214\354*=h\206\271\273\031\240\230\275\021\367\207=\237c\243\275\354\006\317<\244\005#=\207\307\265<h\275\267\273\273b\334\275\225\366\r\275f\277|\274\313\024\332\274_\351\210\275\r\240R\275\265\031\353\275U\264e\275uU\372<\210\\7\274\030K\327=]\231\323\275\237\010\010=J\220\376\273\006\\\352\274\020\276\345\275\010\201-\274\264\027k<Bs\336\273\035x\034\276\034k\"=O\353\333\274x3\200=\356\226\221;\356#o=\257k0\275\313\250q\275\266\032\'>\276\211{\275\031\320\260\274\031\244\240=\345\243\205=O\030\237=\273\350\024=\017\215\332;\034\367\267<\217\003\345\275a\211l=\006\323\031=\213\2353\274\010\212\027\275\221\314\304=\317\206\221\275\220\274\237\274\024Hb\275\272\3118\274k\316\320\275\331o\320<\316\343\335=\021\245\343;\223\237R=\337^\246\272^HA\2745a\000\276\250\305a;\246Z\275\274T\222\343\274\347\320\221\274\241\005\032<\020U\320\272Q\307\001>\334\233\222\273\253\260)<\330\227\037\272\014m\233<\240\223\002=\226\t!>`\374r\275I\277t=@\363\306=\035\354\004=\374\000W=\035Z\214=\317\371\303<\'a\362\275\322%P\275\260\016&\276O\253\001=\220\210\211=sK\002\276 0\213\275/8\032\275w\224\236\275k\nN\2733=\361\274\320_\242\274\0031!\275\036i3\273\201\026Q=\253\324\227<\324u\362\275\237{5\274\234\235\326=k\010U=\255x\351\275Z\306n\2743\010\227\275o\330n\275\247\227\314\274\344\037\241\275\217\335\034=\337\031\222=%M\332=f\204\275=\271\246\265=\207z\365<\351\203\024\274C\260\322\275\266\226\250\275\213o\022>[9B<\014\323n<\335\324\313; \313\310=\256\021\017=\311o\362\275\305,D\275\341Y\343\274\033\334\254<\257\362\220\275\021\022\265\275\253\350\224\275\254of=\360\251\344\275\337\265\276<\355cD<\302\263\323;4\255\033\276\303%\014>Y\216O=\253\276\237\275\030\314\020=\351\221\003\275\332\364L;\024t\010\275~\3652;\010\312\030=k\200I=\231\267\254<\347\025\203\274\276\233\r=\024zk\275\373;\233<9\177\277<\231v\346\274x]\023\275\201\340\251\275Dp\207\275\377\275x<\262\000\350=\260\247\227\275\343\025S=\n\260\001\276?\257\000>/\361\022\275\363G\226=D^}\2753{\253=1\247\236\273\373\233q\274\211r;=3\202\360\273\213\260\210\274$ F=\\\361\222=I\365g=\365\277\n\274{:\204;\264\210\024\274\272\206\261=w\340(:3L\211\275\360\356\365=\225\031\\\273a\362@=\310b\351\274\303n\336=q\021-=c(5=|V\370<\216\375\344;\235\373\234=\035\177,\275\014t,=\301g<=\332\323\013\276\264\031L=P\"\272\273Q\312\211\275\237\273\023=G\234\266;\260\216y\275\013\207\316<j\213\221\275\335\356 =\257\315\023\275i\244\220=6\342@\275\350\262\272\275+.\224\274\017\243\224<\263w*;\347\302\005=\363\016\220=Bf\246\275ANL\275\367\320\212\274\r\341\037<%\362[\275|\300\221\274\037\022\255=\304\030\347<\220\303\321;{l\316=\261Do<?|\221\275e\377\025;\322\021?;e\027v\274v\205@\274\031\203\203=r\3119\274\351b\023=\372\000N<E]\375\275\201\022\317\273l\356Z=\363\320\216;G\245\265\274p\357\320\275\241\332\262\275i\023\277\275\362s\302< Er\274\245\234\350=\014I\037\274n \334=8\236$=\351\"\362<\327a.\275\307c\220\275\224\251W\275DE\312\275\306\321\221\275\232\026T<nH\016<\276QC\275\2050\261<\266\317\335\275\021u8\275}\276q=>\306\247;\200\312\263\275\006\035w\274w\372\035;`\224\204=\205\\\337\274!\320\352\274\214\245\321\273\357\337:<\202\222\360\274\357\005.;\370\237k=\014E\007=\323\220\260;&\205\200\275\037A\212=IA\000<\312\361\255\2740\342D=\206(\231\275.r9\267\222w\347\275\316\312\344=`\367\013\275\224\257\005\274\227\340\323\274(\217?=\332,\375<I,\340\274\357jI\275W^!\2749\224\253<5z\001\2757\037\316\274\356\275>=\026\256\357\273\327\353Z\274PR\335\274\2249\245\275e\321<<\001D\300\274\256\220\327\275\302z\230=\231>\370\273\350\354g\275\363O\021=\177\327V\275#\010\340\275\014\317\036=K\3642\275\307\257U=\262\261\252<|\200\004>\366K\r<\207[E\275uC\266\275(I\211=\212\275=\275\226\222\276\275l\n\202\275\266\244h=f\376\250<\324>\362=)\353\007=\032\254\017\274\377\321\346<qP\323=^o\231=\006\'\216=3\000%\276\203\342\276\275K5\240=D\245@\275l$\035=F\204\304\274^\017\314\275f\nF\274n\242-<\232/\253=<\256Y=\036b\206\274/\213l\275\311J\256=\3046P\275}O2>17^=W-\363<\237\374\275=\rVJ=\300)\243<]\350\000<\233\337\005\273~}\347\274\260\201\204=\177]\027\275\007\000\214=\027\216\346\275\320\351\207=8/\234<v#\227;\265\343p\275_\365\321\275\371\335\202\275\326\341\317=\267e\244=P\313\017\275\320\372\237\275\260\332\276=\232\252\260=)!F<\'\235\266<,\327\210\275w\037\312<\251\300T=\260L\372<\251\375*<\203g <\265\326\215\274\256M\'=\2649\366\275\313\003\024>HK\240<\302\344\221\275\330\315\022=\207g\237\275Lm\000;\257\n!=*\221\351=U{\020\275\201m\222\274\224\n\245<\000=T\275\220\335/=M\335\366\275\301\220\360<\322\270I\275R^\222\275\003\036`\274)\313#>6\"\007\275\024b\221\275\262$\330=\322$\036\275$\235\213=\030\205\027:a\270\277\273\027\305\342\275\230\226\031=\344\021\302\27379\332=Cg\246=\37542<\253\035e\275\305\021\304\275p\301\355\275\257\241\320\274\323\304z=\227\370\206\274\005\035\272\275\006i\034\275#Tt\274A\325\357\273w\246:=\260z\004\276\006Kf;}\034\336\273\343XC\273\r\333k\275\t\210\371\275j\320\246\274\354\322\014;\002j\202<\243\nh\275C\260\333=,\337\004=\366\024d\275\3602\272<]\344\375\274\355\035\273<\335n\262\275\033\334\231<v\331w<D\353\024\275\r!\300\275\000hR\275zY\004\275%~^<G\361\225\275\250\202\037\275yA\226\275\346\237l\275?\201\031\275\221i\230\275\240\334\230\275\\6\261=\n5\310=:\005\271=\215\227{\275\254\363k\275\231Ll\275\000i\243\275f\327\355\274\2622l<\217\272\300=\353\177$=Eh\345\275Z\344\244\275&x\200=\223\302k=\022\332\340\275K!\361\274u\021\246<\014\361Q\275uf\252\275\316pZ<\221\304\000>I+\2329\032\030\334<\220\007\332\273\355\302\234\275\371R\314\275\337\036\217\273\321#\360=\373\\\233=\320\371\244=\030\3211\275\305\222\021=\025\025<\275\345A:>X\032[=y\257\254\272\2149\343\274\274:\010\275\024\305?=\2448\333\274B\034\302\275\035O\374<\367\256\017=\264\277\225\275dB\302\274J\212A<\330\215\274\275\217o7;A\240\235\274LA\212\272\235x\314=\202.\215=~\003\306\274l\262<=N\275\033>?\314s\275aM$\275\345kC\275(;\243\275)\247M\275_Q\350\274\036\2322:\267\r\233\275T\330\032\274d\275!\275\256?\326=[\350\006=\306\212\344=$\252\r<\177\275\325;b\370\314\275*\300h=-Z\207\275\346\2477\275\215\024\037=\232;\364\273\305\261Y\2744Y\241=\332\306+=\331\276\341\274\263\231H\273G\215v<\024\220\233</e\021\276=\350\177<\323\230_;\346\241\252\275\373)O\275E\252\236\275\373\2037\274\357y\334<\2221\332\275\320\236D\275\227,y;y\241\035\275\014Y\022\276\212\300\371\274[.\252\274\003e\225\275+\245\014\275\365\301\310<\264\336\325\274y\025@\273\270h\313\275z\010_\273\177$&\274\'t\005\274\336\221)\273\204\263-=O\253\244\274\250|\217<(33=G\325\\\275i\355X\274\366\262\231;\324\220\377=?k\334==\321z\275\306EM\275\266\202\222=\247\346\216=\351\222\217<8( \275Y\177\326\275o8j\274E\"\237=\350\221%=\240Z\303<\264\333\311<\301(\251=\006\270\211=\300\345\242=\260\222\200<\027*\232<\350 \232=)\350\340=\363\314\344\275\333\302\024\275\032\022m\275XQ\010=\030\323D=\217\277\000\275\274\355\245<u\007N<M*\247=\2019\317\275i\306\267<\303y\304<\376$\307=\336\317\276<\270\365\226=\363\373\325=9\334\224=3\n\243=\222\326\305=\325~:<\355\266\333=S\340\014\275{\333K=\217<\330\271\313\345\021\275\212\246\031;P\007\213=\300\036\212=\351\266(\275f\001\220\275\\\246\030=\327q\375<\007T\247<\343R\231=\305\0176\273\315#\377\2743\253\225\274+4\276\274r\241R<\333\265\201\275\313\235E<\030\232\334<,;\305\274\036%/\275z\025\204=\026v\007>\261(\021\275\270\273R=:\006\013\272\310\347\220=f0\345;\366\214\212\274\177%\367=\272\317\201<Y\213\251\275\334\332V<D(\265=\303\330\313\275ON[\2753\031\"\276\327\267\321=B\246{=\275%\254<J\217H\275\335$\273=\251\232\220\275\003\260\013\275\304\331\313=8\277\\=Z\325\311\275\332\277@=\242r\210<i\304\332;\325\237u<\252\327\317<}g\225=q\245\333;\350\033e\275X]6\275\374\262U\275\263S\021=\252j\036\274\327r\211\275<R\305\275k\325\253=\374\367\003\276sRa\274V\315X=\r)o;\374\252O\275\341q\336\275\314H\231<w91=\260~\031=\245\374=\275\271\362\312<\267L\'=\362\305\260<Tf\306\274\241\211\007\275.\267\314\275\371\371\262<\325G\250=\362\312\257\275\372\331\352<g\304\253=+\300\270<\251c\252\274R\177\342:\244,\316=:\241/\275\337\336c\275G\372\246\275\212m\026\275\276T\262=\370\363W\275\027\233z\275Yg\312\275\"\032(<\347\326\256\273<[\266=\337\262\223=\332\004\024=^\243)\276A\'\221\275\027{\213\274~nz<\357\371\005>\3634\255<21\362=\026\303E\275\3667:;\302;O=\303\354\330\273C=\027\275\022\035\373\273\037\342\235\275\225\014\362\274\023+e=@I^\274\251\037\256=^f\222\275Z:\273\275|\r|<\207\366\312<\210X\357\273v\374o=9F\214;;\236\207=\317\227\227\274A\3608\275\340\304\231\275(\345\r<n\375(\274\035\255\017>\267\3021>:\253\304=\000\270\231\275)\027\t=\246_i\274\243F\262\275\365\220\027=\267\304D=HS\023\274\367\353\307\273\207\235\226\274\'\230\205\275\035\000\343<\230\036\371\275i\245\356;]\226U\275F\234\274<\206T\211=\340P\305\274\242\335\371=C\263\345\275\206\324\221=\257\314\334<n\'\262\274\343\n\253=\204\0209=M\006\220\274A\205\256<\005\310\264\275DX\253\273\373\371L\275=\203\010\275\362_\243\274\275Yr=\265m =\233\016\252=)7F\275\277\265\332\274q\013\026\273\354\352\346=O\254\"\275\177 .\274u\347\354=y\230g=\0064\003=\245E\357<\346\177H\275\022\207\010=\325\256\203\275\034\2230=\265{ \275\360-\274\274\336\232\226=\030\352\r\276\342\234:=\366\233N\275)\317\305\273\303\033\211=H\222\250<\350\330\302\275\335\231\013>\334o\347\275\345\213!\275\037s(\275\177\346\300\274$\326\226<\326\231\221=\355j\r\275\247\302\330;\356\017T=Q\203\313;0UA\275\361\263x<\344J\222\275\362S\264=\\\256\224\274]T\224\275!kz=\226b\033\275U\216\310\275\355\260A\274T\036\023<\226\337|\274&\245\201\275eU\346\274X!\240\275\177+h\274N\363I=Z3+=bj`=rl\246=e,]=3X\224\275\020o\267< \312\255\274H\301S<\016\\O<\316\351\237=\202\317\007\275D0\005\275\213\n\200\275JO\224=\220\200x\275\336`1=\"8\336;\226\032\311=\342\324]\275gY\373<DYW<\341e\225=)\210\010\275&z\263<_XU=\203\211\225\275\001\351\261=\342s\000\276\306\220o\275\314\324\"\274j[><\023nX\275s\357\200=\006Ed<\347P\266<\230\205\r=\247\366\035\275\303\211v\274\t;\367<\027O\212\274\314\0001<\227\372T\275P\204@=t\224\203\275\253\342\260\275G\000\262<\224\224\210\275M\244l=wY1<\335:_<\342;\207<\3116\021\275\324\017\231;\344o\201\275\263\325\"=\r\016\030<\034\271\320=\361\260\013\275\177J\021\275\313J\226=\240\')=7\252\246=\032t&\274\217E\013=\210\231X\275\330\232\234=\333\355\206=\352\226\203=\207\267]\275\343\"\014<\314\232\016\274\315\335\241;\320\002\004\2751R7\274\212w\363;\024\343\210\275;\362\253;(\220\251\274\377\360\204\275e\213:\275*G\255=\237\355\271\275j\016\254\273\301\261\222<\030\227\004\276\315b\356=\273g\342\275\336\033a=R3\005\274|f\313\274Q\205\016\2760\266\203=\254j?\276)\\w=\236A\226=\371\t\203<1\2322\275\206^\263\275\235k\360\2749qX\274\211\361`\275\2566\000>U\007#=k\003e=\227\276:\275\027\204\364\272\327Z\256=\253|\264=>\301\036>\364\370\257=\316G\235\275LC6=\"\241\020\274\343\"\031\2757\246\276=\255\314,<\232\001\005\274=\263\351<\013\010\'=\266F\"\276\220\032\235\275i\277\016>g\230(<\206\215\272\275Y\373\036<\243\216\304\275\361\030\265=\344\220*\275\265\342U\275\213\276\245=4\346\222\275\244m\022\274L\346\300=\357\206\027\276:\350~\275\035\252Z\274\212\331\273\274\316e\222=-\344\373\274\374\244\344\2733\201\035=\314\023\374<\231\001\241\275u\342\000\275\317W)<\245\323\264\275\252\016\014=\272\356\212=\304\235\306<x)\220\274\241\365c\275~c\254\274\0101\274\275 z\271\273L\242Z=\017\327\023<\332\312\330\274\264\236\275\274I\216\211=a,\264<\263=\353\274\253;\236\2742\274V<\214\330\t\274|\322\005\276\351\010\302<H\036\316\275\336\331\014;\225^\022=\363\020X\275d:\330\274\250W =\264\206\003\275\'\372\375\274\304\326,\275\201 `=\377\201\232\275V\347\200=t\260\346\275\346^\004<MA\216\275\370Z\202<\013\376\351\275\376\267i<O\376\207=\221\337\001>\236\022\305\275\347\264\347\275\222z\n\275bC\027\275\352\251\204=sk\301\275{\337+\2740\0274=\tD\353\275\361\004X=\366yN\275p\372\372=\233r\264=\n\240\206<\320_\377<\210\014|<\206\335\206\273>\325\224\275\321\374\216\274H\263@<\233\257\256\275\rK\270\275\337iJ\275\335\276 \274\340BK<\036\343(=\004\342Z\2756|\333\275f\327l;\332S<=PI\350<\307R\202<\347\347\307\275\217\252e=p\257\211=\323\n\013\2753<\017\276\211<q\275\211\341\\\275^\227I\274\275\205\031\276\217\202\027\276\220\000\303\275\201\210\301\273=\324\034=ES\007=\366\031\n\275<\320\362\272\022\222\367\273!\360\007\274\031\252\025>\267y^<&+\037=m\024\023<\241\270i<\023\257\264= \372\021\274/=\361<\2429\355<\022y;\275PA\006<\340\025\t<\241\227\300;\337\240\226=\203y\037\276Fk:=O\213\241\275\261\305q\2747r\212=\226\257\370\274]w\317\275\035\254\211\275Q\021e=F\271\273=\326c\361\274\254\240i\274\0220r\274\023\2214=\204Uj\273\211F?\275\257\267\256:\310\2611\275Ix\320\274O\335R=x\001\227\275\246\306\014=K\341/=\325g\017=\225\235\327<\r\260a\275\255\210)\2755\250\225<\354\254\250<\207\r\340\275\245o8=B\365q\273YX$\274Y\300*=\371\206\367\275B\270\210=\0250i\275\370\252\367<R\360>\275U\002k=\255\227\336\273\007.\211\274I\240\261=I4f\275\340\266\332\273\233\320\r\275\211\001\225\274z\201o\275\0068\022\276\321\256\224=E\203\252\274\036\003.;\017+\004\276U\177(\276\253:\250<P\320\024:\331\003\272\274\034@\014=\025\343\234\275z\325{\275\r\267\226\275s8\246\274\337\274F\273\007x~=\224\3759\275\0107\236\274\025N\273\273l>\215<\210\336\376<\264\310\312\275\317\036\236\274\017]\207=\371\317\366<;:O\275\312x\374<\376\260\t\275\356\327\363<u\314>=5\333c;\354\224O<\271\225\344\2754Z?=\204\240\305\272\232\253\337<\335\202\247=\244k,\2744\211\016;s\372\005=[\204~=\267\341\237\275\r&\002\276\202\355\320\275\017\200\000<NG\360=\024\343!\275[u\371\274\221Q@\275{\016\273<\010iw<^*1<\205\333x\275\225z\006=\212f\253\275\n2\021=x\357|\273\324\365\013=\3209\275<kA\025=\251\250\356\274\346U\242\275\031\246\237=\254J\317\275\266KN\275e\010\233\275-\347\000>\356\346\266=\257\354F\275\304\302!\276+\220\303\275\202\'y\275=\231\177\275\342c\236=-b\002\2762\266\254\275\215\362s\275\321\031\254\275\232~\233\275Z\026\024\275\255/\356\274:\373\034\275>\267\253<\223!k\275\"\'\233<\357\342\230\275\220\t\273<J\036\204\275\003?\303=7\230\212=`\273\300\274\375(U\273E\347\223=j%\355\275\374Y\237=\200/E=\342\267-;\203\373\"\273`\331\377\275i\252\026\275\2600\250\275\343\334d<\371YY\275]\2465=*\243\304\273W\\\211\275+B\206=\nLf=\273\007\003\276\251\3347\274\2467\335\274\356\013<\275\230\016\274<p\"\235\274\207\256l;\203I\017\276\023X\002\275c\326\347<S#\177<\007G\224\275\350\013\001=\024\033$\276\177\357\236\275\000\347\303=T\014\203\275<\027L\275\\\277M\274M\275\323=\352\001\236=\302C\343\274bPC=\233\035r\275\205\323\024=\331\237\270\273\215\270\271\275\317\324\200=\026\321\010=\341\341\020\273\026\352\025\275Z+\340=B\013\256\275\360+\310\274J\357\033=\251\265\023<\245o\316=\354;w=\350\314\027\275\217<\213=3\336\005\275\2527\033>\240\311\222\272;\335\220<\341Y\263;\210I\326\274\017\210*\275\025\0068\275\353\234\274<\206X\255=\352\340\235\275\267\001N\275\020\302\032<\370\337\000\275J\223+\275\315P`=\235\021\337=\235\207\300\274\304p>=D\315\204\275\243\330\204\275\007!\377\273\300O\344\274\t\037I\274\244&\247\274q\016\032\274\253S\235\273\322\306\313=\321U\201=\273\036s\275+\357\005\275_\366\224;U\216\277=$\262\255=h#\230\275p\026\330<\311oo\275x\227\350\275\366rP=\031\231\331;\363>\023\275zDR\275\267\242\226=\266\305\035=\365C,=\257J\341<9\013\200\275(u\026\275\367\337\255\274M\2413<\354\374\245\275\207\372\255=[\216$=\264\013\336<\337S\266=\377 Y=\026\353\207\275n\246\013\275\221-I=\272\333\016=\304q\235=\037\024\262\273O6\310\274\213\"R\274\325:\264\274i.\016\275\214\031\241\275|9\223\275\361\032p\275\340\346g<\230\000F\275\342\033S=)\316\270=\257\372N<\022\315\024\275c\306\021=\002\330\370\275\034\345\242\2747\014\037\275Tr\t>\203\312m\2758\330\216=oS\302<\347A\225\275\371(D\275\366\211\007=\303\207\234<\342BJ=\037\013\363\272\'\340\224\274\310\326E\273\325\260f=\351\364\216;\353\227~<\372>\240;\323\227e=B\n0\274x\346\326<\314\217\261\275V\327\261=\207\356\225=\252p\276\274z\016.=\370\234\377\274h\357\302=J\273t\275\337\377\242\275\311>@\273\214\275\263;\341\023;\275\244=}<\3568\375\275\333\373N=\334\\u=H\221\"\275I2\276<W\237\275\274\222l\340\274\257\244\230=\371\251\320=\370\315\206=\324\3527\275\331$\006\275\010\206\000\275\267\273\234\273?\223\374\272 \243(\275Q\024\254<\345{>\275l>\221\274>\316\255=p\340\006=o\245\360\273\206}\236\2742\356W\275\233&\273\275I\274\034\275[$W\275s\240$>*w\340\275:z\257=\022\037U=NP\251\275\360\347\005=\312{\316\275\226\245\007\275k\225\235=\363\253-\276\326\210\377< \355\353\275\352b\032=~\354\236\275\017\1777<\'o\320\273\351\376\236<S(\017\274+\020?=\342\024\240\275\304\242+>\271\376\205\275Z\246N<\251\221\312\275\266T)\276\217b\264\274\336X\221<\242B\367<\265jp<\346J\205\275\177\352\220\274\242\263\341<\tp\'\275~f`\275\352{P=(\2621\275\033\325\270<\023Y\022\275%\363.\275\275\337k=\231f\374\274\3461\206\275\351\374\247=\261d\221=,K\203<\300\377J=\210\016l\272\364$\246\273\023\214z\275-\030\206<\007po\275V\310\262=\231\225x>\320\014\304\274$RY\275j\030Z=\244i\212\274\305g<\273\037\026\337\274\314\265\255=\307\227\371=N\304l<\250\203W\2759\242\335\275\344\344\232\2758\n\177=e\255\266\274Sdi<\345b\350\274\244r\205<L0}\275?\025\206\275be\220=wH\265\274\377\376\321\275\322W\252\275h\265\217<\262\325L=\320;\323<\244\330\264\275A/]<j\351\010>\007q/=\355@A\275\373\003\215\275\007Z\376\274n\306\202\275\276z{<\365\275\205\274`n\317\274o_\312;l\321j={\352\352\274pXS=\322fx\275P\205\322=n\227\252\275_\214\177<!\320\225\274\003\200V<\274[#\275\247\270\372;\343\243\332=\014\277\303<\341f[=i\311\222\2752\024o\275\022&\260\275?\266\340;C\017\010\275\312\205\037>\265@\227\274\201\256\213;iU\353;\002t\235\273\257r\211;m\306\245=] \025=\322\232\273\274jJ\203\275\204\256\370<\313Pk=Ew\225\275\372\004\217\273\350\366\201\274\367T\245<\302\310\346=\203\345\232\275&j\241=z\263{=Q\336\265\272\201\222y=\326H\323;\342}\236<qX]\275\"\r\003\275\361\307\321\274xV[\275f&\241\275\007Q\023\276v\233x<I\231\337=\304\255\005\275\2652\223\275j\000==\346\300\207=\205S\033\275=?\017>\np\350=u\235\365<\243\252C<\263\002\"9JiU\274:&\325=4v?=\0008\240;9x\215\2732\333\305=\325\"\324\274V\331&\276y\273H\275^vg\275d\203\240\275\'\355Y\275\342\017\246\274\3259r<\363\025\221<+\276\241\274\021j&=:Y\223=n\014)\275\027\202\251=x\324\005=\364\242\376\274\031\303\372\273\313{ \272\013\343\206\274\223:j\274\230|\302\274\345\317\21799e3=\013\225k=Lx)=\202\002-=_\305\344={;a=M\342\241<\n]X\275\377S\223=|\022\212\275\004\370\320\274\250\010\323<B\336\256\275\'\337\006=\206\205\336\273\034\010\302\272\017\030\034\274\2164\243=\250\301E=\324-\251\274{\243\227=\321,q\272\242\225\330\273J\246\271=\365\265\316=b\214\006\275v\217\001\274\375u\007\276z\274\307\274\037\022\014\276\263\035\311\275\352 \275<\033\377x<\366\211\026=\007\360\037\274\377n\333\275\277\"%\275q\000\201<w\351A<4N/>v!F\272.\000\035=\340Z\306\274\017\212\270\275S\361\200\274\212\214_=\273\000\225=t\265\210\274\337\345\265\275\'(\206\274\3375\336\2749\027\177<y=M\275V\321b\275\036(b\274\242\340\330<\277\027{\273\344\357!=\254&\200\273\017\226\007=\351\354&\276\307\330\214\275)\3022\275\321NS\275\026m\305\274\314(\316\274K]\275=\007\033P=\374\322\240\275\340\2220=\000\205c\275\306g\316\275\001\211\027<H\226\277=9\200q\274\317\347\206<d!\255\275P\336\303\275m\037\232=x\330\233\275\006\032\030\275;\001K\275\361u\003>a\333\207\275\316\244\353<\366\251!\275u\010e=\333\2530\275\025\214\276\274\324\365\232\275t\324\232:\332P\237=+\271d\275N\345\332\274\204\277\227<\366\220\010\275\331}\206=V\2558\276\031\033Q\274!\336\325\274g\317\213=c\362\027\2758\276l=\306\353\250=\323\362\235\275\200o\215\275H-\347<9\267\305\275\003\205\243=\312\212\\\273\311P\030>\"O\'\275.\276\371;\334Il<R\\\'\275\277\236\237\275\273\230\216=\004\331^\275\372bP=7\0350\275\273\203\004\275\250\336\335\273;\005a=q8\233\275\346$\031\275D.\270=\307\010\010\275X[\210<\355\200&\275\377\226|<\214X\020=\317X@\274\315\241\261\274\206\344/<\250N\322\274\245\014|\274.R+=r\230\370=(S\254\275\244\203\210\274\264\365\337\275\304\266\010=\210\317\307\275\377s$\2762J\"\273\302>\320<*e+=\037\333\240\275\224j/\275\022J\177=\t\253(\276\372\374\231<n\214\212\275$\337u<\016\2153<2Z\221=\360hV\274O\360\245\275\234\302\356=5\"\226\275\311 !=K\352\263=\001\350\315=\226am<Fc\226\274\332\305\244<N\215\331\273\222\362\r=q\007)=^\346\303\274;\300>\274Cu\035=m\204y\275\326\243\266=\264]\226;Y\225\265\274M\215s\274!\342\342\275\331\243.=\322\214\001\275\033\272M=\024\345\320\275\3404\341=\263i\036>-y\215\275|C\340<*\313$\276\360\301\245<\334V\013\275\324\317\t=\363>\257\275\204\204\242=\000\371\000=Fq\200\275\006Y\345\274%\203\017<\213\315\275\274\035! >\235t\335\274\251\246%<\335\254\034=\235\335\353<\006 0\275\037\326\240=\332;^<B\031\243=\0311\273\2751}\311=\314\027\203\275\253`X\275zy\270<.%\267\275:\312\373<\030\337\216=E\232\302=+\304\206=>\206\253\275\224\250\006>|C\347\273\nY\333\273b\003\236\272]\311*\275\032\275\265\274\\\2510<\022\t[=X\010\217\273\355\r\205\275z\362e<\275\020\334;\000\273\213\275\234g\006>V\356\214=[R*<\251\\N=\350\332f=\212\354\257\274)V\026\275T>\351\275\031\023\346=\371B\233\275ss\310=\201v\031=i,\024=\331\356P;\245V\002=\360,2=\244\016\221\275\2464\234\275U\333\320\274\231\335\002\275\360\037\007\273\2514\231\275\353\246\t=(\025\270=c{|=\357\211,=S\335\026\275\354_\370\274R\"D\275\330\347\003\273\020\272\263\274\210\221\205\275\031^{<l\353&\275\362k\300\274E\023t\2756\037\305;D \222:3T\317\273\253\354\212\274\032\335\362\274\232\033P\275\267\026\360=/\320\216=j&\257\275\024q\221=\023_\352=\031\320\311;T\206\314\275pb\337=\353%\235\275Yf\326=in$\275\344\232\025=\373\307\017\275\300{C=\024\247\240=\324\3772\275\356\357\341=*\032\213\274\007\355\326<+,\252\275\220@\"\275\264C;<S\262\\\275\236\362\204\275T+\220;\370&\203\275\020\226T\273\204\331W\275\014\2762\275\336\363A=\307\376\010;\0025\337\272\322S\250=\'~\334:\244B <\254=\003\275My2=\254\234\315=\204\227\322=i\234\350\275\317/\260=p\312\206=\262\345\333<\305\257x<\303lR\274\025\2436\275\255\rL<+\373\311\275\327Z\336\274\324 6\275\216\375\r=\356\373+\274\014\322\271=\006\234\273<O\344\370<\370i\252<$M.\274\370$\230<\200\311\013<\034\336\203;\'\021H\275\321\017\247<\341\366L<\246\014\353\275FWZ\274\277\327\313\274\371!\264<\210\346\375=\323\365d\275#k\352<\314\240\241\275W\202+\275\017\030~\275\234$+=\372ex\275\'\212\021=L\024\023\275\026\021\244\274QT\335<)\303\022\275\376\'h=\312\353\247\275\002^d=t\240\006<=\221S\275Y\177~\273\260\216[\275\220$E=G\304\201\275yB\370\274*\303\323=\t\344\217\275\202\002\200=\205H\332<\323\205\344<\243\002\210=\322g\343\275\211\024T=%<D\274vX\304\275z\224\251\275)J5=\210\327\003\276W\246I=h\025\336\2749l\241\275b\325\300\274\242\347\340<X=\032\276\350A\345<\022\367\t=\202h\201\274=\312D\275\335\3216<\253\212\001\275\360yd\275\032.\211\274\354+U<\003\017\030=\214\016\016\275\362\024p=\260`\020\274/C\207=\341 \210:/x\367<\232\276\361;\007~\246;j\323\203=B-f>5\361\032<\350Yc=%9\313\274\352AA=W$\321\275\353\370 \276\202\355\361\275;\350\261\275\321\277\246=\316\236\237\275\271e]\275\346\247\345<P\355\221</\006\010<z1\254<[\350\210=\3025}\275\326mq\275\374\243\032\275\342t\320\274D\313m\275W=\370\274\217u\376<t\255\217\2753\357W\274\"t\177=z\261\264<\200?\373\275.\374F\2755\316U\275(\017\330\274\241\020:\275\223\315\t\276\276\036\254<S*7=?\253e<\034A\035\275\356\303\212<0\315\333;\221\020\377\274\225W\241;\307\325\253=]\321+\274@\364\262<\273\260L<\243\002E=\014p\261=h\232\250\275\3370\t\274\236\233\000=^F\250=\024\301b\275F\307\307;\323qA\275\300\371*\276LkJ=\377\242]\274\010\364\234<y[)=\245\3273=\313+y=n|e=\322k*=&#S<\272?\"=rRV=\036\232\234=\216\025*\275\242\340\020;\341\260K=\034\003\033\274?b#=\353;\251\274\261\026\353\275\025\327\337=By$\274\316\027^\275B\331\025\275\246\347\023\275$\363\265\275\256\251\301\275 to\274\023\360:\275\007r|<\032?\257=>\032u=\263\363\025=\217.\310\274\360L\005\275\'\330\217=\021Fc=Y\337Z\275&\326\343:\006#h=^\362\036=\252\235\277=5\274\265\274\352\241\240=\355\354\365=\324r^=\273\';=\037\231\370<X\022\342=B\330\362\273\210,\273=;<9>\362\314b\275{\" =\213\257}\275\302\317\315=\356\351T\275\016\252\301<\306\034\201\275\321\366\373<\224\354\030<\022\204\326\275\304U\213\274\355\010=\275\035\317$\275\001\024\223=\255-\306=\025(H\276\361\344\026=S\n\202\275\2666\202=\214p\203\274\202\024\250\275\005}\016=\265R\007>\000\330\023\2757\277\374\275\372O,==\304s=\306lv=\376x<\275&\217\335<U\2108\275[\255\001=\202G\020\275\202\242\353\274\366\253s=\006\275\212<\271t\003<\332\306];\031\343\350\274\232\353\234=4W\t=%z\323=3\263\240\275\347\205\233<\006k\000<k4\276=\007\254\254<\351\354\014\273\253\351W\274\034nT\275\337\031\347=\0057\220=\275\035\023=1bb\275\006y5\275\240L\317=\250\370\260\273\371\266-\274\235\0256<\n\000\275=/\261^\275&S2=\236?\245<\357\263\202\273\345-\035=\375\211A=\"\"\343<\320\210\214=\241\260v\274\235PR\273\263\361\362\275\252R\017\275|=X\275XH\031=\353\206\271\275S\365t\275\222\365+=\r\240\234=\275\204\025\274\"?\345\275\031l\316<\022\274\020\2758\356\016<\340-J\272\232$K=y\261Q\275\232\251\337=_\'\310=\343\326\373=A&\\\275Q\263\366\274\010R\231<\204\303\307;\035x\220\275\337Y\027\2753j(=\211\355\351;*\221-\274\0015r;\322\341\244\275~\352\014=k\nw\274\244V\014<T\277\216=v\2455\275\366x*>\037\034\364\274,\'P\275\357\311\254<\373a\225\275\324\213\230\273d\320\300\275 \236a=\036\270\273=\026\312\342\273\334W\216\275\300Kp<\272\277`=r\224\204<\216\026i\275/4\270\274E Z\275\275\240F\275\211\253\313=\345\225;=\007\n\347<\232a\246\274G\326M\274Qq \2758\315\317\275B\363B=-\256\313\274\310WO\274f\032\317\273M\337\326=\177\312\304\275\273\300\330\274\252\361\313=b\267\034<NUS\275Tf6>\345\273\000\275\213 \215\273\274f\260\2744!\216<\'Tk\275@\027\r<\312\231\212=z\366V=\030\212\310\275\232\314\214\2759\335\001;\303Mo>\016e]\275\222o%=\362\r8\275\354\353\002=\341\"\315<O\351\204\275\334\0013\275\205\255\276\274\343\354\207\275LPA<\0079\031>w\327\005=\337\203\210<\021\237q=\031\222\031:\261\354\227\274\370\3344\275\313\312w\275\234\255\016=\354\246\245\274\003\347\274=\250\021\035\275\3645\245\274\253\350\022=2\354\345\275E\202\013:G\310-=\355\375\323=ya8=\364\374\325\275\342\3574=I@K\274\252\317\025\272\370\205\262\274\262\207B=\325bo=g`\211=C\240>\275\304\214\226\275\360\365\356=\362\t\021=`\343\001=5\276\224\273\241>\231=\364U\323\275\2418\246<Z\026,=\037]\002=\n]\013>\326#\310\275g#7\275\277f\341<\020Y+=\360\"5\275\177\307\344<T\330&\274(o\335\274\207\006\260=\244+d\274\264\275L\275\307\302\017\275\235\242\257=\374\017d=,vk\275-\217\312=\274 \203=~<\3249a\215?=\374\232i\274\233\r\362\274\246\327\370=\343\1778=}:\240\2745X\332=S\343\346\274\304p\010\276\226\227p=\n\233Q\275\316?\031\275\241o-<0C\205=\360[<\274A\315v=E\022\203<b\243\266=\031\035\023\275?\"d=\225\013\013=\317\036\034=\224\357\205=S\234\216\274\230\277\344\275\345\336\017\275Op\026\275-\225\225=O\272\234=>@\365<\371e\216\275\277\356!\275.\177\355\274\254W`\274a\263W\275d=n=\013X\237=X\312\376<\330\373\234\272\177\020F=\200 G\276Iz\324<7\243\254\275\261^\026<\030\377\246\275\245TR=\031\314\323;L\232\273=iH\263\274B6\272\275:\265\355\275\000\314\321\275\376#=\275\332\366\237=\331\005\024\275\002\245\216=\206\365\354\273\"\035\365=\236\010\212;\377l\210\274\347i\007>\322\334\270<*\320w\274\245\227\014\275\340\356\206=\007\345\327;\220\013\026=T\016i=B\227\325<\301\007\276\275\265]\225:%\253\016\276\373\347\013=\272d\003<\221h\230<\325\010\274\274\217{A=\343 \371\273\3214\317<&\331\020\274\361\216\364<T\024\272;\024a\366=R;B\2758\320\302=Q\317p=K\2033\2754r\364<v\234_\275\215\237\364<\363\030b<\021g\t\275\310C\035\273Q=\306\275|\263\324\275~JI<\256\307w\275\373\321\376<\312\362\231=\005\032\225\275O\376f=\374\373\247=Y\214\025\275\351\362\005\276\252\367w\273\024>\201=\275\tk=\343\255\260\275\322\"e\275\264\256\030\276\022\203\311\275\207\205\235\275\256\020\017<\027;8\275~_p\275B\237K\275f\375\350\274bF\232\275\0336\254\275\226\033\303\274\023{\205\275Z\202K\274\320\373\332\275\272W\257=\357uh;\264\237\242\275\324\240\331;\375\2433\275\205\227\253\274q\326\n\275\205\361\253\275\320\353\307\274\332\"\325=.W!=\002\203p=\346\245\360<\200\036\311=\341c\241\274\034\252\241=\024\317\353\2757\316\003\276\2009J\275\001\205\211\275\203\263m\275u\254\357\274\242 i\275\005O0\275\264\252C= v\017=\223\251\260<l\252\354\275y\277#\274\232\237\001\276.O\222\275\232\342\335;e?\211=}\324\374:o\335\221\275\311\370G\275=c\254=\223\256\332\275\232B\203\273T\367\025\275@\025%=\002\t\221<\364\300j=s\365}\275o\336\t<\254vn;\326\177#=g\027\001\274\376p\224\274\234\027\234\273_4\326\275\211\330y\275\325\r\270\274\036mi=S\234\034\275\353\304\n=\207H$\275\244\300Q<\325\364L\275\326Y\034;\007)\253\275\361\024V\275o\031\257\275W\346\241\275EJ\016\275dHZ\275O\232\226=\211}R=8}I=\320\337\t=6c\213=\025\331\235=\201\307}<\332\353\023>CN\342<\234f\346\273\023\347p=\r\031\220\274\265\265\246\275\025\r\377<enA\274\356\253\020=\366\234\017\2753\362\255=\365V\'\275n\2361=U0\307=\206H\240<\225\220\246=a\332?\275\016&\214\275\242\022\222=P\200\214\275JZ\251\275\323\236\257\275\374D\251\275\002\245\253\274`\022\331\274\027\215\317\275\037\235\366<d\232\031<\205\256\275\275jA\023\275\357\236!\276Q\t\276=r\241\252=\357T\371;\322\330\216\274;\355\223<\335\300o\274/\315\022=+i\005\275\241\026-\275\321\325\215=\305\020\335\274F\211\"\276\240\226T=$\371\201<\266\2751\275\375\016\351=\354\334C=\221q\362<\205\013\243=\365\227\013>\025~\030=\241\337\301\274\365./\275\337\350\214<p\220\017\275\023,\216;\326.\r=\250kO;\021\327W=eI\'<i\027\364\275\246bi\275\365?4\275h&\364\273\376\n\241<\342\350O=\316\007\017=\240:i=\306\326r\275\023\367\356<\025yn\275\032\210.\274\375\245\224;E\326E=\251\024\252\275\r5\372<\202t\350\275\027\246\327<\023*\024=\254K\223\275\3556@\274\326\225\\\274\322i|=\356\301\227<\003\274\310=\312O\260\2734S[<\371QE=\241\273\001\273q\324e\274.%\221=ef2=}U\204=+w\004\274\243\207/=ZM\177=\032w-=\"\256R\275\3174\223\275\375\314\300<\t\321-\275-\305\003\275J\304\213\275V\272\272=\350C\240=\317\300h\275\376z\265<Ds\362\274V\261H\276\314GF9\220)\001\275\002\3114=\314\312\304\273*8(\275V\020+=\354\237\007=\334Z\274\275\t1\251\274\256\352\334<j\017\334\275\000\016\264<\375[\302\274\220{\310\275\244\310c<\221\303\236\275`?\351<e\241q=\243\262l\275\031\016\010\275U6\347=I\202_=\326-\331\274@Y\300<M*\262\275\205F=\275\270\367 =\311\205\220\275\315\235J\275N.\240=a\320\252\272\277\223\210\275\203\203\304;blS;\023\027\004\276\275\335\275\274\264\207\252=\"\301J<\250Yh<(\320\324<+@\026>\305\213\230\2759\265|<\001p\017=\202\270\263=\250{B=\340\034\017=?\300\207=4\3612\275\355\271[\274\345\242c\275\367%F<\3250\200\275,\324z\275\250\253\313\273\236\312y=\323v\223<AQ1\274(\225s\274uw\002\274\262\356\000\275\030\324\237=\267\367\212\275\241\206o\275F\221\301<\2243b=s\374l=\312\026\265=r\274\311=\255-\311<EM\323\274_\366\303<\275D\262\274$\322\017<\353\024\177\273\214k\'=\371w\356=X\305\244\275M\000\035\275D\t\261\275\036\233\036>\363\020\r=\355|\230\275v\311f=9\265\242\274;\332\227\275\343\371\263\274td\003>T\264t=5\250\340\274\274\201\333\273\213\033\254\275:\311\257\275^\316q=F\024T<\272\312\010\2734!\331\275\271\032\024\275\232\324\207=,\312\033\275\221\260*=sF6>e@\221=\206O\211;?3\033=\273\234\233=\207\274\346<m\301\313\274,f\231\275\317\347\376=!X\363\273\324\377\233<\337u[;\216\274}\275\007\013\324<M\234\005=\370\217,\275\305Z\275\273:\205\303\275ZK\301;\347\355\317=\225*%\276/\251\320<f\003\223=,\263\306\275\322\306\004\275\005qF\275\234$y\275\245\351.=g\230\221\275\245\233\324\274dY\256\275\220\213\237\274\361\274\261\275\014FZ\275\300\304p\275\322\250\211\274\341\314\352\275\347\204n\275\023X\240=\031\246\r\275W\001\300\274\037\277\005<xo\324=\250\363\255\274\232\251\367\274\336\304e\275\t\257h\275\361\355\341\275\271\213\256\273h9`<X\377\032\275$t\322=\230ej=^\367\336\273\215\224J\274\346\250\316=\271 \315\274\207\014\323=\224\306\313\274\271\344)=\373\r\324=P\033!\275\025\037\265;Yu\203\274\260\263q\275Jt\010>,\360\237=\033\274\225\275\373\213\256=\365\334\r=\3057\001\276[/\242<W\010\333<\250:\375\274\326-\255\272\330.\233=\214\241\214<\352\211\270<o\003E\275j\320\010\276\001\361E<\213\260\344\273\245\241\201=\266\346\367<\177\343\305\274\2506g\275\rk\016=Iv\272\275\311|\263\275\215\332\264;\304\235\010<\322\322Q\275g~\253=\225\235*\275\204\241K\275)\212\207=p\340d\275\276T\305=W\311\007=yi\n=\375:\233=\343o\235<\266\317\026\275(i3\273\035\347\304\274w\241\205\275p?\323\274QL\256\275U\267\023\276\314\321W\275\300\312\032=@\\\362\275\225\255&=\245\335\223\274qf\252=u\013p\274\0379\260\2752\360B\273\347\201p\274\034\327^<FW3\274+\311\317\275\250C:=\360\247\273\275\"\306\357\275\367A\035\275]]\245\274\260\267\264=\253M\021=!\311Z=\310\300\357\274\235\223!\275\026\031\257\270q\257\361;\022\375\305\275\357M\373\274\372\245T\275\344y\317=c\310\315\273,\303\027\275\346g\003\274\207CT\274\333\227\003\274\325\215J=\202\205\177<4\000\276\275\013\215\224=\345z\230=\026\332\271\274\347\361\316\274\032\304u=z\220\316;\224\217\032=X\2338\275\3126\206=\303\3656\275\010Y\331\2753\314\233=\234&\360\273H\256\036\274\231\335\026\275\327\363\250=0\203n\275\037\315\226=\275\222\271=\037\301w\275\004V?\275\005\217\213\275\304\234_=>\367\224\275\355*\221=p\"\333=\276\222\325=\215G\221\2743\231)\276\312%q\273\262\246v\272k\007 >$\342\272=b\"\343=\023m\203\273\251\035>\275%*,\275h<9\275\262\255/=,\223\312\275\312:\326\275X\350\016\276\341\005\242\274\354\312\007>\214T0<\321Y\232\275}&\014\274\200|R;\242q\000\274.;\304=\n\342\222\273\220_\226<\rI\217\274\355\035\023=\263\234E<\362\325\020\274\371!\201=\307%\251\275\265\371\305<m\177o=)\023!=\321\033\221=.?\206\274\005\005\311<+)\213\275\030j\202=\327H(\275\370\0333=\213T\257\274\310\202\231=\017g\230=|\302\032>\327\032?=H\352\206<\337\201\305<\335\201C=EA\217<\004|\033;\351y\302\275\271wO\275CXV=\221\316\010>\272\250\255\275f\341\345\274\301b.=Y\213\247=Z~\303;\301b\330=\221%5<\024\303#=Q8`\275\353\3255=TB\023\276\277\"\315<\205\271\350\274\014\"\202=\334c\272=K\n\022\273\t\005\371\273S\335\236=\331K\036=\302\'\246\273\361\377!=\273\373\"\275\356\274\'\275\300\225\267\275\377\341\177=\t_\277<\320\312\207\274\2325\230\275o@\215\275\342\"\'\275\325\323\246\275\376\275G<4\344\300\2744p\273\274\024O\275\275Xf\220\275\000\213\247\275\021\206\247=\214A\306\274\276\221\360\274\307]\203\275\344\370\241=\376\363\250\275\306zZ=\270\327\202\275@r{=\205\004)=\313\263\202\2716\036\260\274\270c\364<Q\220\000=\314\006H=\365\255k=f\003\253=b\034\271<\014\301[\275\344\260\243\275\265w\250<\306\322\306\275\265\007$=-\306\244\275\002\202\211\275\354k\253;\213G\032=^sa=\325\344\337\274\355N\216;\251\352\323\275\t\0257<8\272&\275pb\246\275\"\357\332\274\002\301];\367:\001=^@\247\273wW/=\033?\177\275\363<\331;\010\370\200\275{T\262=\273\273\347\275\035\261w=\021X\034\275\257\367\333<7w\320\274/\372\377\273!\373\224=l\361\020\274J\356\305=*<\243\274\3769\302\275\031N\213\274{\376\330\274\235\306\372<4\035\366=\3027\300=\010\240*<\004[\006\276\017\271B\275\226\"\016=\356k\331<\211\377\260=Z\337\331=)\266&;\350\0051;\347Z\325\274\365y)\274l\272\210<\342\030&=iw\300:\335*(=\344\306\t\275\234C(=8\034K<\033\337L\275\032j/\275\nA\242=\374\266)\275\320N\t=\371*j;\034\2061\275\021\214\214\274p/\002\275=!\210=\213\270i=\346Q*\275\354\271\345<.\265\244\274;=>\274\031\241\004\275\r\356\315\275\256\274\273\274\354\250\304\273\032\261\255\271\014\357\262\274\264/\303\275%\255\006\275+y\002=M\373X\274h\210\253\275\352\035\350<\244~#\275\205\001\034\275\372\251<\275\024b\264\275_z\217;\355\004\222\275Y\236\212\275\037\331x=\275\021F=\035\344B=e\366B\275\365\003\273<\026\314\347\274\266\2521>\2113\253<\377\277g=\376\310Q\274\374\341\220=-\214\023\276\224\214k;\314S\326;\243\373r=\325BB\274\331\320^\275y\021\232\275\2304\310<P\365\257\274\220u&\275C\346\322\274\356v?9#\242\336={K\216\273\334rV>\2120:\275\037\232f<\202\237_\275\226\277\275<\371\002\267<\227\223\212<\005\353\325<\177\345\323=\r\237\177\274P:\377\274\313K\257\275\027`\257\275^f\247=\240\2567\275C\324R=\276\035\222\275\225u-=\373v\305\274\330\355B\274;\214\353<\036\340\236=}p\200<\r\017\013\276\"\000\030=\316\364\013=\237\313W\275\204z\027=\230&\017\274\037S\260\275g\262\244\275f\020\001=\266\3411=\036\371\301=%\373<\274\357$\371;\205\244=\273\236\205\214=)\333\273<\236.\246\275\241Y\204<V\030\235\274=\324(\275n\321s=K\027\232=\216\3062\276s\0254\275\260\023{=-\030\037>&O\020\274\364R\307\274D\245\331\275\272U\213<p\302\316\275b\307\036\276\334\033c=\177\325\300;\346\371M<0q5\275\246Y\201\275\231\236\275=\2359\275\275k0$;/\322\207=\177g\337=-\354\232\275\005vg\275`\264\223=fJ\210=z\345\264\2757\273N\275\227\026\275=\024\222\332\274CUr\275\303p\300<N\007<=\004\351\224=\360^\226=\202\033\256<\233\370\330=%w\257\2752i\r\273\322FD\275\377b\313\274`\202\262<\360\375\322\274\247D#\275&\327}=t\354\365<\243\220\001>\243{\333\273K\264\307<^\311~=\251\365 =\300\311M=\022.\347\275!\277,\276\337\016\203<\244\231\370<\377\224\255\275B\241\003\275WU\244\275\242`\210\275\303j,\274y\236\302=\010?\366<\377\210\312\274\253E\036\2753\004\205=\255YS=\244\004R\275.\221\206\275\356fW=\025\030K<#h\257=9\222#\276p[i\274\r\233\311=\036\017\223\274V\223\277=\222\226\262=\346\3175\275\026X <\251\375\266\274\'\347\276\275\r\236F<\3053O=\216\261Z=\330\274\315=\205\025\322\274\370D\371\274$f\336=\316\221\363\274o\232P=\306g\214<\341\301\010\274\321\033\377\273!\214\366<\370uo\275\267\314>\275{\375B\275}r\025\275\244I,<\372\217\000<\025|\307<\265\313$\275\232\311I=a\314O\275\277@\277=\3057X\273\022\314\362=\345\213\305\274D\265\346\275\346\3150<o\274^=\300Z\244=\224\020\237\275\030\226q=\374!s\275\353`Y=\265z\277\274\037\031\032\275\231\347\035>\211a\032\2731\026k=\346vY\275f=\t\276\210\'\001\275)l\363<\314\332\r=+\001\331\275^3M\275l\251N\274\375\003\374=1\016\303\273:\227z=\304\363\204=w\366\027=Z`T=\376\326c\275\256\337\013\273o\352\203\275\"\321\006=\306S$<{\024\310\275\005y\266=\370{\213\275\330+\336=\237y\262;\346\222W=\020\204\231\275\361\0028=\366\034\220\275\241\376\000\275\300\000.=o\037\254\274\026}N\274G{\252<P\240\337<Z\351\203\275N\242\022\275\372i\000\276\n\300z\275\000V\030\275\025>W<\311\000\347\275\340\351\236\2740RY=\373\336\';vKa\275g\033\313\275\337\336\330<})\277;&\322\016=I\365\356=\014\024C<\200\250?\275o$\242\275u6\345\275\372\025.\274\017P-\275\324/\243\275#\251\275<\310\336\022=\004\026\017>\366<\037<\373\241$\275u\257{<\306\360\356<\352X\365<\344k#=\316\016\234\275\231?y= \330\255\274[7\254\275\004\276\333<\001e\366\274b\231,=\327\205\247\275\374\367\242\2741\221[=\340\030\343=\322\036\020=\242\207C=L\376G=\247\201\241<p\025\"\275bF\035\275\n\243\301<\245\234z\275<\024\242=\333\235D=@\212\202<\002h\252=\020xY<\250\0106\275}V+\274\351\335B=,\224\305\2750\342O=$U\222\275(T0\274\224z\226\275Z\214`\275\332<\210\275\372kU=\372\324-\274\265\340\001>\315\204\245\275\325\233\373=\340\232\221\2755\273\025\276B\207\020=R\031\216=4\241\005>\315L$\275\016!\270\274Mh\305<\350\323\234\275wj\210\274\376ev=\375L\254\273y\007r\275\204\023Q\2725\246\3259\322L\003\275<\017\231=A!\"<\000\365\231\274\250\270Y:\203\2252=\335\327\253<9\355\037=U<\003\275D\307u\275\224Bo=`\307a<\036\n\323<\323Y$\276\223\256\267\274\357\370\001\275x+\306\275P\3326\275\272\270\002>\220f\366\271R^c\274\270\331*=\010v\337<+\321\317\275\364\364\202\2750\320\260=\350\235\023={\313\207\273\005\365\232\275\215\021\200=\266\333$=a6\244\275\264\366\004=\350\335_\275\343*F=\322\300\034\275O\014\007>g\303\371\272G{i=;G\022=\032\3058\275\350\272_=aRy=\347\245<\275~\r?\274<\317\206> 0\235\275i.\251\275%\261\366\275D\261\306<\371\017\232;\016\266\311\275\345\340I=\242H\266<h\025\351<\254\343\006=e\255\007\274-\235\372\274\002\005\317\275&Ev<\325\377\250\274\236\nL\275b\334\034\273\311\211~\2734\325H=Z\263\330\274Q\rt\275\372\377*\275\313MX\274\3767\004\2753k\315\275\374\310\237\275\364SH\274\310\022;=\000\253\003=\316q3=\331\007?=>%\225=\316\373\345<6/\"=\t\007\226\274q\203\207=c\250\366\2751\003\347\274\254\037^\275\263C\302\274iK\272\275\220\247\251=J\330\267<\020\213\321<\351\025\202\274I\363V\275W\3510\275:,\314\275W\241\026\275p_e=i\260\360\273\270\204\267\274\330\340\244\275\321HM=\231\310\266=\001{\336<\302X\311=\202\225\253=\235&\331\274po\235<F\203\241<\364\310^\272)\242\273=({!=\026\347P=H\330\350\273\363\3627=\343\365\335=X\253:=J\207>\275\274\260K\275\260H\323\274\2259+<\241\300R=\206\303\034=\213#\362\2742\253\n;\025\351\303=6.\312=\312\024==\262\361\230<7q\023;\027\250\217\273\235\353M\275\326@\276<\375 \350=\216\373K=\306d\001>\211\252\233=C\365K=\021\306\231<\372|\252=\263\247\337<\r\373R=\256\324\344=\240\313\234=5\346\312\274\246\230\3569\321\333\034=\2447j\275\273\260\273=\322C\206;\305\374\276<\234e\343<\304\341\002<\277{K=\030}\340<\346]\325=\215\314\002=:\326F;\030l\315\275\357+&\275\322\265\212=\347\345\n=J\245j=\204\372\312\275.\243\304\274o\246}<\273\315\252\274F\302b\275\007\254\030\275\035\232y\275\203\r\257\275\263\316\207=O\217@\275\336a\212\275N\006p<\201\337\241=\377\"\220<\227]\017=p\343\365<J\375\231\275%R5=\320\374<\273\033\333[\275a\000\201=Q\253\225\275Db\006>^)]<\204Q\240\275\225\341\266<u\023\224<\223\306\332\274\366-6;1\325\216<\\\013\375<\274YP=\007\243\371\275\253\\\037>6\276k<L\032\253<\264\021\201<\207\332!;\237\306\374<\246F\242<\303\221\003=\201\215\007;\235\202\346\275S/\006=d\363F=>\363X=z\357\265=H\332\334\275M+\213\275`\254\032=\211\\m=\207\332=\275\312*\211\275\tK\346\275@o\306\274\234#R==r\210<]\367\324\2743\273\207=\212\331{\274^~\217=\362\271 \274E\357R\273~k\375\274)\237\247;,\237\375\274\005\033\244\275MM\311;i2\005\275r\351\024=\201\206\243\275HH\240\275o\362\230<=\215\004>\0171\023>\205\306\023\275}\006\203=i\373\260=29\364\275\213&`\275?\235S\273\204\331==R\206\361\275\340\275\013\275\000\316\243=\2210\237\274\017\032\221<\003\245n\274.\035b\275\3421{\275\322+\255;\330Z$\2751[\335\274\037\302\230\274{\303#=N\371\241\275\236\231\304\274\002\322\313\2741w\243\274\370V\177\275\027Z\227;\353\277\367\272\261\326\027\275\t\355\226=7\251\315<b\217/<\245\3419\275\327<\320\275\365\320\277=lf\220=\304\026\240<\307\2574=T\325\025\275M\265\034\275o\264\315\275a\222\371\275U\277M=\2513\016<\337X\n>i\207\347\274\241\223~\275a\351\271=\250\033\256\275M\300->XU,=\\ \r>\211EH\275.\350\274\274\017\220\225\274\347Id=\360\351\267=\300j\267\275\245\272\234;\014\230\337=\375\t\001\274M\320H\275o\026\000\275\236\022L=E\327\301\275\251NX\275c|(=][\005>\266\345\262<@v\277\275\367\345\375\275\206\326\317\274$A\347<\331\303u=`\316\372;hF4<\236\205\007\276\312\3357\275i9\260<B\002\234\275\350\334E;\251\317\312=\033_\026\276*\346(\275\0313\244\274Z\235\342=\224\324\300\275\253]\210\275\334 \200<^\250\370=O\351S\275\333\336\206\275\314i\301\2745\216\373\274\231\360\000\275\036\342E\275\006\007\314\274K\313\n>\'\230\241;(j\243\274v\365C=\024\353\251\274\337\373;<\263N\271;\352\273\036\275\2343s=\004IV=\027\205C=\260D\316\274\254\246\000\2763\330.=\332\200\016=\207\020\330\275L6\224\274\241*[\275\265p\371\274\366\330\207<=\204\027=w\002W=CV\"\275Vc\301\275\014\243\237\275K\2109\273\262\0064<\262\371\217\275I\211\276<\257\037\315<`\353<\275_\244\370;L\374\324\274\242\323\032;\247\313\300\27303\014\275\206{\234\274o\323\177<WN\325\274$*\244=\334\223\311\273\024q\t\276\033\n\307=P\277\261=rc\270\274\322\315\235\274\340\243\241\275\325\371\345\274ZMD\275\344%\";\353\327\030\275\356:\212=\n\310\020<\261\002J<\273\200\331\275U4\346\273\rb\025\274\202-\315\270\276\376\235<H\201M\274\027\327\370\274\246\223\002=/\377\237\272\371:\014=\033\360\314\275TT\251:\355y\264\274\356\177=\274%!1<\374bg;\312\002G\275f\227\216\275\024a*\273`\023T=\003\260J=\244\367];U\263M\275uO\206=CF\251\275\205@\265<\323\3370<\270)\200=\"\014\004\274/#\226<\353\331\356\275y\225\314;\0363\312\275\210\346\001=\025\257l\274#\213a\275\301\370p=\376g\245<pc\205\275\2576\213\275\353,z=\233\303\205=[\000,\272\301\211\374<\226\272}\275<\255E\2767$\017<\253~\307:\003Y\246\275\325\317==\213\006\271=k\037\301\273\263\210\277<\0333\325\274p7p<\217w4=?\235\022>\316;\254=\224\177K\275\261\361C=\264\313\333<)(\236=\206\t\217=\226\227\344\274g]\320=\347\207F=?(=\275\235\222S\275\337)\333=\307\333\375=\226U\252\2745\354\247\275x\352\356;\303\321=\275\205\244\344=\276\336\227\275\"u\362<U\315\010\275R\364`\275\210U\204=\326~\311\274\351\304k=\022\351\355=.\336/=U\0272\276\373\212\323<SBD\275\361\006\362;\335\266\326\275(\243`\274J\364\202<\016&\024<\262J\222\275c\313\327\274~8w;\331\016\207=v\247\033\275\003\263B=@\016\261=\274WO<!,\345=\373\242\246\272>\206,=;\n\217\274[T\247=\361\220\215\274\344\257i=_\257\006>\326\201~\2746\301\251<.\002^=k\363,\275\355\321\214=X\276\257=a\364\020;%T\261\274\2401=<_\213S=\307 \217=-\177\2029\242\327\263\274\347\222V\273r\347\004\275\275\301\235\275f\267\326\274\324~X\275\276\344d\275q\'?=\020#\273=L\361C\275\016\362\242\272\"\t|=\303s\005\276\003\255\312\274\276\216\310<|\203\273\275{G\262;iOS=\032M>=\213\315&\275\244y\253=:\304@\274S\314\331\274\342\260I\275\3675\000=\330\206`\2758\256\332\275x\274\"=\367P\016\275-\304\031\276-\034\217\275\t\302\014=\264H\032\275\202\\\253\275JTM\273\377\374K<\031-\242\275\032\232\212\274\r\373\370\274\210\344H<\2264,;\306\326\024\276f\377P<\241\206\235=m\215\323\275\322S:\275\343F\003\275\206\230W\274*\014\212\274R\227\037\274\211\277\031\275D\310\221\275g\332\2409]\225\276=\337\3301\275\036\254\235<0X\016\274~t\376=\005\'E\275\275\210\370<[\344\322<\220\271\205=\316^\177\275\306\236\311<\t\253\265\275\t\203K>\007\007\362<\006\210}\275\277@\366\273\330B\022<\2221m\275~.\316<P\313d<zZj;\023\321|=\314\205\202\275^\216}=%\264\r\276\306\342\300<\332\243==\347o{\274\253\'u\275\002\215\277\273\233\026\247\275(\222\037<\033**\275i\034\306=\370\233w<$\216n=G\257_=\256\224\016=i\010\026\275L\324\214=\372jl>S\337m\275\206?\305<\220\301\243=r\233\003\276o\017)\273\2309\207\275\333\334\203=\325\207\r\276m\252\006=\347*A=\223Y\233<\344\272W<_Ub=LR(<\335\035\031\275Hr\033=\311\001\212\273}\213\205\275\034Y\261=\241\237\005=W\245\n>\025_d=\3356F\2725\241\333=@=\327\274EH\352<\2675\312\273F\375\373;\000\2541=\356\276\227\275\354\237\372;Y\320p\274\316\022\017:\310\\\020>\231\353\216\275\340\340\234;\371O\235<\0015\010>T\003\266\275\003@i\274|\010\277<\316\2309=\275\024\242\275\345c\034\275!\002\246<\375p\240\274*4\376\274\036\350\213\274;\340\303\274\030\\s=&B-=\361\240X<\333CX\274\205m\270\275\016UN\275\037=|<\271\224H\272Y\235\034=Q\357<=\\\374q\275X\314\\=\035-\014\274\265\317T\275>\317\322=1y\337=\306\346\202=\311\224[=\026b\200\274\324\260L\275\001\312\225\275\r#y=\305*4;Ey8\275s\215.=5\000\205:\202i\t\275\037\261\275\275fT\222\275P\037\316\274\210\017\342\275V1\320;\377\332\335\274g\030\346\274]\276a=M\322\334;B$V\275-d;<|\240\316=\255}\360<\370\313\334\275\352\032Q\276\343\016\363\274Nj(\275\000\371\331<\026\264N\275\332u\256=\005\347)<3|\234=;\372\203\275\334&\037\275O@\270\274n\013\325\275\344b\357=[\213\256<c\301\023=\343\021\207<\217\033\226=\332\t\031=X!\331\275z@\244<\020\244\031=\214h\317=U\357\224=\257\313\032>\331\214\363\274uZN<\243\311\247\275.\036\265\275c\356\273<\234P\276</\3070;N\253\337\274\251\3248\275-\303\211\275\360\367\210=S\351\365\275\215\022\344=?G\372=\347R\306\273\253w\312</[\010>\035\030:=\241\223\200\274\367\201N\274.\341\351\274\341$\202=3\231\361\275\300\026\352:lr2=\302\363\350=\033\215\217=\371\364\267<\225+ \275PSD\275\312\347,=s\207X\273\271\001\202\275\250)\211=\021\334\327\274gb\300\274\002b\n\274\3453C=*01=\260s\240=J\367\217\274\276P\212\273\232\251\202\275L\277\020=<\002\017\276=\363\204=40\215\273\354\217\201=\230\000\252:x\363\301=\223\241\200\275\007C\217=g\311+=\240\255\201\273\013\275\271:\352\301\316\274\r\231\025=\366\365y<\"eR;X\265(\275E\247\342\275\313\367\345\275\352\201\202\274-|\240;\037\276i\275`\300n=\362\206\254=\314\r\013\275\241^a=\032l\245=\274\341\375\274\344\243\206\274\317\237i\275\360;\270=\272\232\177<\016b1\274L(R\275b\027\232\275j:\r<M|\237=d\304\226=\346\'#=*w\374=GW\275=\215\312\014>\325u\332<\300\337*<R\355\207<\204\352)\275\321\377\000<\340\027\242\275\027\302\235;\010`P\275\347lb\273V\230\233\275Y\006\013=\215Eh=g\226\304=\313^\333=T\177\206\274\277\356\006\275\226\246+=\376\353\303<\014K+=mJ{\275;a\347\275\204\027\232=\305\264#=\277\237\300\275\307\325)=\346\'\244\273\337\217\253\275\341\324\250\275!\350G\275\024]c=\006e-\275,\t\357<\276\033r=s\327\272\275\024\004_\272\250\371}\273\003\222\363\274\233\031\341<zDK=\336\273z<\275_\224=\036\3737=g\014g\275\267\254\255<\024)9\274\225\210>=?\327\216\275Q\366\335=\222\016:\275\324CF\274\237Ko\275\034\217\230<\037\315\261\275f\017?;5\"|=\354\353\212=}\024\240=\036\334\253=\374\027\212\273\264\242\r<N\213\"=U\"\213=\267\235\306=\333?G<\213C\252\275n\351,\274\204\254p=\216:\301=\"\374\221=\277\247\t\2763;\262\2749\016%\275\244U\014=\254\014\252\275\202\212\024\276\276\364\245\274\233W\221\273\213\004\360;\331\275r<\217\273\312=\030\024v<\023\314\355\274E\343\360<U\223 \275\232\024\020\275\020\002\346\273\333d\201<5$\365=\212\224L=\010\210|=\035|Y=\262\021N=\370\023\t>\342>}\275\n\371\'=r\010\345\274)V\006\276\322\000\327\274\300\356\234=\255\324\361\275Hgo\272\311\274\206\275\307$\332<\34567<C\334p=\r~\334\275\325O\242\274Q\331 \274\246\351#=\003\022\035\274\252H\226\274\356\241B<\311\340c=\300\225\322;_\302^=\357K3=\243\372T=\255\261f=\220\337\271<\345%\207<\2636\021\274\013\205\272\275\311\217)\274=y\304:\302U\216\274\365\375\372=d\003@\275Q\\\205\275&/\341<\363Vx\274\266=\222;\2128e\275\231.\213\275k\235g\275\210\363\315=\250~\355=6\256d\274\317o\207<\301\323_=\033\022c=+\337\301=\013\241\220=U\343\r\275\177U\022\273\251\r\207=\201\2048=KU\232\275i\"\024=n\003\332=\234\267^\2747\227\0109\241\216h\274\311p\312\275\313\227\016=[}\311\275p\303P\275\032B\001\275\\/\205\275\261\245\361<\'3\033\276\034S\234\274\200\020\022=\224\236\320\275\275\330\002\275\200K\265\273\312\355\335=\024a/\275z\266j\274N\014\363=\334N\306\275Z\206\203<>\252@\275\252\275o\275\306\272\254\274\265\363\002>`\327A=J\245}=u\005\255\274c\272\314\2741\235\027=G\312\221=\250?\376<v\013\030<@>\377\273\210\016\"=<\002&=\217\246\222\275\014\266\020\274\211\020\227=\255\207\323=*\343\207\275p\025\334\275\261\005\336=4\177\322=\004\327\250\2751\300|\275\366nc\275F\374!<\2550v=\3705\317\274\263~\221<\021\372\254\275-\272\\\275\355s\333\274b\320A\275\324\326\241\275\244\032\\=\223\314\321=\334\314\217<\236\216\253=\354\352\317=\200\253\301=\'\353\030\276Z,<\274I\301*<\256\333\301;*\342\356;\364\262\256<\2338\014>Xa\0329k\010\364\274]\302G\275)cf\274\027\343\263=\334\030\363\274\264\333\311\273\233\323i=\005\237\346\274\"\334\034<\3444\234\275\016\264I<)8\327\275Y\3453\275\334\2600\274\016\250\250<\211F><\236\206\013=\234\321\'\276\372H\254=n\363?<\034C\315\275\235t \275n\004\261<>\301|<\2443\364\2737\332\014=\207B4=\362\035\226=\241C\234\275\r\006\201\275tv<=\036\370\354\274D\260\023\275>\030\213=u\353\275<u\262\003=\214\237\302\274i\357\021=&X\233=\023\177\002=\245\256\346=\223\330(\275\254\n\275\275\201\241L=\261X<>rEQ;\314:*\275!\221E\275\330\337\010>Kk\342=\031\016\003\275\'\303#\276_*\371\275\263\230\026=\007&W=\331\310\'=[\205\230\274\342\306\365<>\212\215<\375)^=/G~<f\316\373\275|\250\006<\375\274\205\275\013\2441=P\372\005<\037#\377;\260\312\307=zo\246\274\003\241^\274l\325\256\275\371\275\313=\225\215F<*\004j\275\357\001\362=\033Q\263\275\242\222\243\274\273r\362<\223\037\316\274\003rM\274\215\247\361\274P\337j\275\344\\\241\275\227\033\204=[\3743\275\250g0=No\241\274\371\023\010\275\242\234\006>M\247\001\273\227\364\022\276\275d\333\274\325\247\020\275RM\317<l\360\t=\255u\343\273\263K#;\313\343\016=\245\034\201;WS\237<\2161\023<\\{);\226\343\225=\227\271$\275Z\305f\2752\373\217\273\t\350\356\275\271{B;\211\027\330\274\026\355\036\275\3120\260<\001/x\275p1E\275=\325$\273f\241\331\274$\232\227=@\007\016=\371\260\321\275\202\310\261\274\351\"2;\307\306E=\377\227H=\234\261\216\275\317\247\315\275\367-\032\275\303\0131=\367\260a=A\023\037<\333\371Y\27553W=\373l\215\275\344\310\272=\010G\345\274\261\213\260\2751\3015=\227\010\004\274XE\356<\000\341\375<y\312>=\342\223\322;\315\204\331=k\031\312\274ZxY=\332\2534\275\350\302\211:\035\027l\275\033\224\004<\nCN=\334\"\253\275\007\301\215=\017\337\253=cW\244\274\211g\331<VH\021;\306\365}\275EM\273\274\330\241G=\"\327\325<\305\335\214=\247\256\323\275\333\266\035\275+rE<%\327.=\241$)=\374`\232<\244\362\032\275)\236\030\275\363\024\320\274o\323\003<\306\232m=\312]\360<\273\233|<\212\231\271\273\242\256\320\274}O+<d\260G\275s\374{\274\355\335\013\275\256\226\333<\251\004n\274\032\272\262=\224\364\274<\332p\232\273\377\217\002>\177%7\274wb\245\275\275L\310=\202\n\216=\305k\274<\346o.\274\'\254\320\273\t\214b=\337\323\000\275\307+i\275\202\341\371=mne=\303VP=\267\\\177\274\335\271y\275\362n\n=x\220\235\272\027u\005\275\000[\206\275\272\370\335\275\240r\231=Do\331=\364]{<\030\226\316\274\037\272\260=\312\r\372\275\323?\':LXW=\027E\220=\271\370F=\357\217w<\366\3359=2\017\213\274Z\310\r=W\303\001\274\314\001\036>\301.\303\274W\314]\274\361\321\032=\254x\211\275\316\241\370=\000\221\320\274%\272\002\274\010\322\230\275W\242J<\236s\317\275\337\376\234\275\013q\306=\262\035U=\311D\204\275\031(\330\274\244K\217=\363D\020\275\262\010;\275u{\226=\214`\247=:\t\274\275\0251\317<i\346\016\275$\316\021=\255z\354:\'M\260=\241_?\2744b\204\274k\245\221\275\345\314z=<\325\205\275\361\304\304=\377\177\216\274z\207\305<\r\033\205=\307\304\003\276\016(~<\354W\225=\020X7=\217Z\221\275\250\315\372<\351\336\331\2743\306\240=\246\004\256\275\336\201\227=\366\317\355<\3227\240\275#\224\343\274+\260,\274\343\324\r\275\357f\005=\303\306f<\254\004\256=\014\250r\273\253\226d\275\033\345\001=\313\350\217\275\004\203\'\274\266\231_\274\206E\234\275\033\377&<\213\356\211;\"\242C\275\341\237?;\355\350\033=1H\246\275`\272\277<\3005\177=\020\007;<\351r\334<\033\302\007\276J}\242\274\227\225\241={a\032\275\315?\353\274\020\267\003=\"\252\223\275\177;S=\303AO>\037\254:<\206\331\245\275\250\263\036\274\020\305_=c;\343\275\267\242\000>A\301\207<\341W\272\2743\210\330\274\206\313b<\253Cs=\311\363!=X\"\221<)\2342=\375\2329<\305\nd\275\310\346e;n\247%=\345\026\000\275\350=<\276e\200\313\274+\225\336:\275\356\032\275\025/\247<&\340\352\275R\327\276\275)\000\205\2743\017|\275\354\355P=\033\304A\274\357\235\035=\333\177\223\275\225\342D\275,\304\203<\3518\024\275>\342\267\274\201a\205<\275\272\303\275\241\020\013=\267\3730=5\241\367<\204|\017\276\275.\323\275Ts-\276;\317+;\374\257\221=\002\267\273<\333)c<GPv=\324\351-<H\346\276\274=\351\037\275>Ui=l\224i\274YU\275\275\024\224\'=L5\2008\301\270\323\275?\370\216=h\276\275\275\216V\343\275\020e\016=\340T\254<\217\234\224\274\230\r\360<\201>\006>g1\343=\220\260\277=\305\267\215\275Uq\026\275\366\237/\273\273\003\251=\207\247H\275?\022\014=\350~j=\210$\r\276oX\023>\017\021\331\275\254\253;=`\2001\275!\352\303\272\253\365\352=\006\220\331\274vae<b\265S=ueO\274A3\003\276\374\322\366\273\205\242\217\274z[m<v\275\353\2753\370\337\274(\345B\275i\221\265<\356!\221=\330\343\262<`\222B\275\372@\013\276\022(\355\274\002am\274\024\275\201=I:\244\275\001\242\264\275ka\201\275u>i<6wO\274m7\007<N\251\027=\314\270\347\275\236\216>\275\301\276,\276U\034\263\275\223\350\336\273=\246\204\273\021\002\240\274S\225\343=\324]\237\275\007*`\275R\201k\275\227q-\2752\247t\275C\377\344;\\\333\255=L\235\010\275\303\004\300\274\310>\350\275\213mV\273\270\"\037\274\366\365\270\2741\241{\274\220\351\034>\244\337\254=\r\245\300\275\264\275W<\347\212v=\353\037\035=\273\330,\275\007Q\233\274\336\377e\275Zn\204\275\304\\\257=\000\377>=\307kP\275xG\201<t\354\204=2\242\3029\350-\274=w\002\365=\245y\217\274\215w9=vu\270\274y[\347=\320\013\215=\263\213\335<\317I\377\274\034@\001=\341R\262\275\255<\231\274]e\366\274\233\273\217\275\327q%\275\025\267\253\274s\016\230\275K\346\222\274\016d\037=\254\254\272\275\031\205\312\275qD`\275\346b\356=^\314\006\275\007!.<a\266\227=\007\n\010=\\c\030\275\322.\235=\374\246\235<\014\275\224=\231\270\341\275\034\226\025<\347\300\344\274\255\2628<8\024\343=\372~\236\274\253\360\354<\2365^=\243\000Q\275\266\314A<Z\210\320<\252[\001\276A\262\222=\'q$\270\334\010\263\274:\335U=qa\327=\232!\347\274c\013q\275\200\340\247\274\301<\322=\362y\024\275M\253\213\275\354\014]\275u\251\255\275B\0176=\032\344.\275\326D\266\275p\312*\275$=M\275\2266\215\274X\203\243=\330\214\233:\315#\254\274x:\236\275IL-=|\330\223<\206\316\217\2749\326C\275\350\264!>\370\007\005=\241H\003>\035\303\213<\"\026!\275\t\252\367<Zb\002>g\010\303\274,\234\212\275\226\375o=0\270\016=E\330\356\2737\316\360;\362\246a<\346\022\310\274B\020\020=0\221\254\275\205E\357\271,k\247\273\310<%=i ?=\256\242\t=4u\315\274\352\377\341\2756\t=\275`\264\355;\330\321l<\007\000\273=lH\364\275%S#\275\302\201\234\274\3534\324=\377<\"\274\355\026\306\275?\\\037\275\210+\023<\024\023\341<d\364\347=\265\036\317\274\277CO\274\351\3761\275\217\256\341=\324\013t\275\374>\210\273=\337\212=\244\317n\274\306\252\003\273\372\236\213<$\337\026=\260\215N\274=V\241\275%4\325\275D\001\225\274\004$&\275\231\313\243=\203\2219=u\000+\274t\2705<\363I\300\274fh\014\275\367\250\326\273/\212\343=ua\032>\320\270\255=e8N=\023\242%\275\331(\\\275G \347\274\233\355H=L\326\332<\201\334\007\275*\247\255\275\271\330p=\252\215\266<Ry~\275]j:;\010\330\211=1\276\032=\361c.=\372y\363\274s\310\227\275x).\273\'\375D=\317\257,\274\223\262C=\016w@\274WU\255\275U\370!\275g\220o<\021\366\241\275\034.\017\275^\027\034\275m\014\356=\246%\347\275T\304\217=v\020\220=\370\037<=\316\n\307=\370\213\240=@\r\021\2758,e=MC\374=(\355\001\276\314\235\307\274\351\360\212;\010Lu=J\357\206=\300\032\245<[\301\002<\375\336K=#+0=\361\'\021\2765\013\264\275\177f\211=\006\004a\275\376YM=?o\000\275\033\313\355;\353\236\260=\001c\213\275h-\205=\371v\017=\n\022\217<\000K\352<\2342\004\275\362\234\336\275X\"\206\275\315\271\337\2740.\020\276/\220\'\275\322Tt=2\232]=\373[\250=\"F\236\274\n\324%=\177\312!<0\003x<\344\330\311\275:3-<\210ll<\250\322\013=\364\224r=\244\367\237=\372\353\365=YM\036\272\013d\335<\3608\302<\267\204\240\275.X\213<4\353U\275\362@\000\276\340\262\226\275\333\000\020\275\373\331X;\221!O\275\371=@<\007\230b\275\211&&\275\357=\224=\313N\301<7O\005<\271\370A\274\250\223%\276\222\244\263;S\025\250=\021yR=\250*\235\275\214\214?=(\203\344=&\254?\272\226[\247\273n,\212\275\323q^\275C\324\026>\232%\\\275\352?m<\260\334\350<\226\'\361;\377hy\275b\344\345\274\241\374\204=$\340Z\275\237 \251<R\273\000\275L|_\275\345R\234\275\230\304\316\274P\007\005\274\023\301\203\275\271\0043\275Y\301\262\273\364\357&=\'y\243:w\037\221;:\204\317<\225g\212\275\332\277\022=C\013\"\275\314&\020\275X\245\032=\345\243%=z\375{\274\035\215\237\274\302J\340;\225>I<\350}/\275#\234\225<r\265v\273\263\027a\275\007\206\004:\0279\n<\242\010\257\274\036\377m\275\231Xk\275vE\312;6\031\372<\226\267\327=\347\203\341=F\253\022\276\202/\213\275+\335\027\276N\256\350<\254\266Y=k4\205\274\315W\003\276\234\232\235\275\372\037\271=\007\341\024>\303\017D;~\274\231=\250\307(\275\354z\026\275\274\316\261\275q\020\207\274\254\223\307=\305R\273=\375\307\274=@\244~=\301\3466\275u\240);v\230\003=\035\247\315\274>\302)\275\032\337\027\275\306\345\214=;\3338<AN\327\274p*\263\275B$\017\276 F>=\211\341\273=[\256\214\275\365\2455\274\261o*=\365\323^=Y\211\323\275\325\357\017=V$O<\243\334\224\275\200f\264\274}\214\034\274J\370@=0\246\353<\030\201\215\275\251D\002>n\022\274\274\331\267\345<.\364\250\275\314\206\321=k\230\267=\262]\033\2741\310\200\275\350\220\264\275\025\370\305\275\035\007\346=\372\017\234\274&\212\030\276\317\260\252=\222\032A\275\036+}\275^4\223;\255\'^\275\334\241\233=\017}\236=\211h\307=lS\235\275q\030\245=\340h\335;X\373\226\274(^B<\371\237\316:\275M\350\275\210m\201\274H\336\257\275D\020R\275U\301@\275e\324\241=P\034\210\274\271:g=b\240\215=\005\215,=j\3752=g\363\362=L\037\376<\253\274z\275\"\262s\275_\226z\275\221\337\327<\005e=\274\313bH\274\236\213)\275\353\334\277\275\315\223\t=\203\343\242\274\203\235\201\274\371M\236<\005%\213\275\257\356r=\300\327!<\3414$<6\006\323==G.\275\226xE<\006z\362\274\024\204\361=\331\323\025\2761\236\005\274V\314F\275\322}\257=\003\304\323=\346\270,<|\026\217\275_\233\245\275xS9\274\330\027p=\353\262\342=\021\216\240\275\245\223\351=#\200\336<\021bV=\237\370\027\275\305\tC\275)\302\t=\237a,\273\252\231\371\273\334FR\275zkn\27468\364\274A\332\264\272\216\353\314\275\255\306\001=\307\233t=(\323\277:\321\030\232\274D\002\300<\361\261}\275\252v\000\276>ev<q-\\=\212TX\273,e\034\275\212\\\233\275lAq\274\222\265}=\315:*<\333\030R=7\201\353\273\276\333\366\275\301\211\206\275\367\030L;\257)&\275\345\020\342<\034N\'=\346\375\205=\350\023V\275Gr-<\203\030\006\274\'\352\364<\245(\271=x\336\315\274\003\305\315=\035\260~=\036\200;\275\321\007\267=zfe\2758\264^=\353\360\330=B0!\272\307\310.=\366fy=J\337\364<\177\375\307<\335\244>=\376\272\004=\266|/=\274L\322=\251.\003=Nz7\276\035DR\274B\340\370\275\026\001\327<R\212\226=\2454\221\275\026zK>Y\333\264\275k\025\024=D\364{=X-\201\275\333$\330\274d\177\241;\303S1=\253\355\"<\215\273\336\274\034\263\004\275\366\314\"\275\031\205\373\274\251\306\206=\227\203\016\2761\312\251\275\332\354v<-8c=\260P\251\275\313\013\234\275CS\223\275\332\266\320\274\372\234\016>\244\t\r\275p\351\331=\360\337\304;\367\314\315\274\252_\254\275_a\272=[\223\216<\013So\275\352\313V\275B\274\274\275d\203\3649\370k\026\273M\305\034<~\017\017>uC\020\275\260\377\305\275\265\\}=\306F\365\270\252|*\275:\353\343\273\301Z/=\231\260\253=\352G\304<D\311\231=g!q\275\377\275\246\274L\362w=j<\215\275}~\240=\337\016\304=\377\350\n\275I{\276\275}\002\327<\353\254\252;S\355y\275;\177\215\274\035\334\271\275b83\275\244\245\315\275\332\371Y=\373t\004=\271D\274\275\260\276\253\275D\211\227\275\306\177T<\'S\225=G2\264\275]X\227<W\336\355\274\357\365J=\3562\367\274[|\207\274\273\225\316\275;\321\177\275\toE\274\355\252\001\275H\321)<\2022_\275\361\277:=\3342\360<\025:\362<\227#\236\275\206\302H=ii\251<t\246\t=qq\204\274\274\013\224=0:\033<!b\362\274~\302\234=\002\370\211\274\253!\241=\326\316\277\270\323\363\031=5\231\033\274c\303\263\275\360\314\220\275p\263\253<pl2=n B=\334g\267\275\230\2502\275\024\266\220\275\353\001\243\275rL/=\0072\215\274\226%&= \221\200\275\262l\353\274\245\307a=\'\247\347=H\315\022=P\253\"=P\nt=\316\027G<\014\352\205\275z\331\372<8\350\217<\306\370\'<\367q[\275\273\267H=\016\374l<\310\037\257\275qW\265<\333\315u\275\355\330A\275\006=\264\274A\310\304=\336\247N=n\207+=\363\201q=\272\332\037\275\332*Y<\340!\210\275\231\327%\274&-\327\275g\353\032=$\276\316\275\216\345\026;\333\315\303;#\034\271\275\001\030\255\274S}D\274\262\t\337\275\357f\323\275\224\330\376<\200\232\207=\t\353\315=\342\370`<\345\035\201\275%S\215=\370\310\265\274\300\371\330<\274\313$\274\005\316\220\275\270\222\032\276K\335$\275\207\333\024\276N\027I=\340t\315\275vI$\275\322H8=\344@\236;\252\274\227<.\000\t>\253g^\274\327\013\330\273\271n\253<\364H\313\275\351\313\261<L.(=\306\257\225\274\320x<=ys\233;\r\312\031\275\251)}=\215\177\210<\\\035R=H\326\235<\337\273\240\275\213\3019\274\324l\t=\301?`\275E\241\005\276\016\314r\274\216\247\354\275\263*\227\274q\256\274<\361T\000=\241n1\275\323\377\230\275\256g\367\274\205P\243\273(\305\014=9Bc\275\226\211\261<\271\223\244=+G\357=\022\372\274\275\205`=\275\177]\234\275a\376\263\274>\364\206=\341\251J=>Q\347\274\362\355\026\275\252+\027=\352\243\013\275j\'\253\275\335\302\021;\343\357\342=\227M\251=\343\241\203=\242e\025=\r\371\266=5Iq\275\373.\236\275\352\2418=\336\254\257\275\222\311\224=\030 \364\274\224\326e\274\221\021c\275\202\334\312\274\264\235\007\275\305\tX\275-\204\214\275\322\323Z::#f<\357\371t=\216\371\277=}\205\t<\227\001\230=\314vc\275\252\355Q\274\325\014\252\275\254\253B=\033\366\203\275{\373h\275\360\340[=\234\316z\275F$v<\315\255\271<m\364\241\275!\243!=\276B%\275\0353\224<\311\273\026\274\202\025\325=@\364\206\275\217[\034\275\314\017\303\274)\010\340=\360\233Q=f\031\341\275(/\205<\320\311\345=\016\231\233\275p+^\275i\3239=\273d)\274\327\252\243<\350\361\253\275\233\261\030\275\337\003\327=\316I\243\275N[\233\274\004\336,\275\367\303\352\274\014<w\275\236\343\241\274\345\215\213=v[\355\272\256J\221\275\016\360\307=\371\311v=T\210\341:P\031\221;;u\222\275\035P\014\275\003\230\024\275L\003\261\275G?S=\347\242\014=\\R\254<\246$r\275W\255%<\321\304\342\275\206E\335=\230\347!<\330\336\272;\310\357m\275\0174\r\274\204u\357<\356\272\351\274W\226\031;\013\301%\275\n-\253=\023\354a\275\220\271\251\274\010\276\262<\277_\306\274\372 \347\272\031\334\022><\342\236=\334}\002=\216|G\275\353\237\261\272%\001%>\005\321\201\275\264\375\030\275\317\021\037\275/\316/\275\225\2619\275\373\013\326\274\236g\212=?\257B\275$N =\205/\221=\364\260\325<DAj\275\206)\014\276\006:\343;\277\323\246=\266)\343<jX9;\nS<\276\205\032P\275>+\000=}\200\361=Y\363\350=\023\372,<V \243\274\262\261\245=O\004Y\275R\353\366;7f\326\274\255\275\261\275G\\\243\274b\373\002<\313\347\247:e\375\017\275\036+H=\340\334g\275QG,\275\336c2\273\361\273u<\371\346\337=\2268\255\275\212\246\270\275Z\362\336\273\246iR\275\310\203B<\005\372\334=\213u\240<m\013\r=\274\206\323\275\305\211\325=e\\\260\275\362\245\237<\330\361s<k)\206=\203\223\201=\252\347:\275\023\226\006=#o\320\275\365\330\260\275\257\322\350\275(\034\006\275\rg\351\274\020o\225\274\275F\254=to\262<\266\014~\275\370&(\276DI\241=i\000\026=\365\306(=p\031\202<7\255/=\361\n%=\311\213\231=\250\215\233<{\005Y\272!,\237=}-\302\274u\201\317<G\345Z\275|N#=\275\202\212\275\331\277o\274X\030\252\274p\267\311=\270\307\223\273d\353\375\274\251\001\240\274\030\343\215<\231\226/<\306\211\225=\231\016\312=TZP\275\021\272\354\274]\"\t\276\367u\325\274iT\313=\254\261\232=3\304\255<\363\332\"\274NP\243\275G\345\320=a\311\262\275\331\253{\274\235\n\201\275\252\233\206=\"\r\264\275F8\222=\032\312\306\273\306z\305<\301\260\263:R\364\202\275$\321\214=|\237>\275gn\263<96H=1\322\023=\243i\261=\3503\304\275}\200\213\275Nm\245=\3041&=?\320\266=\364\320\023;0\256\337=\224\370\031\275\336\270J=\373T`=\027\3326=\304\027\205<D\200U\273\350\370\245=>\213/=\263\250\002\274\270\335n\275m\330\261\275\252\r\004<MV\256\2752\356\314<\205N\335<\365<\237\274=\304\314;\030\215m\274\203\276\245;\"O\252<\266o\341=\017\305\325=\364\207d=\331\263\270=\331T\025\275UV+\274\300\261d\275\310\306\220\275\332`B=s\363$<+\301(=\363W\336<\232\014\207=\2178F=\035\003\212\274\213\035\367\273\206Y\013\276$3\312\274z.\372\274MO\301\275\013Y\002\275\375\243\303\275\202^s\273d!;=\303\002\333\274\225\340\245; \256\331=!\247\246<\206\302Z=\2427M\274\2741R\2764\246\004=\002%\256=\371;;\275A\276\006=h\254V\274\247,t<\0253\262=\373\235\336\275\301\272o=\216\322\270\275\323+0\275\274(\207=A\213A=M|\322\2747\177\311<\375\237\232<\'h\273\275\2700A\274\267K\266<j\315\273<\234q?<{>\037>\262\345\003>(\205\350\274-u\334;\216P[=*\226\357<\2536A\275\266\205E\275\330\304d\275\226\263\330<\3450\265=\032\365\316<\212\365\021<R\370\220;\032?+\275N\273\260=U\262/\274U?\302\274\027\034\005=V\006k=\367\272c\275[\244b\275\230\207\302\275B\233;\275\235\262\t\272\320\3353\275\373\332\206<\2001^\273V\323\340\274\003`p\273\257\022\257\2753\323\r\276\313\261I<\010\252U\273\013\215u\274\303\266\\=\256{)\276\241\201\350\274\\\024\366\274\026\210}=, )\273\214\233\206<>\2667\275\232\017\372=\033\251B\275\321W\t\274\267\260\266=M\021\212<\210\237\352\273:%\270=\312\272\226\274\316\261J=\372\351s\275.\326\020\276=.\334\273)C\014\275\016\366_\275\034&\262;t/{\274]\205\"\2755{f\275\305\\\217\274\267\214\220=\347y\212=\362\312\245\274\342\253\276\275\342\365\002\273Rid\275\262\2136\275r\367\004\2769Vo\275\271b\304\275\267o8<\270\276T\274_\354|\27443%<r\343\246=\362\035n<\013\017\014\276f\002\250=\341\302}=\306~\236;p\016\212\275j\020!=\214\326M=\002\244\034\275\216\340\236;\323\250\231\274\376\273y:\321\301\224=/!\216\275\307\205\001=\031\356D\276\033\274z=\245t\007\276\010}l\275 \357\024<C\027)\274\235b\024=\016\330\267<U\323\220=Y\336\034<\325\342\261\274j\337`>&\364\224=kj\205=\361\017\200=c\261\227=5H\271<\355\257\235<\313\031\302<\354\007\332<\200\354\375\274\002\312\221=\310a\354\275\327E\376\274\226\224S=\356I\236;huZ\275\304\210\225\275\026\272\260\275!\235\216<_\2601>\306\250+=\225=\277=)\3022=\340\371G<5\220\234\275U\200r=\202\215\254\275\027o\363=d\305\370\274&,\020=\261\025\250;\026\361\250=Z\211z\275\260\255%=\327\336\006\275Y\305$=\235\216\234=\037,L\274_k\335\274\313*\376<\332S]=8\374\327:\277b5=\324\260\242=J\364w=\331\376\374<3wu<\032\315\322\274\377d\252\273\305\013\253=}\177\333=\3508\202\274\274\230\004=k\310.=\317\246\245<i\344\347<\177\2711\275\371\271\371\273\246\016\r>\375\216\313=~\374\024=\022\020\316=\352\'i=\377.0\275UD\030=i]\206\275\343\271\340;\016\200\365=D6\314\274\230\2262\275\363\251h=n\260\r\275\216\353\223<nD\031\274\3726D=B\014R\2752\303\031\274\263\225\215\275w\327[\275\273%q\275A\353\265<\204\236\324\274\317R\343=g\225\312;B\215P=\353T\367\273.\013@:+\253\216=x\303\353;*\2257\275\327O6>w\235\265=\313W\342<\006\337$=\206\203\006=`\373\221<%\251M=nm\252\275\352\264\216=\247\311\363\273I\302\205\275\377D\274<\203\210S\275\276\241{\274\304\370y<f/ >\372\307f\275\366\367>\275\331\266\266\275\\Z\337<8\316\332\273\310\216\237\2743\335E\275\373;\215\275\243]j=\377\220\226=y[\376<\320\324\010=8\355\206=1\322U=\036\303\215\274W\031\213\275vR-\275\350HW:\004\256\371\274\257F\256=\010)x\274\342\214\020\276+Y!\275\240Jw<\251_\t=\311\204\323<\336\365\224<\253\\\224=\022\277O=~\035\220<\345\363\363<`\343\231\275\225 &=i8\036\275\000\020\010=\354\260\227;k\326\262\275v\020\370=\213N=\274\272\326C<\211mI\275\236\205\274\275\207\207\032\275n\t\227=\031\334\003<\240\242\235\275\270\362\010\276\223\016\372=\037\317\223=\364\000*\274\335\256\300\2756J\'\275u^\344=\027q\264=\303F\032\275\327\347\027=\276\257\223\275P\237|=\210\3531\275\266\250\023\275J:\355<\316\242\324\274\206SA\2739$;\2753\210\334\271\2105c=\021\rX;\332\302\226<\260\334\231=\333\367\226=9\331\273\275\317\353\336\274\2004:=N,\023<\010\202\'=\016\210_=0$\375\274o\352\244<\336\221\342\275N\260\215=\357\r\203\275M\222\320;\005\216\272\275\031B\202\275-\375\010=c\326\300\275\036\314\013>3\007\233\275\3149\257=\034\345*=\324\342\206\275\274\032t\274g\235x=\364\210:\275.@L\275\346\001I\274\340=\033\276#\375~\275SI\037=\003\202\275\275n\221\336=y\027}\274\201\203\201=\201\356O\275\213\362\016=T5Z\275\035\t]\275mO\235\275*\021\213=\020{\027\275\000\020_\275^\340\206\274\240\263\245\2755:c=.\253Z\275\035Y\342\275\026\ty=\003{\255\275i6\304:C\266<=\207\2548=\256\201\027=N\2558>\204\274\307\273\303\323\037=\020?+\275y{\323\274^R =\316`\242<\214$\302\270\331|R\2754\326\260\275#Y\343=E\014\336=\363mC\273\357\325\322\272\237\301\242\275M\031\254=\2062\365=\376\324D\275\370\375P\275\207G\003=\306\320\031\274\005A\200\275\317\302\235\275j\245T=\006\373L=\177w\307\275\307\250J\276\222\3451\275\325\216g<\312Qd=\277\234,=J~\345\274\275\360\230\274T\347\227\275E\376F=\340m\334<5\000b=li\230=7\247\034\274\360\255\205\275\360h\006\275\263\340J=\237\034:\275\240D\355<\274\336Q\275\335\244\t\2761\".\275C\230\252\275n\221#\276L\333\377\274u\335\333\273\333\340`\274\037v\367<\343\271\250=\246\252Q=jc.\275\274u\334=Q\005\206<\310\365\327\274\255\325\335\275\304\336v=\343R\t\274zb\243\273\230AU\275\316\020k\273v\017\016=ppD={\362\241<zb,\274\371\246\245\275*\344}\275sRL\274\252\356\177<\306\0213=\"/\317<Q\234\025=\214\t*\275\212cN\273:x\242=\223\026\342\273\326\337\217\275\013\242\264\272\231\303_=R&\262\275\256\337.=\363\323(\276d\n/;\365\322\030=\310\341\346\275\335Z\007\275\255\261[=\212\3722<\027G\"\275H|\246=\300a8\275\274\307`\275\357\024\232\275)\017\\\275\236z <Aj\204=\362k3<hu\241\274\376\203\252=Z\233P;\252\024\331=\362\253\020>\264\361\021\274\311\266\371\274\264\332\377\274\030\232\205\274p-C\275p1\333\274H\257@;\037\004>=\207\027`<\277J\253\274\370V7=[\037>=z-\266=\370\341\265\274R\375\347=\200\367o\275\270$d<\020\315\242=\036}\351\274\374\252\213=\025\256\215=\265\"\003;\252\254P\274\261\034\317\275\223\016j\275\034\027\337\275\315\020\222\273\335\312\204=\315\334\014:\256\207\217=\"\004\200\272\205\001\336\273Ao\201<y\245\274\274x \202=Zv3=\362\361\241\273X\257}\275\325\234U<)/C\275\r\021\220\272P\202w\275\361\213\275=\"\352\271:\253#\245=14T\275\031\306\224=\271\014&\275wH\261\274\034Z\215\275)G\207=\022\345*\274\200Fv<n\227\'\275\016\030\223=\372/g=Cce\273\320\336~=!\363e=\360\205\005=$\345$\275\314\031\334=C\367\330<\303N\035\2747EC=\375Q6\275\355\241\"<`Q\316=\342rb\275\036Z\263=\310\007\203=Ye\244=\347\243\220=\363\271\r;CF):T\247\243\275L\352\034<\352\n\210\275\330AW\275\021\350\326\275\\\251\322=\251)\257\274\332\026\313\275\330\353\334=TS2;\223\250\023=\244\023\304<\021\264\270\275!<\337<\360\n\256\275\221\n\263=^ A=\303\325\003\276\312h\265=\202\362\337\273Aa4\275Ke\007\275\301\346$\275\006S\326\275\021\310\252=\321v\375\274\214b}\274\006\007\357=\372+\300<e>\224\275\223\323%<\271\225\344<7\317\325\275\235\246E=\027?X\274P\014\256\275l\326\311=q?\217\274\360=<\274\205\266Y\274y\376\302\275\366\232\234=H\241g\275\330\t\251;\013l\354\275\354I\247=\027\237\037\275\005\0178\275M\365\316:\300\021\370=\271e\313=,\220:\275o?\034\2753{\221=@\330\214=o^\032>\220\274L=Od\330\275\316\240o=\027\272V\275 \3061=\024F\200<\261\332+\275\307=\334\275Tp\031=\rBs\274\263\233~=W\013\245\275\254\211\032<\306\273\217=9l\210\274\340\\\034=\306\277\226<\032;\326;\0308\221=\267\213\321\2746(\240=\241\277\321\274\312l\344;\272\313:\275\203\007\206\274\nI\334<O_\234\275\265\177p;\226\244Z\274]\306\331<_!\253\273\215\351.=\373l*\274.\252\216<\274\334e\275\351tU\275{#<\275z%\224\275?\230\211\274\370!{\275\246P;=!\341\010\275\307\351\366<\325?C=\321w\232\2755\273\243=a\002i=-X\336<\332\256\212\275u)(=|E\200=\204\021)=\231\"n=S\303\373=\216\021\217\275&\331\201=?\372)=\n1\332<\031\0020\275\241\'\217=\000\212\023\276Q\212z\274\225\034\271=a_&=\207\272\230\274\333\233\250=U\\\261=C\305R\273\314\267\322<\364\202\277\275\n\360\375<IW\247=\314\366\010=`J\246\274s8\372\275\025[=\274\347\336<<\'\216!=\270\033)\276\265\215\t\276\221M\332\274\321\210\271<\'\213\222<\003e\202\275#\365f\275o\212\307\274S\266R=\205\317\350=\372\347\377<\343\203$=\377\307O\2759\253\246=\230\234\001=k8\262= B\275\275\311nr\275\251\374O=~\204w=\255\210\256\274}\366*=\375\027\336<\347\344\263=\324\223\202=\371\242\200\275J\265\206\274?\3667<\314\351#=\277\356\371=6u\242\275A\262\256\275\324G\220;l\025X\275\366\2006=\264\220\205\273\315\272 9\366\266\006>?O\262;\373j\371=U\017\013=w\326\212<\342\362\355\274\350\342\307\274\274N\307\275 \245\250\273t\376\335\274\227\324\210\274h\356\374\275\352\306y<U\237\355=OC\246<c\020\230\275\205>J=\223\t\266\275\365H\013\274\345\000\366\273VSQ<\374\212{<W:\342\275WN\214;\256\331!\275\352\271\216\273~ \023=6\002\350;\310\264\007\2755dk\275\374\335\016=gd\r=\336\365\032>$\024\"=b\327\265;\206\371\212\272\330\034>\273;\246\032\275#P\230\275\014`T\275\353sD\275\337@s\274\243\n\006\274\362\000[\273\t\177.\276\337(\202=n\007\267\274\365\244\275\2746m\371\274-\030\301<\236\306\026=@\246\251\275P\035\314=\236\314\204\275\262\325\"\274\260\222\255\274\362[\225\274c\\\306<p\213\203<\254\t\347\275\347\356\213=z1R\274\245K\006\275\230r>=\000\034+=\014\2770\27430\205<\205\347\022=\231\321\350=n-\237\274\240\373%\275\340\002H<\017\004\277=q{\215=\3174\351=\036\212\372\275\226\361\273\274\003-\t\274B*#\274\316\317\306\275K\246[=!\247\325\275\360M\345\272\300\276\202=\3659\021=j\313\236=%\276\277=\213\037)\275!\214\216<^\274\232=\246@g=\373\227r<K2\224\275R\221W\274!\243\022\274\232\321\204:\222s+=N\356\274\275\254\353\244\274\341\315\361<=N\350;\025\373\330\274\006\330!=\010\216\026=\334\222\377\274\370\321\371\2752y\265<\255\345\216=Jo\220\2713\303\256<M\230\004=\273\253\233=\016\330e</\336\273<\010\204o=\206]j\274}%4\276\270\325\n\276\354\020o\275\031\024\255<*\271\333\274\267g\305\275\256_5\275 \3515:R5\353\274\017Zn\275hT\217=Xe\240=\346P2=\230h\374;\303R4=\226\n\204\275\037\034\305\275\245\004\243=\223\264T:a2\"=\2476\235\274\202d\333\270C0\342<\262\022\277=v\234\216=\030OL\275#9?\276\305-\364:\r\251\350\274R\036\345\274:./=hfh\274\037\322r=g\366\250<\230\366\325=v\373\313<\220\215W\275\\c\247\275\212\234\232\275\0243\340=q\351\271;7\302\206=\220b\336\274\034QM\275{\373\331\275\372ju;\303\017\231=.\025\211\274@h\332=\261\2008\275d\357\000=\271i<=\\\373\321<\211\200\227\275wc\224\275S`\240<\241M\240=\256)\003\276,\022\344\272v^\"=\005/\005\275M\340\206<\266\247\314<\357Z\034\275t\262\226\275nA\277<wd\177<\211\331\230\274W)\033\275p\013\002\275\227\376\022=\023\370\007=.\200u\275,\265\321<\373(\211\274\210\241\223<\233hr\275z\304\332\275\312Yl\274G\343,=\r&\\<|\261\231<o\n\245\273\006\301\311=\347=\276<6\005\"\276 \324}=X\326\352<x\222\022<\242<\013=\002;q\274.\267\007\274(\243\035=\006.\252=\317M\016\2761N\362\274G4\233<\177\203D=~&K\275FO\274\275\031\234\311\275\001R9=n\033\235=\267O\257<\252\350\274=y\343\270<Z\246\335\274\036\270\007\2757\210\005=\255\312\376\274>PR<\255\340\337\274T5\203=\300\324\200\2759e@=\310\342\251=\2353\232\275\002Y\243=\311\217\n\276\350M\205=[\242\001=jl[=\232\351r\275\344\320\231\273q\365\246\275d\274\312\275VA\033=}\2015<\203~r=\303\010\206\275\324\367\3429\357+\254=\355\351\211\273\324\014\263\274\261\361&<\244\323\004=\204\205\225=O\253\210=\026\232\306<V\372\340<\346&\261;\346\264\226\274@\357\212\274\333\303\255=\001\003[\274=\371\003\276J\372\314=\216\317\324< {*\275\330\017l<\321\000\224\275{\373\376<\341Q\034\275\375+\207\274\032\006\201\275\236T\302:5\242\240\275\n.\233<\202=\273\275\246\004\273<\350\205\331=d\356\305<!/\315\275\346\236g\275\350\215*>\030f\211=\325-\036<\273y\326<)\025R=\344\210\236\275$\n\"\275\301\253v=(?^\275\304r\312\275\252\036G\275\035`\024>\203\237\031\275\261\212\007>\233/T=3\364o\275\3476\376<.&\321<\203v\356\275TA~=\010\336^\273f!B\275\303\037 \275\346{\200=\242\024\227\274\204\204C\275qx\255=\265pY\274\215\217\225\275^\245k<\234#\253\274\362rJ;3\377\357=\013\035\300\275\024\270v\273aC\300\273+\361\225\275\263\034\237\273*\325r=J\253\032\275-30\275\234d\326\275\035v\323=\022\371Y\275\316\330\312\275cx\257=\006\316M\274xz\232\275\004nv<\366\241\200\274\025(d=\000\026;\274\236T0<\302\021\006\276Z\0209<\321\222\304<\302\017 \275\304\235\254\274&\206\243=\376\263c=\321\345\020=w5&=\222Z\216\274\362\272r;p)\226\274+\247U\275\272\3011\2740\375\346\275\323_\356;g\330\347\275\334\222y\273\275c\262=(P\257\274\265\343\253\275\2508e=\373.\225<_(\306<\n\"\252\275\212c\265<#\305\212=\211\333,\275\202\304]\273Q\201\252<SR\230=\\\325\246\2759\260\331<a\324$>\025\022\326\275\233\215\021\275)\216\004\2754_\020<\005\300\217\273\302:\262<\272J\222\275<Z\212=\307\2120\274a\217\233=D\310,<\255\255\356\274S\231\212=\377e\364\275\245\236\346;\203\254+\275!\330\214=\006f6\275\2364\310\275\273\2113=\221*\236=\253\331\254\274\341,\000\275\270\256F\275c\016Z\2749\ng\274\340\247W\274\374\361@\275\206X\222\275\341\304x=M\373.9:\307^\275\212\363d\275\200\225\223=A\272\017\276\376\226E;G\367\350<\0047\364\275\225\362j=\353\025\247\275\223V\005=\325\257I=\273\217~<f\351\335\273=\312\267\275\316\351\242\274O\273c\275\257Y\237=6y\212=\031\310\370=\312-\216=\375`\206<x\232\217=\357\257\302\274*\3012<\362a\326=z\031B=\324\232^\275(\241\266\274\t\334\321\275\\\374\025\274\266\242\256\275\257\266\251\275\351bB<+\331\216=\251\254\216=TII\275r\303,\274\306\237v\274|K\245=\262\351\300\273\313\272\037=\034,\020\275\356\235\254<\300_\024<\252>\257<4\277\021>\362\2477<\357V\244\275?\033\345\274\371Nl=\003\365\200\274\245F\t\276_k`\275e4l=RU\256=\007\273\364\274\371tg\274{\222\021\272\251\204\001;\350\177\'=\205\333\315\274\377s\301<\326\233q\275\326\003\315=\310\246\014\276\206\267U\273\201\277\370\274$\001P\275<\010A:j^\336\275\333\025\277=\177\307\014\275bE\253=36\201<l\275\345\273\271\262x\275\030\\\234\2751\276k=\242\220\222\275P\330\210\275Bn\254=\355#\023>\270\3429\275V?\'=|\256\276\275\331\303\'\276\031T\314\273\203w\215<\337\002\242\274\222\224\005<\240\260\362\275\026eL\275\246\3209=g\010\242=/\003\324<\336\355\335=}m\220:\351dX>\025\014F=j\367S\275\n\275\311:\t\363Y\273\307\017n<#\021\266<\232\000\340<\013\004\307=\226O\373<\257&\225<1\346\005=\033gk=\265\360^=\240l6=\245w\020\276\031{\353\274\006f\201:\245k1=}_\357<\206#2\274F\211\030=\355\262G=\335\317\241=\017\252J\275WF\031=<\254\263\275E\366\223=\017\034\327=2\262P\275\317\323\342\274C\374\232\275W\360d\275\317jO\274\365\260\266\275\021\305\266\273\221\"\214=\224n\331\274\234\346\3059\335\245\005\275I\366\326\274zL\007\275\277\233\010=V\207\037\274&\035\305<%\"\220<\304\360\234;\316\346\244\275S\033\335=U\006\213\275h4\304=\346\311\236\275\276\315!\275\034p\245<:$\003\274\300\337\013=\302\256\347\275\202,\224;\222/j\273dd\307<\336\324s=\0178K\275\304\251\330=\250W\344;\353\371i\275hR\214\274\223\261\330=\365B(>\320J\007=\rQ\222=|@i=\211\232\204\273\375C\211\274\014\363\352=\233\240s=}<\205\273\2526\027\275W\017n=]\310G=a\201\373\275\325\000\270;\273\0310=\234\357\255;\266\222\234<Hb\321<>pD<\266\027\251\275\r0\020\2750\223\234=\312&W\275\344`\350\275-\333\373\275\274\313\211=:D\263=\375\231\205=_\006}=\210\3374=T\320\334\272%_\215\275\255\323\354=\236\275\331=\006\317\014\275$\200\207\275\211\216s=jh-=3\007k<\247\354W=,\273\232\275\246Ah<\312v\001=E)\036\275L\371\372:sDZ\275\233\305@=\355\036\000\275\322\\\022\275\267\354a<R\277\007=.W\317\274\t>\210=\252\274*\275t\200q=\220\372\312=\373\"\310<\342\207,=\326\243\r\275\n\2056=\324\360\331=]\251L\275i;\347\275\004\004\311\274\271A\203\275\332\202\307\271I\333\017\276\261\263%=^1\326;\275E\251<\334%\327=+\"s\272\351\037\331=\005\357\201=\365\302\344\275\246(\000\274\272|\036<{\3301<(!\004\275\370\367\236<@S\231=\376\305C\273\376\010\026>Y9k\275\330\334\030\274\356w\273\274\232\027\336\274\024q\037>^\352b<B\364\347=\323\376E\275I\225\003>\032\200\037\272a\221-=\317+\n:7\370\n\274\371\021y=w,?\274\3749%\275\215\326\252:=s\262:\265\n\332\274\306\t\350<\275\276\006\274{\211\'\275\357\3432\275\360*\005=S\255\004=4\246 \275e>\304=\032\004`\275\036Ar\275\013\212\204\275ls\026\274z\2641\275\222A\322\274\216\363\342=~n\020>\2625X\275\257\321\255\275uU\227<\202\352\225\275\363\250e;\206\244\343=`\224v=m\030\322<4T\010\275\374\000\354<\360\303\301\275\3536\264\275\225\253\343\273\341\017\354<g\357\254=\234\202\205;TM7\275()\271\274\223\340\'\273\356\003\215<x\275\023<|\214v\275\020\273\243;\"\254\345<\246<\230=9\r9\275+$8\274k7\203\275{>\026=R\013\343=<T\242<\242+m\275\021\336\265;}I\275\275\030,T\275G[5\274e;\003=\356\361+\275\264\312\314\274/\376\301\274\036\305\236\275\261\355\243=FcU=\306\200\336\2758,\222\275\206V\214\274|\375\214=v\307\365=\366\234\022>{I\022\275\203,k<f\032c\275\\O\267\275\246\026\351=\217j\302=\346\2244\275\211\221\375\275\276\270\262=\333\017D\274$17=tl\234=9\315\257\274$\2131\275\032\\\216\275\217<\004\275\340\274\335<_\0238<\007\376\302\274\024P\200<1*\005=\226\001\005\275e\017\316\272\374\237\3359\372S\003\276{\274\351=\301\252\226\275\301?\213\275\033\317\013\275\037\3232\275<\001\254<2\202\t>\352m\206\273\203\340\004=\003\311\014\2750-\003\275\300\204\216\274-\243\361=j~\230=MO\024;+\177\275\275\247\206\244\274{2L\275\344Y\025>3\350\327\274\177>\014>\356\362\254=\004\353\227\275x\327\341\274*\217\350\274\262\020\023\276m\371\300\274\212\373E:o\263\374=V\330<:}VQ\275M\225\223=\310\364\\\275e\257\333<\217\277\206<L\302\242\272=\3524\274W.\337<8\252\300=\267\316\007\275=\313_\275&\2369<\374\355\331<\231\340$=o\2238\274\177\267\n\275\363z6<%*M\275\251H\205=\2459(\275\207 \312\275\3621\242=\2041\241=\277\006\274\273C\263\217\2753-<\275#h\252\275v\364|<\216\345s\274\n\334D=\177\352\361<A\242w\274{s\264\274\252\354\020=\210s\363<\024Z\260\274`\351\375\275\356\261\334\275\322}\027:\035\261j\275\260Fx\274\262z\352;\244\007\325<\270\032\360=^5\272=\227\365\327;\332\346}=f\375\\\275o\337N=]\272\277\274/\307\030=\341\032\"\273Q\311\233\274\233U\343\273P\310q\275\007-Q<p\304~;\264\277\006=6\305e=\220~a<wMR=\024\032\214<\330\331\354=\243\205\216\274\200\021\235\275\352F\301\273\260\000\305<\310\261\333\273\177\250\030\275\230\2359\275\326\242\021=\0218\335=\020\272\273\275\375\274\010<=\020\202<s\314K=Z\230\212=\223\230k\275\377\317\237\275\323\344\021\275\346\002\362=\034\031\255\274\312\3004<\315q\215=\316\276\221\275,\2111=$D\254<MW\262\275Di\032\274\'\007\001\275\323W\356=Vh\367\273\"\367\312<\320\336\200\274\354Y\003=\222\010\332<:\032\222=\227\236j\274\201P\202\2752\260\026=(r$\275\372\234-=\035\273K<\221\365\334<\365\274O\275\036\005\223<?P\t\275\026\266\327<y\214\003\275\251\241\374<\245\322\244=\016B\232=\'\262\214;\014W\003=\244\263\307=d\201\352<\331\366\303<\215z\200=J8\267<>\247\201\2745G\016>\341\260P\275Ef\315<$\343\204\275\240\t\277<\213\032-=\333\277\371\273&c\005<\312i)\2764>[=\347\223\205=\275HG\274e\021\263\275\233\364\262\275k6\307;\027n\352\274\3119\005>\034\300\230=a\024c=\336\347\365=\025\362\373\275\302\235\305\275\305\335\\\275k\346~\275Q\321\r=q\324\002\275\347\035\303<Q\302\006>bG\262=[S-<1f9<\301\371&>\241\"\224=if\004=\317\305[=Yl}\272\243Y\220<\272L\274\275s\262{<o\3015\275\333$\237=\2456\226\275OM\200;\212$C=\315\003\204<\321B\216=\034\003\204<i\202\214\275\322h\226<bC\313<\320\372\340\275XE\352=\010&\304<%\0215\275\204\305\251=0\345\312=ng\275;F\322\355=z\313\037\2751\220\034\271\242,\211:\302\235v;0\356\236\273-.#\275\323\236\007=\242\222:\275\'\276Q<R\027$\275\344h\216=M\357+=-\227\315;\230\235\244\275\2714C=@\032\321=\376=y\274\034ZN=w\r\263=\335+\025\276\006I\r8\365\314\005\274<\"~<:S\325<H@k=K\212\035=\347\364\247\274\227\210V\275^\346\304<\304\3601\275D\362\225\274)1\273\272\001\314B\274\336\316\010= X\271<\246\266\376\274F\024\221\274\256\210\351=\324[%<,:\273=\241\332\025=\032\024\347;\356\233\t=M\r4>\266\334\271<\316\033\202\275Y<\357\274&\262s=\\A\2439f\223\235<^\304 =\350\243\223<\222O\315=\205\273\235;\003\303\216\274\036\356]=\3010\210\2749\354\007>1\261\320\273?\026s\275\3409\232=\233\315\251\275P#\247\273\231\010%=\2234\260\274\371dx\2743\250\023\275\321\021\255=\333\225\225=\003]\311\274\312\264\n\275\354\035\024\276\026\236\212\275\003\234\";\235_\201\275\207\341\250\272\202QT\274\2124R=X\311G=\263L\017>\371xS\275&H*>3\266\212=\250z\344\275z\224B\275\000\270\237<\2646o\275,\266\246=O|\315=\341\267\266=\377\361\203\275\276fH\275#=\030\275\213\247\016\276\227\267\314<Y\336\t>\3067\226\275\021\357D\275\336\244O=*\223\251;3\260\004\274\310t_<ET\211<\033$\241\274\265&f\275&\325\221\275\216\007\306=\020D\355<\275\231Z<\267\310\346\275\355,G\275\252\025\223\275\205w,\275\200\327\227\275\220AM; \253\235\275\027\304a=\311\226\263\274g&\270\274\247\363S\275|\346\373;%\345\376\274\362]\306\275\3173\245\275\266\315\207\274\206v\016=?2\271=\tp\224=UR\262\275\004J\332=\300<\216=j\352U=s\240j=j4]<ev\272\273\270V\362\275\300NO=\317@\322=\312/\256=\300\354\316=\365\304\300\275V\205\307=\252\370\271=o\033S\275O~N<\347\353\331\275\340\330\240<\223\031\274\275\333\354\307<n=\244\275\327\244\205\275~\252\241\275\035\377\233=K=\360\275\334\315\306=\216\026\010>`\327\035<T\r\215\274p\252^\275b\3551=\332\000\201\273\024b.\274\333\244O\274a\343\350<\375\010\303\275J\221\211<\274\266\234\275\335s;=4w\342<v\355C\274\023\371\346\274\361d\322\275\202\304R:\363g\n>ND\031\275\2152\260\272)<\221\274)\334\276\274\363\3478\275S\216\023\275\363#\325\275\332}9\275D\265#>\220\010\361=\275\315O=\032\266\221\274\374\212\201\275\241\022\340<\246\023\214\275\274;h\275{m\364\274\223\246)<\303\272 \275\037^P\274\257;\231=l\251\013\274\004\260W<7*Q\275\024\266\005\276\020b\263\272\331\317\270\275gkM=\017\237\316\275\217T-=\344\266\234\275\021\034\201<\220\272\300<,\317\206\273\210\201I=\377\234\177\275\217\273L=+\322<=\004\323s\275=\326%=\035\032\254\275p<\343=8\343(\275p@\326<\241\313\236:\337&M=\026\301\333<\360\267\036\275\3749\216<\225M[=P\341\346=\366\333\364=\010M\213=\364\004\217\275\231\324\231=\3310\260\274\003?\214=\257\244\324\274S\004\314<aE\335\274\221\267\001\27689\307\274`\033\200\275f\350\234\2758\211\210\274\272\257\335\272l\302\027=4\004\205<\347r\330\272I\000\320\275O\277\270<\327\027\010=\320B&\276\334\274d\275\017\3311\274EX\267=\366\341\307:\261\252\325=?mt=\250\014`\275\3008\314\273\376E\312<w\315\007=\214\363\332=.\340\220<\360\362\026\275rY\013>\262_\005>\3320\216<\021\236\250=6\014\205<\266?Z\275\016\214\014=5G\367\273\203\234~<w\261\203\275I\332\302<\263b>\275o\373\241\275\034_\"=W\345\352<\367\376<<n\200\235=zHH\274\357\235\t=\020R\021\275\207\2568\275\260\320\306<K4D\275c\360\261<\246C\017;`F\226\275\237\315\215;\340B\252\272$S\014<\003b\265<>\316\234<6\373\317\275\007\264\"=\0266\013>1\026\372<\372\2312=\230J|\274tT\013=\332\313s\275\303%q=\362*C=\362$\022=\0071\032\275\211\no=%\275\376=\030n\234\275\007\256\221<v\364\t\275\035\276\201\275t\275==\337J\347\272\267\203@\274\364\364\255=\206\000j\274j\016\315\274\256\000)=\373\213\013>\024\0221=\375\354\330\275\356\n%\274<\240g\275\250\305\377=X\335\213\275i*N\275\250B-\275\323\340<\275\001k\310\274!\256\000\276\350\377\377=I%\311=\\\300\\\275k/r=~wi<\324\331-=\367\026\227\2751\005\351=\257J9=\244\250\370\274\353<\355<\3349\002\275\265\233\236\274\226\027\003\274P\372\223<b*M<\347*v=\261\014\350\273\353\001\273=n\333\030<[^X\275Jy5=50n:\003\221\227;N\203E\275\221\356\316\275\203\205\375<$;r<g\316\270<\325&#<!u\010\273\272u\242=\315\016\250<\363\230\342<\304\252\206\2741\350\r\275\2406 =4\376@\274\357v\206\275DH\231<\330\345\264\275\036\236\254<\026r\301=\260l\331\274\001b\212<\305\356N\275z\302\236\275\313Z\251<\370\377\307=g\353\251\275\223\350\027\275\006\200\010>\247k\361\274\031 \234\275\250\016\310=\214\234\212\274\\v4<qvM=\337\304\304\275\274\320\237\275\340\300=\275\236:\301\275\0071\353;\233]\351\275l\211\024\275x\303\231\275|\311\204=]\345\201<\344*\243=\261\277\331\275\350u\317\272\365\266\376\274<\013\250\275\r;\215={\231M\275U\272 <\247k\027\275v\314\321\275K\263\327=<k\207= \024\311\274 \237\234\275G\316$\275\363\352==\201L\032>\260\002\247=\315\354M\275f\014f=\004(\313<\242\302\206=9\315\034<\007-G\2750\335l\274\207^\223=\273\3621<\225T\224\274\213\267\206\275\312\'\322\274\2665\313<\342\232\204=\033\213[=\267q1\2758+\301\274\3534\370<F\340\357=\317\241\034\276\234u\250\274\017\276\246=\324\013\247=\301\263\177=\307\203\252\273\221H\024\274+\016o=\337\366\236\275\375\357y\275[\206\266<\326\376&=\005\226\314\275\333;\234\274\375a\324\274\024sO\275\313(\212\275\233\342\252:\250{\216\274H\300\210=\3178\340<>F/>\331*\201=gP\261\275\024Fg\275\225\351\007>\227t\021>Ex\345=n\375\236=\356.\274<\354\373e:\256\002\332\274\246t\033<\370g\241<\352\305\214\275\222D\341<K\230\253\275\232\214\361\274\350\031\222\275\367e\262<\210\\\242\275\036f\021\275\335\016\275\275\317\202\033<z\220\353\273=\324\346=-.\220=\201\220\316=\271\025H<D\246\260\275\364%\013\275\204\375\025=S\372q\275L/\244=#\363\341<]M\016<\322c\350<.Z\003=\204?\275\275\206\332\312\275\032\340\242\275\312\206\300<\315\220X=\300\013\217;k\223\327\274\032\227G<\370[\214\275\\\336>\274\352A\307;n9m=\233\235\373\275\230\365\010<\351wl\274\323\'O=4>9=w|\256\274v\355\013;\031\027\377\274\313~\'\275\327#C=\016I\214\275~\025\255;N\371/\273\014Ok<l\004u=,\t\206\274\332\263\245\2757\314\220=D\344\030>\313O\274=gPH=\314\206\271\274S\024\220\273\3506:\275\t\0339=\324\354\256=C\246\276\274\271\n\231\2746c7\275\013_I\273\330xF=N\3549\273\303\002\203:\204\340\'\274\353\253\263\273i\3546<J\252\345=R\'\212\275\3454\265=\301\373I=+{\272<\313\241\321\272\315\220\016\276\336\254\242\275N\300\346<Z\013!=\204B\344\274\232\305\323\274\270S\014>\200\332\347\274\314\020\245\275m\315\325\275\006\276O\275\316g\221<\277iR=\373\372s\275W\225\204<\211\035\251\274\000$\022\275\331\346\275\275\005\231\202\274\255b\356\275J\247\376;\207\353e=\333\214r\274\313\242\n=\0175[=\272\234\345\275l\253F=\024\310\330\273\244\3220\275\014\205\230\274\237\354\344<\301m\375\274\260\375\351<\323c\242\275\007G\344=2\327]\275\345[\330\275\004\320\373\273\225&\212\275\307\001\331<\205\233\340\274\235\005\336\275\024r\'=\361#\236<|L\227\274E\205#=\344.\203<\326l\t\275&\022#=\2318\314<\207CT\274\353q \275\177\314?\275\332u\243=o\2438=>ni=f\226\220=\250\005$<\275\342\305=\213^\265\275a+\364=W\317\312=\300>\026=\313]X=\335\364,\275\3412\212\275.\350\036\274\2266U=\372;w\274\013\030\247=/\246\\< \"\343\274i\324\213\275\366\0215=\212\240\201\275\3430\230\275\237\236\333\274WC\321\274\023\002\274\275\023\227\340\275\247.\216\274~\023\374\275\340\336\226\275\315\351/=\212\033\217\274\246\221`=$tB\275\250\204\216=\357\207\246\275\332\310\230\275\'\246\234\274\341\025\235=\310\357\320=\036i~=b\305\202=\346\221\360\274\356\025\230\274\030\330}\275\007\354\231<\353\247\267\275\035T\235\275h\207\273\274\205\002W\275\262\241;=Q\\\244\275)\360W\275\002\010\217=O2l\275Z_\224=Mda\275\335\203\217=x)\026\274\350\314/=\014\242\376=v>b\275\305B\005\274\r\260\320=cN\204\275hd\352=\035\343\253\275\361l\277\273\t-\306=*\213y<]/\374<O\302\010=\203M1\275C\240\013\275\200D\366\274G\023\\<k\340\360<\023\226%=<8\210\274\2048\024<\331\324\271\275\346\270L\275tn\267<\205\322\343\275\006\347\322<?\311\237\275*%r\275\"\306\305\275\207i\r=\2240\026>\0001<<\232\311\313\274ic\331\274V&\365\2740\002\331<\344\224\010\276u\220\037>\256\324\245\275\251\371M\275\354\r\300\275\254D\352\274S\245M\275\010^\306\2743\342\240=\270$\353<\037\252\005\275\r*\351=X$\335\274\200\036\331<\371\321\346\274\363\032\265\274\017r\316<\256\211s\275Kc\300\275\365\303\217=\240\215\017\276<|\302\275\360{\001\275<\307n=\023+4\275\355\344\036;\375r\035\275~\317~<\036\022\216<\n\025\273=\3227W\275\366\321\255\273,\211\300\275\231\304a=~vi=}\245*>v\367\223\275G\275\326< \303\"=f\305?\275!\255\201=B$\342<\243_}=\323-\203<\226\221\325=\262\262\222\274\314\212\354=e\3475\275VW\345=\270\342\226\275\n\253\203\274\\\211\261\274\264w\265\274\006\0205=Ru\356\274\202\377;\275\211\364\210\275\216U\014=\nY\030\275B\256\003<\361\203\307<0Gy\275\374\034\027\276q\323w\275\277w\310=\254\361*<\202\020\276=\316\312\270\275}\027W\274\232\022 =l\001V\275\235\315\364\274 \021N\275\252\204\212=\271I\303\275\231\3764<4\017v\275rY\013\275\301\303\267\275\014\n{=\010\036\001>F\224\224=s\202w\274\235\352o\275\263\213\035<v\316$\275\201(\274\275\336\314\216\274\336Ix=H\035\371<1~\003=\342\003f\2753\217\033\275\002\235\335\274\207\361\201<X\\\315\274c\327\223\275*\202\3509\232[\r=1\034\333;Y\301\356\273\212\254\246=j\374\306=\354R{\275\342\276\255\275\244\327\030\275\350l\265;\211\340j\275p!\"\275\344\220l=\r\267\225=\006T\260\275\240\352\354\275>og\273\222\266~\275{\274/=\332\352D\275T\000\245=?NN\274\353a\027<\361\216\220\275`J*=\262\244\233<\037\035\027\276n\007\227;\347\331\n<UQ\275\274\035\376X<\375r\276\275\313\230\023>0\310\234<\257\257\255\274\323\n\222<w\214;\275!\373\307\273\024\317#=\254\035\034\275\355\261\262=\205r\332=J:\301=_\230a=\315\252\207=S(\337\275\246\003\231<)d\252;\r]d\273\271n\372\274\351%Z=\177p\n=/\212\342;8\"\233\274wX\275=\236\266\356<{\335}=\021*\301\274lK\030=\301\201\202=.\347\257=\371)\240=\273\300p\275\300\0171\275G\"\367<\251\300\001\275\200\326\212<\336\030Y\274\363<\205<^\245\321=\233)\246\274\363\002\241<*P\345\274\311\243\323;we\"\275&J\303\274Z*\301\275no\003>8\215\027>\242\372\301=\277n@\275\222R\n>K\007\300\275\370n#=h\330\245;+\375N\275\247z\005\273\262\326}\273\022\000J=\362\031!=\375O\216\275\227\270\234\275\327\360)=\243\261!<\212\242m<\345\244\243\274\353&\251=k\237\252<\010\373\177=\020\nG\275\277\201\251\275\350+\336\274\352\"\027\275+B\017\275\243\350\200<O\354f\275gfZ\273\321U\024\273\017\021\031=t\2350<\225A`=B5W\275\263\211\361\275\\:?=\207\340\310\273+\346\245<k\252Z\275\321\004\237\275\273\230\205\274\364\341Z\275J \224=\342\216\251=\243o6<\343O\326<\342\t\366;\005{\225\274\34444\275&\021\355:\367\322\206\274zv\177\274\332\206\377\274l,\202\274\310!\031\274\261\304\253\275V\247I<o\346\370<\013\227g\274K\237\334=\003\265\000\275\316d\216=^m\217\275\267|\214\275\365G\260=EF\354\275X\002\255=Fx\271\274\037\235\030\276\241|3=+\242\330\274;\270x\275\362\000\353=\304\376g\272[\216\302=w\217P\274\027\346#>\007\210\247;\354~\376\274\"e\213=DU\376\275q\236/\274\264S\221\275H|&\275\312\010\232\275\336\357\004\276\365\203|\275\240\177\2638\027\017\202\275.6\"=\347\332\321<\252\322z=GA\003<z\224\020\276F,\230\273d\300\262=\021tN\275\033\r\322=\337\304\030\276\205r\237\275\253\307\027\275m\237\263\275\313/\274;L\034\372<\006\330\316\273\271*l=wdR<A\354\212=\236\347C=\341\253\236\275\3046g\275\330\225r=\262\321\026=Y\3175\275r\324\"<\232F\033\274\3040\261\275\322+\246=\372\017J\274\311\t\017=\250l\323\275\206%\237=\026V;=Y\031\261=\342\260\003\276a+\212;p\311j=te\370<\233\224\013=\325\020:\275\232\326\315\275\377\233%\275\'Yc\275\240.1<0\320\266<\003{\231\274\363#\026=XNB\275\223\024\370\275h\352\267=,{\001\276\321\222\320\275c\211\220\275\330R-\275\271^\257=IB\222\275\217\344\356<PP\241\274\231B\021\274\261\013\262;\264D\221=\313\270\335\272{\233>=\253>C\275D0*=\307\321\217<`x\034=r\001\227\2752\316\346\273\234t\253\274\256\022\013\275A!\236=u\000\357\275+\242\205=1\217\271<\331\367\271=\221\3438=g\004\001\275\224J\361<\003\014\303<\330\325\037\275\"Y\322\273\200\237\3529\263Ds\273\020\214I\275$\263\301\272;)\003\275\274\346%\275\312C\3749P\334\034=\267\001\010;\"\021\324\274\017\212\226<\311\314\013=\324\346\274\275H\306\224<\240\335F;\202\3569<\264\305\216<qw\355\274\363*V;Y\334Y<\315\374\224=\203<\270=\277\204\004=\237\347w\275\004\023\260\273\311\224\355\274\314\267\273<e\247\310<\020\3162\274\010:\211\273)\306O\275\231\306\246\275\252\240f<e\241\371=\245<\306<1T\273\274\321\n\313\275v\265\313=\005\341\326\273\310^5;(\333\361=\241UQ\274\362\334\241=\312\304\242<\257\216\336<\204ry\275\322\"\327=\204\377g=\262\262@>^8\332<\375\033\213=\024\352\233=U\007V\275}\304\346<s\314\021\274\323\3472=\247}\203=?\244\233\2750\373\221\275\354\227\203\274\374\270g=\267*\030=\341@\260\275\222$->\360\255\236\275\031#\271<\022\010P\274Ny ;J\306\032=^\225;>\341\226\305\275\205i\226\275L\260v=v\243\002=\247k\244\2753S\271<K\265\032\274\226>)\274\262{\375<\t\r+\275\021n\277\275_\272h\275\370S.=!\0233\275\335\207\004\275\320s\307\275%\006z\275\3442p:\342\270\t\274k\323\002<\036\034P\275\374\365\222=U_g=\270Z\246\275gD\217\275\210\204\354\274\035\200\007=\373\367\270=IE\t=\261L\225=\227\202\235=\026\274\211\275\361\354\r\274\303\237\304=ct\304<_Pn<jk\347\275\227KQ\274\030n\214\274\256\322\275\275&\362v=\247\235\315\274\244\223\220\275\323\336\235< #!=\331E\202=\342\336\367=\021E\377<&%R\275,\024b=\3047G\275\307\321\226\275\362\344\272\275\201Q\226=\021\250Z\275\032\350\215<\177\303\355\274\217\312\340\274\233\312\203<\214Ll\274Z\356\276\274\344)\306\275\031\363\006\275\203\223[\275\234z9=\312N\307\275\315\361b=\337\270\274=p\3543=\223\337\031\275;\372,\275\022( =\266\260\272\273\033Z\231=\342\273#=.\t\242=\256I\376\273\274S\251\275\002Yo\274\254\307\375<\004\373\000\275\r\254\216=\031\247\212\275-4G=\016\273\276\275\027\330\304=X\261\330<\223\311\270\274\317\256\t\276g\037\254<\351\271M=\211\344\351\274\340j\304\274\241\311\025=\333(\221=\343*P\275\335\316V\275\375`\027\275(6\240=\310\327Q<du\242\274\273\306\221\275\004\376|=\023\354\030\275\214\264\237=<\303l=X\246\003\275\177u\274\275_\375\374\274[\327\010=\2277[\274\2509m=\326\210\227=\001\027\202\275\316\343f=\255\3471\275\007\321u\275\303\353~\275\220\250\035\275\252\213\371<\316\322\317=v\362\300=\226\260y=\266Y\036>\370\267p\275\251$\216\274\241\214\003\276k\\\265<\241i\007\273\216\257\331=\035S\262\274Dv\315;\020\270\200=n\031Z\274r\274\210\274\245(H=k\343\370;\370\352\240=U;\020>\211W\016=\233\223%=\377.O=y\016\201\273\235\021s\274\r4\035=\016\216\327=\036\264\210\275\355\253\342<o\230v\275\213N\250=A\371\027;\3550\375;\255[F\275]*\277\275\360x\257\274\037\262\"\275:T\300\275%\310\255<\223\323r\275E\344\311<\274\206b\274[.\026>X\353\307=\010]\275=?\310\253\275Wj\023\276\\7H=Vj\271<\034 \t>\210\006E:\221\341_=\354\354\262;\235\265\261=zb\032=E\332\306\274&6\252=!=\225\275\301\r\n\276cc\251\275=\3507\274|\247\2049n\316\246=\332\350\215=\264_\001;\306L\206=\316\266\367=\035\364\305<h\301\321\274#8\013\274\240R\224=x\311\302\274\250\035\330\273S\374\262=\236\327\253\275\332+\266<je\013\275\363\200?=\2700@=\001\226\033=\206\021\211\272\333\310N=\213\220\357<\003\364\304\274\002\013\177\275\316\377\201<\022\264\245\274\346\3349\276\275\343\007\276`\243\247:c\242\304\275\375A\357\274\362\007\374\274\204\177\376\275jx\025<SLn\274h\275\222\275?\330\215\274\265Qd=sG\317;m\013\377\274J\231\234\275>\347\025\2755\270\036\275\364D\032\275d\240\316\275\006\257\271\275\340\366X=W\034*=\362\273\023=M\371\022=_\376\211\275$\244\326\274\360\375\255\275\327b\254\2758!\034\275\354jc\274\315\222\001\276dw;\274e=\332<\263\323\321\274\343\212\355\273_\007\252<\021\321\255:\364,\355=\321v\371<cj\264\275z\315n\274P5]=3\245\\\275\253\335\370=F\234\023\275\271k\r>\331\3071=E\201L\275\032:\200=\031c\255=9\256P=\315\007F<\362\372\245\274\250\341x\2727\346\232:\025;\274\274\314I4\274\350L\360\274T\347\202=6\331\361;+\321\363\2743\221\033<\251\323$>\360~\027\275\001s\014=\226\233\265\274\277<\n\274\260\307\005=K\240(=\026\246\204:\305\320\013=k\013\305\274d\331\036<\334\364\331=d\217H>\360\204\206\273M\243\016=\004\344\277\275\373B\001\275\375\340\000\275UfP:\224\3351\275\365a\212:T\347\374;r,\017\274\377.\307<\237\0055\275-Q\201=o\257\362<K\370\006=i\272g<\200\340\316\275\026\005|\275\354Fb;\253\204T<\345\250\034=\277\214\225<\331c\237=>\210\217\275\214P\226\274O\203\304=\213\310\334\271\273\"\013=\346\365\243=\232\254\246=(<\275\274P\213J<\246\360\377\273\211\226K;\014g\221\275\251BS<iM\330=\014JZ\275\'yV:\034\234\313=</\233\275\t\"\035\276\335]\210<\366\306\224\275!\024\315<@\210\032\275\224\265\234\2751\265\031=\371\001%\275o\260\250<\3019\213\274\326\202q\2758{9\274qy/=i\020\363<\254\372\014\274$f\207=\0209\254=\236\034]=\033\206\354=eZT\274X\332\252\274Qu\230=\356\031(=\013\t\223\274thZ=\347Ab\274\264g\362\272o\217\332=M>)\276\366Y\330<\304\274G=\271\323G\276\346\341S\275\322\255\002>\341.\026\275Cv^\275q\326\247<\340Z\261\274\355)\">\312\261\375\275\221E\301\275\3456\252\275\203\2102\275\252\344r\274\020\231\233\274\307\034\210\275\016\254\374\275\362\355\260\273]?W\275\272\327U\275\275?\"<x\220.\274\266b\t<\003\n\343<\332\263D<L\r\211=\364\237\371<\300,\335\274\023\276D\275\350v\r>k\234\252\274\0002D=\202\332\216\274%\027y=\353\034W=\035I\256\274>f\373\273\021=\n\276=,S\274\267\026\275=\304y\t=G\234\270\275\216\276f\275\223O\215\273\330\215\023\274\236\210 =\211\200\030=\374m\201<H\035\213=h\036,>G\340\253\275J\020\321\274,\354\205=\274\350r\275g.-=\212\035\244=\323\003\326=\273\333\222=`\260\222\275\007Z\333=\313\266\335\275U\270X\275\317>\356\274\346\315\322=&?e=0\211D<\214\325\207\275\215\333\241=\377\016\036=\212\3054=\211\306O\275\210\262\021\275\241\272\227=\204N*8q\355\275\274p\323s\275F\367\364\274\311q\207<\250\357\227=N\262\326\275\016ar\274-\316==Hd\316\275\244\003\362<\250#\267\275\217\271`=\226w2=H\007P\275\277\247\210=\223\216\n\273\244\330\211=-\006\325\275\340&\007<\205\270M<{tW<\3131w\275H`\251<<\264\364=lc\007>\372GO\275\330\234\014\276n\303\315\274Wk\210<\025,]\275^\003\214;\347:\232\275\273Yq=\356\313S=S\357\022:\344\305G\275\344\036\030\275\242\306\336;\2277\230\275\225_\241=z\267\247\274LT\025\275?*\303\275\316lC=]\243P\275\272\177\341<\0311I=&\254\323=\350n\307\274\211\350\2208\352W@\275+4\025\275\373\316\n\273C\017\333\273\322\203\230<\216\330\206=\332\355`=p\226\262<\036.f;\233\');]\373c\275\246\307\252=\006?\210\274sL\356=XL\236\274;\205\306\274\\\275\007=\360\241\317\2756\374\267\275\271]&=\264\277\365<\021\027D=\206\211\235\274\242a\364:r\322\333\275P\210\217=D\237\004<M\264\334\274b\241+=;\242\3478\354\032\211\275\253\355P=\360\346\'>\267\333\277\274$\305\376<\036s\203\275\264\"\253\275p\371\316\275\256\025\334\2734\350\244;(\275\265=\324\264]\275\224g\222\274\201\334\366<\232\270\273=iG\r\275\2339\n<}ms\275\370=[\275#\004\211\275\370W\222=|O\036\275\260\247g\275J\345\233\274G\263Z=\350\353e=^rQ==l\260< \247\217<\301oS=KR\200\274\007I\031\274w\317\246:Eu\267<\323:\202\275)-0=\335\230e=\3426\241=-\010a<-\201\035\275O\020\363\272]\260\201\275\330Ic=\213id=[\213L\273\320\241\306=\025\250\214<\357\002+\275\330%f= \327\325\274k\037\242\275^m\252\274\330E\274\275|\217\272<\000Q\307\275\222\377q\275\3678\320<c\356J\275w\316\261=r\366\007;C\347#\276\327\276U=pd\037=>[\000=1\006!=\034\353o=\3301~=\234e\345<\377N\022\273\210\250c=\'\313\315\273W&P=k\260N\275{\324d=\330\270\371\275\225\352\366;Y\323\230=\346\373r\275c\263q<\360vK\275\036*\217=\010\270P>\347\275\217<Of\211=\207\262\004\275\003\306\252=\342\t\200\275))\r\275\302\304\360<\332\201\211=\244\367\226\275\352\366\305<-\010\211\274\231R\364\273\214\331H\275\215rH\274\020\335\006=Y\341\205=\014\023\033>>\313\227<\215\253\214\275A\346\220\275a\321}\275\201\024\255\275\306\004\223\274\210\202\017<a\337:>|H\330\274\002\330\271;\022\304,\275\345\354\211<\233\342\016=7~\342\275\026O\212;\200\332\212\275q\n\027\274$m\326=\2732\205\275\240\200\263<\025\305\207=KO\243\274\037\341\261=\31131;{d\031\273\235H&\274\213\307u=\017N\027=\252@\001>\031J\304\274G7\004\275\336C\234\274s/T\275\277:\340=\263\213i=\377\246\003\275\227Fi\275?x}\275\252#\016\275\321\357\240<X\320:\275\303\003U\275\324kh\274\271\233\335=\177\306}\275\211r:\275\220\262\036=\337 e<\3551\257=\237\254#=\254\241)=\264\020i\275\314O\325\274\"o\270\274{\345\013<\"\340\226<{\241\227\274\004h\253=(\355?=\216d\325=\364p\244\275\366#\262\275B\214\224\275\271\2267=\303\341\245\267\327&\362<N\016\001\274\036\341\207\275-\255+\275\014w\234\274\360\303\247\275\347\014\025<?\362q\275\330`\364\274-\032O<\245\314\001=[\246y=\371\330\241\275\360\370#<\256\320M=\010rt\274\240\003\337\274\277\023\023\275\246\375\216<\352\231\234=\021hc<\323\271r=\016\007\265\2758)!\274M{\023<\034x\025=\025.;=u\177,;P\322\027=\200\310\250\274>\343p=\234b\340\274.\331n=3i\025\274\265\037\223=yC \275c\324\001\276tT\302<\024-\307<\036\000\267<\203\234\025\275\224\246\273=\321/<=\030\230L=\335\351u\275\246\203U<\243n\030\276\231z \275\241o\223\275\272\234\271=X\272\223=\242\264\355\273\202\311*\275O*\241\275\024\316\236\274\232\235\322=\362\331~\274\256\305\215=\302\217!\274\225?\035\275d2\266=\365q\344\274\321\"\205<|j]=\017\237&=\265\201\007\276\223\037\\<;\035\213\273\356\321\340<\366\251\005=\321\243\001>\245\255\252=\226\310\326=\035\200\370\275\010\337\321<3\025x\275U\331-\2756)\207=C\022\261\2742H\371\275\2367\266\274,:\352\275\215%\211\275\205jr<P\323\315\275\014(?=_\034\010=\224a\013<UR\030\275\276\n\303\273\254\246\220\275\264\341;=\233wM\274<<\313\274\032\346-<\373J\325=\336\241\240<(B_\275\376h\302\275\245\0240=\313\253\027\275v\r\366=&\025\254<\316\032<<cAx\274M\203\034=\217\230\371<g\344(\275\330x2:W(\n>P\032\203<\312r\\=\341O\317\273\233\262\312=\337\371\031\276\373o\010>\357\313\305\273)\2405=l{g\275[AG=\263|D\275m.\314\275\350\247\215=\251\013\334=\236\336\307\275\t\302\t\275@\330\245\275\232\356\263<\n\204\257\275\344g\303\274\271\016\216\275p\331\216=\244l\331<\206\350f\2745\023\235\275\2011\016\275\357\330\336;7\214\001\275\240J\007>\307\233\177=R\253\016\275\247\202\366\274!\342A<`\206T\274\021\263\236=\205\010\"=\205\350\021=`\334p;_>\210=\316\030-\275~\271\004\274.\010\234\275\213: \274\333\234A;i\3577=/_\265=\306e\002\274\351\244\213<\357N\030\274\316\006\200=\024X,\274\336Bw=\277F\027=\237\372\250<\332\022\316<\223Y\035=\244\357\235\275\351B\026=\265\240C\275\"T\\\275.L\247=Z\256\235=\354\3173\275\205\377\216=Aj5=\n\0350\275\2272\005\273I\315\355\273\211u\375<\311c\374\275i\201.=\335\252\270\273Fs-\275\336N\205\275}1\021\275z?u=Q\322m;\312\304\212\275\025v\303=\335\362\337\275\362i1\275u\322)=6\032\273=\273\217\230\275\t?\371\272P\263\353=\213\264\322=\324\236\275<x\234\205\275\037\376\261=%\372\217\275\226\270\257=\215\354\037=\254\343m=\333\023s=\347\216U=\213\3737\274@\220#=\225,\'\275\364\320M\275#\242g>l\205\251=[\234U\275\366+Z=_\344\204\274\010\224\032\275\250\'O\274\220\3476>\340\314!<\311=\222\272\223\334h\275\333\243\277={\306u\275J\212k=\272\236\257\274\317\356\235=\236s9<\323+\244=\031r\230=Q\334c\273\311\267\214=\206\312\270=K\007l=^4M={\246\211\274\354\014R\274\267\205\024\274\217\224\212\275L\016\240\275\303\365\324=\231\243\263\274\222!\004\275O\203\027=T\326\302\273\337\251=\274\002\007@:?\216]=Et\222\274\337\313 \275\356\240\251=\3174\\=k<7\275]\322\370<t<\025\2756]m\275n\274c=\2032\252\274\302\275\263=\210#\201<\207c`\275\252\206\033\274\350X5\273\006=\210={\026\256\2704\033}\275\376\271\350\275\261q\002\276\314\326\333\273\251N\333\275{\025\346\275-\033\366\275\203`k=/\3410\274w{\266=\t\356\275\273v?\021\275\023 \023\274\006\323\346<n\237\001<\324\341\256=m\004+=\201\366\246=`\273\010<\252\331\240\274\006;\236\275\374\002\213\275\"\327\363<0\022%=\257R\002>x\234S\275 \301\305=\356\365m\275\0313\031\275\300\"\031\275\341\266\224\275\272K\344\275\224.\022\275\2709\007\276\022y\025\275\216\200\201=\256+\035\275\251y\236=!Q\021<B\370\014=`\365\344=m\374\033=J\201\266<\016\243\200\275$m\032\275\023\277\037=\026\014\013\276@*\356\274\021S\224\274\274\262\245=\223\016Q\275oDB=$8\241;UJ[=\003)\216<\346\325\026\275o0\343\275\014.\271\273\211\313\022=*vl\272m\222-=\355\345d\275\216V\0149I\313\377\275\n\000\305\274\206x!\273{\250\352<\2014\245=\326\2304<\321#\341\273\311\024J=\303w4\275\347\237\302=\275\304\263\274\377\336\023=;\226\336<\323\234\332<b\265\302;,;\326\274F\224\026\274\023\243\320\274\250A\202=\215q\r=I9\005>\215\345q\275\313aL=\033\304\306\275\354)\302\275\312\t|\274\320\250\231<\244n\034\275\027|\303<\233\214\271\27566-\276y\227\273<\231i\256\274\361T\210=\231\277\245\275,\274\340\274(\006\013\275\310\277\272\275\256\367\000=\201\203\206\275|\274\220\273\337\021v=\270\261\t:-\300\316\274z\230\327=\325\023|<\350\276:=\207n?=\207\353B\275\217\014\005=\315\351\021\275\255@\201\275\362\263 >k+\200\275\306\311\003\275\030\017\313=\275\364X\275\251\261\267\275\006+\245\274\002\335\306=\321\273B\272r\311T;\275\306\311\275FxT\274\264\346H\274\300b\265=\'\215\000=C\266\001\274TA\034>%\t<\275\335\200\317\274&\017\300<\312P\214=\r\303j\275=\323`=\314\206\021=\312\2304\276\205F\014=~$\227<F\3220\275\000\227\227\273\205\226\212\2747=H<\222:\216=\364/\202=l\210\373=_$X\275d~\275\274\005TQ\272r\265\347<\311\325)\275\255\0278=n{\365\274jo\231\273\016\262\253\273\310\306E\273P\343Z<\032)\022\275M`\376=r\237\r<\263\252h=\262\305\034==\356\367;\356\016\235<%\227\244\274\340\204+=!`D\273\345\t\201\275V>\262\274\210\2358=\341\360\225\274F$\347=\017\216H=\371\242\332\273\010r\025\275\322\"\267\275\017{ \272\032\3012\275\210\215\346;\3217\343\275Qh-<\244]%\275\345!\001\276\354\332\343\275\330\354\304=\351\303\002\275\205pY<\232/A\276\301\t\310=\010\245{\274\207Z\240<^\236\013\273\357,/=\332?\362<\3629x==\2179;V\276\275<+\271\343\274\316\374\262\274 \2258\275\263\\\271=\321i\225=\312\177\023=@\364#\272rY\377\274\313\351o\275`\351\261\274\343\302;\272\236IQ=P\032|=\253\352\270=\347\255\007>\004\234\032=\244\210)=\251\320(\274\205E\255\275\361\324d\275\325\204\363;P\356\240\275\003\270\243\274\267\261i\275xj\n:\004o==,\214\311=\220\275\341\2730\236\223\274\251\237\335<\340&f=\364_#\275\252H!\276\272Az\275\246\340\212=\310gE\275\020e\010\276F\r\267\274Rh.=\346\t\377<f\027\034\275\322\217H\275;\000\026\2757\244\232:>\322\013\2767IO\275a\026\330\2746\216\025>\314\2641\275\020\027x\275\350Xc;\252\323\232=\267\022f=\204\337\352<\016k==\315\216\273\275\251\323v\275\225G\013=o%\307=z\230\264=\324\235%=\324\321o\275\300D\210\274\315\263\321\274\025\203\334=\275\3124\275\320zn\275\267\242V\275\232\232\203\274\243\246\360\274\343\213(\274\372)\207<l\336o<\217\t\221\274\222\356\276\2759l\334<\377\342\360\275w\235\t\275iV!\274\212/\314\275\266\347o\275\007tQ:\014\017\301<S\221\272\274\202\277\';\303v\321=_\317%\274\252\t\027\276\317fD=\346lX<\330\016\267=\010\316\003\275\324/\374\274\3350N<m0i;\320n\275=%y\365=}1\003=\274\017\227\275\374\355\035>\337\353#\275hit=\227\376\266\273R\306\272\275\203`:=\375\267\330\274\371\004\355<@K\216\275\371\005*\275q\340\327\275r\234Y<\0264&\275\321-\220<KY\241\275\227\004\014\275^A\274=4\206\r\273\264\003n=\3341\224=\361\353v<)\237\215=\031v\205\2756\265G\275y*\232\275-\017\211=E\232\014=\rP\373\272J\331\004>\372\377\233\275\241t\002\273\322W\230\274\257\263\231=m\312\272=\362y\214=\225\274\214=H\276\315\274NH\243\273\376\031\266<\014%\374<\322\020\006=\026\240\020\275\217w\307<\253}\325=f=\302=\332\364\215=\365\300O\275\2445\220\274\001f\272\275\232R\014\275\317\025\263=>\266\340\275\3576N=\306\336\025\275}\351\240<\001g\201\275\342\345\021\276\360\240\254=O=\214<\272\254\270\275z~L;\331;\242=\350\026\206=M\327\027\275@\0216\275\221\023\257=Ir\t\276\025p,=\001\357\357<\331\246\310<\244\341&\275H\266\277<\350\205\267;\361\225\244\275\013o\024<4c\301=\004\217c<\216\341\262\275\2559\244=\310Fn=r[\022\274I\2577\275\226\005\244\275\3606\251\274g03\274\367Qg\275Z\274\323\272\2671\237\273\'\324K=\311#\311=t\215\333<\005C\203=\016\370\276<\222\263\363<u\271\333=\n]*=\202l\274=b\026\230=\315\260\357\275\032\3525\275\203,\334\275\302\221:<h\351\305=\244\256S\275 \324H=\002*U=\272n\311\274\335\364\032\275\246\316\256\274>\254\305=\212o\207\273\023\261\276=\270D_=\315\362\033\275l\205t\275\035EH<\204\000\001\275V\316\365;\200\376\251=z\375\006\275\321\231t\273{L\335;\200G\020\275\005\254\206<sB\025\274\266|\351<\254Q\025\275\304 \327=\025\001>=\013\317\200\275\341?\274\275\252j\244\274\3446\254;CU\254\274\354\'\377\274\036\366U\2744;\022<Y\331\270<\233\302\014;m)\310;O\002\222=X\0351=u\371:<U\2446\274%/\213\274\343v\026\275\247r\271=\332W\332<\241`\221\273\265s\231=\335:\313\274x\334\r\275\213\244\347:D)\245<\213\345P\275\237%M\275^\355F\274\017\253\205;\341\303\277\274=\221\343\275W\231f\275\367\354m<(}\252;\003\256\326=\272\255\205\275\200G\324\2743\017\276\274\314\205Z<\341\314K=\177\0337=\226\305\351\275\263\263\255\274\274\214E\275\343^\036\273I\307\\=\265\024\343=*\0240=|v@;\"mm\275;\n\235<U\312W\275\'\267<\275[\211E=\200\273\253\274\357\363\016\276q\344\371\274\226\336B;\267r\250<Q\311\214\2754O\242=T\234\347\275\371\203\203=I\366\255\274\344O>=\003\022\031=\213\232t\275\275H\272=j?\344\275x\207\363\274\323\277\356<\307\2657<\325R\372\273\270:\274<#\005\326=\233\021T\274!,\364\274\245@(\275t\227\020<\334\320\317\274.\233\210<\273\270z\275:\027\033\274j\177\232\274\311\"\244=\030\262\247\275g\025v\275\027(#=\363\202h=\te.\275\351_\277\275vH\277\274\234\341 <.\300+=\332\0317\275sG\357:\034T\227\275\275^Z<\302\264\302\275a\0249=\377\334\272\275>i\003>\264p\013>|\213Y\275\\\004\201=\231\335\010\275\232\263\310=|6\300<\241\r\277=\246\257\336\274Qg\262<\364a\213\275\222\300\"\275f2\233\275\322\202\244=\002|\276\275?Q\214=\037\234\35593\206\211=k_\203=_\224\311\274z\221I\275\370\314\266\275\006!(\274\007\306N<?g\306=\215z\241=W\211j=\na\327;\006\"\202\275\362\230\013\275\362\337-\276V\252m\275ix:\276\316\024{=\216l\"\275\"(\247<M\177)\275\333\025\235\275X\340\227\273U\022\307=\035\034\002<\324z\201\275)\242_=Ds!>\375KV\275EN\023>\230R\261<mc\210\274\230\010m=]\002\347\273\3408\n\275\204?\332\274\022^f=\014\010b=]\301\206\275\355I\001\272DJ\210=\256l\014\275\364\347\316\275\030-\r=f\304\267\275\350\203\351=\242\361\344;\235\257\357\273\224\366\353\275\353#a=\336@9\275\232x|\275\320\0040=+\271\310<\376\250\357\275\354\224\037=T\264\265\275C(\310<@\310\266=fP\337<\315\204\024\275\231R\005\2768\212\376<\314\204\031\274\254\344E\274\275@M\275G\022\231=\335\220\000\275*\253\304\275\000\361d\275bM\236=+\207\351=\355\"X\275Sy\221=\252>\005\274\264\333\003\276\327\255\321\274\223\374;\274\261\316\017<\346\217\260=\377g@\275\007\323\234\2756\261H\273ui\333\275L\"Z\275A\234\033\275\266\304\336\272Y\300\275\275,\344*\276\274\366\376<\261\021i\275\001\306\330:\240GR\274\366\035y\275\315b\330=\301x~<\375\251\362\274\0101\204=\177\346\257\275![N=\241DY=\207\314\325\274|K\017>T\205\310\275\351\006\201\2741\335\377\275\241=\220\275\250Kp\275\341z\320=\355\327\201;\233T[=\214i\021\275:i\017\275\350\027\236=f\331c\275UcX<\313\355e=\006\244\325=\306\t\346\274\3408C\274\246\277~=s\227m=6\277`\275\335\355\332=1\331L<\022\306B\274\345\277\006\275\037\333\373<\244\202\006;\221\3502\275\210\274\337\274\226\200i\275}\247V=\304\370I=\3678\037=\305\022\216<g*:\275\305%\223\275\2669\n\274\212\206\344\274\311\027\010\275\333\255\211\273\227\257\263\275\326\256\233<x\226\226\274\331\320\374<\374 \r\275j\337\035\276\351)\302=\377\206\351\274\002\364\376\273\0200\304<\347\004\003:\262/J\275\024\037\026==\272\227<qQ\005=\3104\235=\224\322\216\275\377\227<\275\240U\207\274\246C\035>\022\275&\2761\303\200\275\373\347\301<\261A\010<#J\361\274\031\366\317\275\345\020\231=\034\241\356=\272\nV\274\000\271\253\275g_\027\276\310*\250\275f\267\n\275\360\262\372<C\252\310:qt\213<.\003\036\276\016\007\302\275\235\327\331<\315\354\300\274BV\212<\245R==\261\357\020\275C\216\252=\372\026\220\274\232\217\020<*\014\252\2734\3139=\370O\227\274T\035k=\266g&\275\200\351\n=\365P \275\025x\360=\370\246\276\274\032\251\260\275H\332>=U\003\201<\216n\376\274@\204Y\2752N\245\274\314\034\311=c\217\326=\321\260\177=\371w\243=\017g$\275\233\267<\275\200\240|\275@5\374<m\210\252<\364\332\250\273\\\036\'\275EDp=\231\217\226\274\311\271\014\274Av\325\275\235#\007\275\306`\013\274y7.>b\3141\275\0018\210=\330\355\355\274g\321\201;Y\2260\275\364,\344=%\202(\275h\305\300\272\227\226\003\276xA\036<p\210\217=\220\242\270\273\016\324\305\275\321\342+\274\370\272\257=\306\033\030\275\323\314k<\331\331z=\245\230\265\273d0\213=\264o\214\274aFV<\005\241\221\274\327\t\031=\324\317b=\253\026y\275\334\033\245\274\215\'\373\275\027\362X=\242\367\274<r#\006>\373\037F\275\240\215\037\275\251\001\017>\344\334\221\274\236n\237=\215\331k=\373\364\364;\274l\352<\033\016\236<\013\021\235\275)\027\217\275\337O\326;\371\261\026\275\215\004\024\275\310\367a\275\013\343[=\372\342\265\274\231\305\363<=\234\006\275O\200\003\275\037*:\274\214\302v\273\317\220\2528\341\353\343\275\232\357\024\275-\201\277=\325\257\003\276p\321\035\275,\275R=\237\247\204\275\t\006\355\2745\351$>\317\246\204<\212u\215=\331y\240\274\345\246\277<\333\325G\275\030\226\210=et\265\275\273\353\335\274\212\256$\274\211\0145=\201KJ<\010|\357\275Q_\265<\316j\032\274\311\374\374\275\302[=\275\350KP<\322\342_=\330\271\331=\215E):(\032\241\275\'X\265\275\317_d\274|,\023\273\335z`=\035\234\231\274\214\224\311=\207\365#<\344\357\201\275\007(Q\274Pd\006=\331\260\223\275\260t\252<T\331\355\275\363\223\251\275<e\236\274\026\277T\275.\016j=\316L\274\275S\345\255\274\302\344\201\275\361\267\356\274\035\377f=\307up=\373\232\356\274\344\252\220\275\317&\370\274\205\225P\274~3\206\275\241U\233\275\263\207@=\223S\220=\017\226\270=\271e\217\275\274\350I<&\212\304=\316\340\200;v8\207\275x^=\275FS\302\275\263\357r\275\353_\214=x\241\242\275\226&\207\275\310\342\302\274&jP<t\036\232\275\005\3209=\243\\\n\275k\267\216\274T~P=\324D\250\274\332\223\345<r8\254\275\363\360\327<\350>\346\273m\251N\275p\374\263=\254[A:\177=\336\274\343F(<,\007\010\275<\006S\275=\007\324\274ln\353=\025D{=\360,\240\275C\246\024\275s\3056=\342\345\035\275\'\352o\275\350\007*<T1\220=b\354M\273\017\232\344\2746\031\016=\235X\205=s\320\350=\035\200\025\275\305\216\336\275X[\002>\337\020\214\273w\214\354\274\210\207\023=\3412\340=U\374\206\275{\244p\275\260\267\007\276\376\374\336<\243\230\005=\350\013\"=\302L\353\275\216\nv=V\274\275<fg\214\274o\260\347\273\207\365\353=\355\021O\276\346\353\"\275\000\233\205\275\232\371\201=oL\245<\250Ge\275\336\306\271=\232E\275=XN\240\275>g\357\275\303X\352\275D\235\237=\n\333\253\274K[\216=c\t\343\275\022\313g={\277\t=A~\203\275\212$\261<m\364E\275%\345\273\275>\024^\273i\364\312</)\037=\361W\213=\350(\242=l\277\352\275\311\355Z=\335\251i=|V\265<\002 d\275r\267\013<n~2\275:\013\222\274\254<\023=%R\253=\210\355\005\274\244\231\354\275ORU;\035\'X\274\304\013\362=$J\301<\246\201\324\274\265\030\255\275\213\357`=n.|=\327\003\037=\016E\337\274\006)^\275\0078^\275\022\002W=\001\025\263\274MA\014<K\212\232\274\366(\315\275PM\311<\200,\253=Wb\021=\376\312\325\274U\246|\275\321h^=\200Ym;7\377\\\275m/>\275&\220\204=\211b\207<\256x\212<\300\365\275\271*\253\\=E\314\005\275\033}\377:o\010\030\275?*.\274\311\007\240\275ua\206\275\016\205\014<\244\013 =\205\333\013\275\312\331\013=L\201\327\275\366S\324\2757`\307\274\202k\327=\237D\272;\314\024\177=a\3726\274\222\264\213;\213^\006\275\021X\337\274\211Z\250=\365\222\377;\255\275~\274\200\253/\273.\357\332\273\3034S=\317\002\355\274,\237{<\316\033\244<\036J\200=\260\372\261\274\016\r\326<D\270\356\274\003\245o\275mq\001\276$\311R\274\275\002\276<\341\017/=\262q\232\275\331\244\263\274\222X|;\212\024,\274\025\025 \2733\r\215\272\023T\372<\231^\215\275\000\372N=A\020\023=\224XT;\223\232\227\275\234\244\203\275-\037\243\274\271]G\274\013\211\264<\231\234R=\253\017\215\274\350\317\010=\267\335\000\275\245{\271<#\260a<\334\226#\275u\007\300<Q\2545\275\'\002\267<E\212\330<\230\355\270\273&\322\236=\203\r\271=\222\312\224\275\220\032\260;\"\006a\274\365{\262;\320r`;\026>)>\315e\356\274G\r\216={p\204=\356\322\372<\027\240\311<\014-,>\250E\006=\222\342G\275\254d!=\204K)>\034R\235=\037\314B\275\267N\317\273\332\354\036\275\376\315L<\205\343\371=\337f\374=!*\016=K\273\010\275\360\333L\276\235\"\263\275\217\243t=\336\312\301<Kp\264<\031\'n\275|\351\302;l(\005\275\276\376\000\275\256\334\205=\354\223\216<G\356\313<\300[e=\375\322\244=H\007\n\275\214\372\325\274\204\326E\275}d\271\275]\2761<\330\022\356<:\304\025\276\312kN\275\177-\251=h\234n:h>\002=5[\211={i\021\275\373\364\324\275#e\254=*\344\021\275\024\323\004>t\353\271\275\251r\033\276\'\211o=\332y\002=\003\321\014=\014;\322\275\256\371\031=Ud\020\275-\010\375<\207|l\274[&D\274\017\226\033;\310e;:\264\266\344\275v|==Ii\232<\231v\375\274\246\030\361\275\205+\004\274\256\206Y\275/$\332=#\322\247\274\350\350H\275\271\375j=\232\303\267\275A\007\230\275\321\267/=p\261E\276\236j:\275\026>\t\274t\377\307\274\002\371\207<\367\333\031\275\t\273O\275\005\244p;\243\211b=\233h\007\275\337\036\032=\204\353\237:\032\300\226=\000h\314\275?N\222\275g\034\334\275\205J\361<\2310T\275\347\250K=\3073\272<\224\345\235=J\307 \275\344Kz;\004r#\2756\231\306\275\200\204x=\277\314\315=}?\222<N\277\264\275\365\247\212\275\321\3315\275\207v\303=\020\215\304<T\343\022\275\302G\315<\034\354\234=\311\031\206\275x\276\'=\276\324L\275\314\267\211=0\264A\275=\345\372<#\010\014\275\354\303\306<:\247%\274)y\261\275ixk<\027v\222=\214\321\246\274/\244\320=\016\204\363<\nb\000=\256\353E=\275}\r>\326B\213\275\317\013\201\275o\024\022>s5\022\275\211\327\263\274\217\212D\275\245\325\311;\"$>\275o\026\232;r_\253=P\342\352\275%p\017=\245n\203\275\250E*\274\010\243E<\371~\003\275\277\214\261\274X/\260\274\210\307\244<v\260\306\2743\270\225\273\311\351T\2747\307l\273&K.\273t\263\n\275\342K?=\242\354\217\2757$:\274\355\360Z=\r\204\007\274AB\317<.B\332;\321\260-=\232\216\364\275\342\2064=fq1\275\277G\217\275\326UQ\274\272\315C=]\346\300;\353\244\232\274\256a\200=0\030\\<\245\241\010=1#\374\274:\267\343\274\310H\010<\203\366\242\275d>Y=2h\257=%\200\221;J\211\361\275\356Ou\275\252\270\270<\016\222\017=\353e\316\275B\273\212=\352\320\t\275o[\337=?E\256\275\263\t\303\274\037Sf;\200\303\013>0V\234<\231\027\333=\177\361n\274|\261\005=\241\201\223=9\355R=$!b=\227\356\004>\376V\3539\312./\275/\370p=\355\334v=hP\356<j\017\024\276\364\315^<\214\363\330<\265\2732\275\206i\304\273\024\277\316=;#\242<=]w\274\260|\235<\000\261\365\274\013J\232=\001\027\30297\255\000<\270\252\227\275\267i$;\013;\203\275\341@\001\276X\311n\275F\327\257\273\354\334\260=\273\270\335\275\026\202\221<\367\016\206=\255\277\021=\353T\273=\003\323\350<\240\347B=k\032\206\275\367\237?<\303\321\315;i\326\255\275\001\336\244=\216c\251=\227X\221\275\226]\206\275\377\262\005=}\301\316\275\'\375%\274\266\200\216=\253L\271<\336u4<b\000\210\275HyG=\316xr\275\020\222\311\274\001gk<\363G\200:\260;\035=]\220\216\275EF\266\273\254\236\023=\365\272G\275z\0215\275\2635@\275\200\254y\274\310\353\372\272c\374\211=a\322\205\275ku\033\275\000?\026>-t<\276Gp\353\273\243\233\346\275D\216\364=\355\316-\275C\277>\27605-\275\327\n\372\274L\226\363\274\332\323\036\274~\256\344\27579\r:\355 =\274o|Z=<\270)\274\236\204)\275\331?r=\344\272\200=\020y\215\274\353\237Z\274\243\322\t\275\205W\201<\256\312\266\275\371\256u=!\343\026<\202qX\275\223\342i;M[\013\276\352\007\026=\200\303\213=\\w \275\245\324\034=u\276\365\275m\324\003\275\033\243A\271\022\326\215=M\027i=\323\342\216\275\321\312\227\275\310\321\223=\034\357\273\273fh\\\273S;\354\275K\"\251<\334\335Y\275\363\340\265\275q+\255<\327\201\177\275\322\330v=\206\251\267\273\353\310n=1\322\251<\327\010\223\2750{\215<\351\300\322\275c\000P\2759\337m\275g\241\350\275\345AV=\001\366\013>4\333W\275#\216\324<\366v\253\275\033T\235\275_\350\220=\321t\231\274\n\311\330\275\000\270\243\275\345\037\343\274\345&\277;\253\327\321\275\017\247l\275\313@\227\275H\256\233=\370\253\303\2747\2401=\327\342:=W\001:\275\223\266m={5\023=Nj\210\274\016%Y=\237\257\260\275E\206\r=\206\303\241\275\226_B=\236\204\352=U\327\017\275\234\177\300\274\366\317\357=\310e\317<\332\257z\275\363\257x;\231E\317\274+\352\335\274\240\240\267\273i\0000\275\213s\240\274\333\3142=\021a\017\275\262\214\025\275f\302\327:\311P\253\2728\341\210\275\226\231\321\275\377d\315=-X\212\275c\030\213=<Q\017=\n7\237\275\033K\251\275\007\035\313=\355i\033;`\222\204\275\337\010x=\326N\017>\t\304.=\315\343\005=\343\314\016\274\230`\333\275\310\320G<\212\030\215\275\3376\210<\344\t9=b\276\347<\235\300\213=\365\337\t\276H\201\274\274\212\261\205<e:\201\274\021\266\207=\366\310\023\275\210T\r=\026\320\251;\364\334\034=\212K\363<y\274\326\275\rX\363<\317C_=\013\022\217\274\231\020y=\n^6\274f\002\'=_g\322=\"sd\275\256\2666<\022\225\031\275\006\374\317\274h\343\r=\223\310\332=\362!\324<\270\300\007>u\210\260<C\340J\275\257\365\022\275\303Z\352\275\263\331\201\275L\207\237<\235\374\237\275\026\3622\275E:8=\357\027\220\275\266\267\300\274\314N\306<UC\344\274\017T\357<]!S\2673\331\301\273\260cQ>\251g8\275\204M*\274\013\257\330\274\177\274\261<T\266\336<J\035(=\021[\210\274\204\233\272\275a`\241<\003}\027<{\037\036<\206\252\225\275\226\266[\275\360\210\363;\302\256\343=\272\317\211\275\253\233\200\273\252\030\200\273 \367\307\274\261\207x\275y\010%\275:)2=lw.\275\267\313\362\274\365\"\220\2759X\364\274p\315\221\273\201j&;\013\203X=;\275\004<Y6\323\275\237\376\260=\345\245B\275\010\323\006>\230\214\'=\366,\225\275\032-\350=\352\310\241\274\235\336\234=\353DP=m}\220=%Q\273\2742\332\034<\334\324\347=\231\251\261<\346\267\205\274\224D+=4\"\244\275\376t!=u\\&=\340\220\260\275\275\020t<q\004\005=6\351\315=)jP=\334\375\327=\233W\017=\233z\230\275\305\2720\275\2036\002>\3207D=\337\342\231\275\034\321M=\033I)=\271\251+=O\321\325\275\003Ua=yg\005\274\017\364\331\275q\013\303=\325a\024\276\316\313\264=\233}\363;\376P:=\2250\032=\277V\035=H\310#<U\250\303\274N\022]=\312f\'\275b\236\345=\013qW=\216\037]\275\305\211\352<\033\246\303<\345\"\013\274E%\246\274\246u{=\017\333a<\025\3316\274t\373|\275_\210\306=\233C\233;\337N,\275J\347\010=\215\376d=\247\013\242=b\021\232<.\213D=\005\\8\275\236\234\301=\226\"\274=\001)\006=\\\271\335=\335\\_=w\354\032;2\242`<\215t.=\024\260\315;\326\347P9\030\351\300\275:b\017=\256i\341=\2540\230<\240\352\327\275\002k\033\275\251\260_=!)\335=\200aL<\235\272A=\3266\001=\201\005.=*@\204\274\022S\372\273\010\224k:*\260+\275\303S/=\253TU<\277\322\241\274\223\007k;u\314\221<\332_e>z\243\212;\301\371\227=\300(,\275|\207\316\275\034&\261=\3716\263=\036\326M\274|\216}\274\345\314%=U\327\314=RY\263\274n\301\"=\233t\271\274<`\241\275\203\235\372<\214\024\227\275\030\037\200<Pp\000\275s\220\273=\332\312q\275\002\225\032\275J[\266<Ql\202=\331\037\021\275\322hc=a\324[=,\037\275\274.c&=\024\206E=\223\tq\275/\r\242\274TV\374=\366Y\305\275Ec\340=O_\246\275\035\341\036\275\241\227\360<\376{\023=\320.U<i\006\257=\345F\207=\377f\300=T\276[<7\221\021\275\214g\337<\346\351\334<I\005\r\275^)\310\275f\327\271=\022\031Q=6k\247\275\223\312)\276?U\304;\217\263W\273\242\210a\275\243\241\240\275\364d\242=>\306Q=V\361\254=\3769,=#LL\273\254l\260\274\372\363\001=\007\2005\275\305\376J\274\035\302r8v\273\223\275q-\221=\244\273.<b\3470\275.\336Z=i*\201\275sM\300\275\252\037\266\274L\2625\275\242\241\225\273yO\203=A%-\275\r\332\212\275/a\021=Q\316\013\276\021D\034\274*\0226<\242!/=\372\342E\273mQ\375<\253W\327<(Z\367=yv\237\274\2504\347\275\033\332A=Cq\361=\013\315\230\275\231\317\227\273\375^$\275\341\243\207\275\273\006\357\275\231Dg=\tZ]<\030\327\'\275\272\363\237\275[\300&\276\370\177\314\273\344\216\377<w\231\307\273A\365\243=\334\336\342<\033.\224=\001\017\203=\235\\\010>\253h\317\273>\365Z\275\211<\250<Nc\301<O\354\235\275i1\202=V\257\265=XiK=\356\240\236\272\r\225\375<PA-=0\"\213\275\033\005\255<\202\204\217\273\240\254L<H\2077=\036\231_=o\336\016;$,o\275\300\324P=T\016r=<\373\":\205\372\341=\007\225\304:\213d\332=\333>i<\2252(<\222I\200\275\243\336\243\275:\363*\276\tm\221=\251G\003\275\207 \301\275\225\242\267<\t\310\312\273\325\367\311\275\n)\214\274e:J\275\271\000\254\274\342\223\371\2743\207\261\275+\224[=p`\200=n\230\206=\214&\255\274\"F)\275S\354\337\275\324\003U=Pd\276\274\336P\010\275n\231\232\275f7*=\325\261\243=\014|U\275zGf=\241\312C\275\016\037\243<\005#1=\212\315\213\275\246\026\004=\337\300?\2755s\003>\226\022q=\212\2104\275y\253n=\220\026\256\275\201/\020=\356i7=2X\217\275\027\215A=\333~\035;2\224\007\276c\001\337;t\023\005=\345\007p\275\276\327\302\275\313\272\237\274\277\256\312<4\355\223<%[V\274#\265\340=\215\344.\276\007\367\236\274\223\353\340=\370S1=u\325>\275\030z\030=\314\343.\275\225\352\357<\\\223\025=\364\247z=\357\240\276<e!\225\274\234]\003\275\215\036\031=\247\210\210\274\347\214\222=[\270\251=c:\272<\034\253Q\275\210\021\272=`\343\224<3\223\n>7\263\253\274\302_7\275fL\327\275\206o\214=\261\200\333\2745\004\223\275\244\267\212<_\366\317\274\310IS\275\2071`\275V\010\036\275\376\375\274\275\245t\242\275\322\334B\274\334\263^\274\213\275,<t\006\264\274$\016I=\260\0372>\375\216\207<\324\ny\273\307\303\231\274\2030\371<\224U\n\275\224\351g\275\'\335\267\273\3309S<\033t\323\274\267\356G\275\010\277\253\274\214\341\010;H\264K<\2358\210\274_\021\254=\262\014\263<\360\277\016\275U\312^\275\3527*=|g\037>\237\351J\274u\262e\275Fyn\275\347\007]\275Z\033\357\274\350f\244=\224\\\225\274\014\313\267\274\321 \303=g\326\205\274\243\212\346\274)\343/<\006Ny\274EB\317\275\202k\365\275\206\261\250\275l\235\220<]d\344=E\240\260\275;;\312=\302\353\227\2742`h\275\211\232\023=\004\331\010\275\366\036\236\275\347c\004>\205\033\244\274d\324\326\275\330\200\272<^\226\177=P\247U\275m\262\031:|bE\274_}\256=\217\341\304=S\231\376\274&I\020=\366\236\031=\202\356\203=J\233\020=\tJ\311\273WT\252:\'\235\247\275f\021\236\275f+\377;.91<\377}\307<\246Cp\275T\005\306<\232-\032=\375f\227\275J\001\r<\245\251\244\275\177\365H=\301{x\273\252\277X;\200\213i\275\245\2153>\302\265\230=*\020.:\235z\355<\355>r=\257F\014\275\002K\264\275\365\316\n>W\t\030\276\226\236\242<F\210\244\274j\375\001=\217\307w\275X\315\257<V\3522\274\262Xz\275\024\260\201=\272S\021=\333\024u\275\360]\334\273\025\342\033\274\266TQ=E\332\302=c\007\332:kQ\265\275n\2425\275\260\017N=;\236\336\274\r\361\315\275\334\033\376\275\026w\371=\276\266<\275\243\3455\275\324\025B8\324#\252=\220\236\324=Z\320\226=\331\245\006\275\330\025\267\274\036Eg\275\327\202\256<[\272L=\235\267z=\300T-\272\307\213\271;m\264);\030b\231<\375\227h\274s\304Q<\206\021\350\275Ed(=\336\356\236\275\2344\374;Ll.=\346\322N<1\274\002=O7\221=oQ\014=RW\234\273\001\273\360<c!@<\242\214-=\\?\256=\340\ts\275\306=\307<\270\203*\27493\271\275\312\301\272\274\213\017\205\274\321\200\'\276\310k\227\274WA\n\275\306\266\236<\366(\016\275\340\202\220<\232 -\275\333e\026\276\354\317\223\275#*\315=}Gy=}\004\314\273h\026\210;~\345\027=s^\360<;I\262\273Ui)\275\246\003\343=2\304U;\265,n={\362\254\275Y\303J\274.\034\311\274\263L\t;>;\212\273\347\350T=\300]\343<\206\325a=\360\255Z\273Y\031G\275x\227\342<\314\232\006\275f+\314=M\033L\274\"\234\305\273\371\0267\275f\006\371\274\302\342\036<\010\0374\275\017\264\256=V\260\313=\241\315\013\275\247QN<\226\332\255\2750]d\275\222%\211;\006\317\026\276}d\247\275&\027Y\272\373!\274<\306,\367\275\231\004\227=\323\014\'\274#\260\224\275C9\"=-\274\"\275`\311S=\324\370^\275H[\267\274&\263\n\276s\006\204<\353b\027\276b\210\212<\220\355\223=QR\325\275jV\316\274\236\034\334\275\202Y\273\273\036\351W=\257\360\246\274r\372\223\274\301\001\321=<\234\310\274\346d}=\304d\257\275\034)l\274\240?\250=y\223\"\276\006m\231=z\3347=\337L\357=\035\3130;\314\234\"\275@\257\270<\254\251)=\225l\302\275\026$\367<\220,\235\275u\267>\275\337\002\210\275\336m\327=OYV\275Vz\005\275y\263\251\275\255\377\263\275\367\317\207=,J>\271\351\301\"\275h`\203\275\201+\352\275\220\311\241=\202\003\257=\205\213&\27512\234=\217\031\213=\366>\016=\375\367\346\274\023N\315=\300/0<\304\240\266\274\244\037\344\275PS\237=\217ss\275l:\337\274L\236\026=H\241\202<\330\314\241\274\233\340t\275\027m\217=\2732\227=\332\245\257<)\335\230<\231\226\233\275\022\357X\275\303N\214\274\374\007,=\000F\216\274\212\242\233=\'#\235=\202&\220\275\272W\315<^\"N\274\305U5=\372 \210\274b\214\217\274<h\236;\030g\217<\241\267&\272\000i\230=)\240\230=S/U=\312\177\035=_\262\202=\237\263\t\274s-\326=\244\363q<\t\027\326=\346)\332=l6#\275H\266\322;<\212\t\274$\340\276<rC\302<\202\235\221=\223\336d\275\361_#=\226\324*\275\227\033\343;yK\212<\266\245\243<\250So\274\264wO=\343C\026=\322\343\346\275\020d\030\275\367\271C\275&\337x\275@\177\207=\216|\236\274\374\332#=\346\336f<N\355i<K\304\220=&\317\211\275\313\220==KN\347:[Z\306\274\023\337w\275\256\224\246\2750z\250\275\302C\037\274\252\207>=\332\336&\276y\246\231\275\251\357\225\2755\357\240\275\035\203\345<\300d\237<c\245\276\275\246\325\216<7\275\t=\302\2574\275\364\264+=^\372o=\3056b\273Y\320\026<K\342\305\275\262\202G=\214\246Q=I>p<\244\212\343<\004UW=fe\304\275\310\346\033\273\020\014\323<ifK<Tr\245\274p\211\255= \361\371\274\217\302\016\276l\374\214=G\242\271\275b4!;:\314\273\275N\254\317<\270~G<\212\241\322=\325\037{\272\324aI\275\005\345\211\275l\234\023=\317u\000\276g\256\233\274\034n\202\275\0066\221\274\360;\222<\005\230w\274\n+\343=\202C\357\275\360\356\216\275\366\351\247\275\332\r\377\275\313/\223<\362B[=\362\341\264=\351\022_=\264\002\351\275\273\'\031\275HJ\206<\315\302!=;\013\025\274\274e\251\275\'\255\227=\260-\200\275\236\021\307\275\371\030F\275\303\005\335\275c\277\202\274\026T\313\2748\225*;\202~\022\274lz\246<\354O!\275\035\013\276\274\335\014\235\275A\"\265\274\300\025\006\275\251?\237\275y\220\345\274qM\254=K\264\031\275\223\371\314=HF \275\014\016\341\274D\031:=\244(\301;\360\\\254\275\256P\365\275\034K\372\274)\025\373\273\222\343I\275\354(.=dG\201\27579\202\275\341\273s<\'\251\241\275\235#\332=\246\372u<\033\016\202\275\202,]=\3529\005\273\264D\340\275\207\354\025=pl\315=@\237\240\274\300v\213\275(/\200=A\277\'\274y\322\224\274G\023\327<Gu\017>\"\326\331=\360\002\244\272\312T\023=\317\264*\274\324!\201=\256\n\237\275\037C\004\27309\231\275\377\014\271=f\302\314=u\371\200=|\026\211=p\274\333;t\027\240\275U\274\307=\005_\237= 9\000\274E\014\374<\341\325\235\275\335?\202=d\3313=\244\323#\2745\004\330\274Qv\374\275\330\206\037=@^\313=\2137\271<= \270\273\334|~\274\017{v\275\217\027\355=\272\222\343\274_\327\025=\300$\307\274\353\222\217\273\212E\262\275\026\000]\273:\310\007=\202\3265=x\2213\275\373<t;1\275\205\275r\211\243\274\355\251\204=<&\340\273\363\021M>\256\006\254=\247\001P\275\004\330\246=\004\261\206\274:\233\212=\257f\262;\252\346\362<_2F<=.\362;Q\016\004>Y\301\346\275~[\275=\201\262\363\274D\341W\275\216\340\006=I\"\273\275o\226\245=\315\005)>\262\247\230=\242\340c<\276;\307=\205c\322<^\244c=\237\214\t=G\367\307=q\374=\274c\203.\275\202\344L\275{C\344<\004\3552\274\032\372}\274\321v\016\274e\tB<7\315&\275\232<\234<\345\310\201=\215>\210\275\031\212\217\275\223\005\243\275\013*\236=\201\217\245=\033\200\033;`\217\207=\211\274m\275\273\037\235<\373I\031\275\365W\000>N6\316=\257\317\001<\305\007J=\335\327\003\275x\017a\274\034\2660\275J\2221<\343x5=\3737;\274\311\257=\273Y\006\206=8\220\010>AT\236\275*a\022=g\246\236=P\212K=\240$\205=\254\346|=\214-\343\274\236\022\242<\320\303|\275L\346\240\275^6B\275\212\256\213=9\353%\275\2578=>G\251g\275\310L\003\274q\261S\275(YG\275X\217N=z\327\234\275\3303\340\273\306qz\275W\244!>\3724r\275\313\354\005\276\371\314\253=[P\246\275G\207Z=\343\353V\275O\204\034={\300\341\274%\006\323\275\345\317\320\275\211L\241\275\372-\275<\232\205;=\035\211\216\271I\026\236<&\007\316\275\215\366\223\2759\272x=\261R`\275\347\310\227<$\226n\275+9\216\274Ur\352=\351Y\\\275\022K\347=\324\372\244\275\314\177\257=\214rT\275\t\317\224\274\306\356\034\275\204l\223;+\216^\272Yp\366<V\031\n=\371\\\234;\030x\321\274\301w3\275\302\206\032\276\242\212\375=4e\3279&DK;\234\377\001=\177\356\244:\326\020\337\273o#\227<\2364P;s|\340\275\247\272\233\274\366\267\374;\202\330(\275OB\355\274z,\277=\337\r\267\273Y\353\017;1\235T\275\330X\223\274\tr\216\275\365\243\262\274\262)\240=\002\264\177=6\366\372\275)\356\200\275\367\263\376\274i\231\332:\244\205k\275\303\'b\274g\300\205=>\317\005\275nN\336\275\330~\343;\036}p=\240L\226\275\257\216^\275\325\323~=\352\247\357\275\270\325\344=\217\264\004=\\\376*=\302\334\212\275\2537&= :,\275&\341i\274\376@#\275\205R8==\352\253\275z~;\275\002\321\002=\006\324\037\275\203/]\274\244\023\026=u\360\253=\242+\236\275Z-\337<\03606=\262@\210\275\325\240\301<\320\035\205\275\324\355s\274\334\023\240\275`\371y=\373\"\016\275|!\256\273\334]_<]6z=\241\202\350<\244\274\243\274\231\025\021=\363[\010\274\231\303x<H\210\372\2741!G\275P\237 <Ze\377\27405\276\274\324\264\213\275\217\311\220=>\342\210=[\210\252<\272\r7=\244\236\363\275`\362\006=\343i\026\275\020\'\322==~\240\274\263\310\345<3\001\216=0\255y\275\260G\2069\374\275\217\275@h\225=\255\211g\274d\214.\275\243O\310\275\3147\306\275v\001\224\273\276\225\350\275\341\024j\274\000Tm\273f\275d\275\351\363.\275\204\331G\275?]\216=\010\353\035\275S\346\251\273\361\333\'=,O\243\274\345\230\200\275\027\300\311=\020\260\262=x\226R>\0071\014\275\3131\305=\342r\327\275r\355_\275\201Y\277<v\377\262<{R\235\272v\301\274\275\275\030\370<\301\367\321\274\305m:\270-\317\014=kQ8=\024Q\231\275)\035^\275\027\261\236<\016\030\025<\354\036\231\275/\303T\275;\372\024<\007\230\300\275[\237\214\275\211\361\237\275\307*\213\275\365\215\004=\312\006\345<|\322\002\275\263v(=U\273\213\274\274\246\377=\255#\003\274}\201\201\275\335\r)\275\201g%\275\327A\034\2751\376\356\274}?\236\274O\335\266\274\317!\305\2751\343\320\275\3147\201=\340\351\261\274\334\031\272\275\351y\215<\244\273/\274\"\032\000=\302\366\033\275M\354J\274\322\374\343\275\307&\177=\027\201\007=m\237\267\274\352\245\361;\341\2052\275+\357B\273N-\214=\025\332B\275\246\260\200\273m\306F\275\334\264@\275\035\375\307\274\373\326\307\275\233v\r<1\340;\275\023H\214=]\224Q;.%\213=~\364\240;\336\212\326\274\303\374\245=\324d\324:W\264\216\275\207\232\317;\223\315!\275\220\256\001\275\271C\264=\350X!\276+\265\034=SW\210=E\276\246=\316\252\325\274\335\202\274<\355\'8<\323\242\366=z\337\333<\220Z\035\275\\\335j=\362\275\005<\376\251\'\276\006( >T\307\\\275\305\251\227\274\316\264v\275A|\252\274\001\032\372<\365\000\241\275\206\255\221\275\250\212\303=\347\261\212=H u=\323Y\003<\370\237\366\275%\363\200\2731\265\257\275$\320}=\216\030,=8\322Y=\361/\226\273\001\245\244=\356\220\224<\001\255\215<\005\262\317=^\276.\2750\033\237\275\335h\264=\037|\310=_@\305\275\363%n\274\251p\302<h\300\343:; o;\277~]\275\316\270\202\274\021\320\211\275\206\363\000=|\000\031\275dB\200<\005\240\311=\25599=\274$\270<0\317\216;\322\000\300=\225Sc\275\376\r\203\275\20292=\354\303\214\275\200dh\275\214\021\244\274\302\313\005=\313/I\275\343\374\301\2756\351v=G\376\016\275\257\307`\275UL\203\275\261\373\224\275\350\020\321\267\214\0160\272\030j\270<\256\013\370\2745\035(=j\006\200=\246\307\233={\\\n\274\206\254\370<\257\244\363\273\336\373\023<\205\206{:\353\026T=\215x\237=\304T\234=\326\224\372;\315\350`\274\341\235\235;j\373h\275\241\362\001\276<\237\251<\205a\206=-\345\325=\263\337\004<\343\354\233=\026\202e\273MX\025\275\233\347\201\275\353\216P\275\177\312\r=\374\213\022=\322\250\006=\214\025\017=\304A-\274\342\266\351=B\030\333<\001\246\352:\266\377\200;\346\207\321<M\221\001\276?\362,\275\207\325\027\275\252\014&=.=\315<\266\030\242<#\255\261\273_\332-\275,7\344\275\'U&\275M\366\337\275\021/.\275\270z\237=\212D.<\177\342\023\274Yi\210\275\034\036\216<\027\365 =\233\350\320=A\231\215\275\241\347\036=\321d\007>\'\277\251\274\333\210\325=P\217!\275\323r\"\275~z\235\275\317\231\003\275\227\025\365<+}\304\275\317\204\225\275M@\231\275\275\371\330\273\251wL\275\264\214\016\275\247\277\024<\216q\254=ZUD\275\250j\266=\032\3046<\032\310\034>hS\317\274\306&\220<\274\022\025=\247\315\013=\277\375\005\274\016;-=\325F\250=\305\360\367=c+\240\274\367\305\213<F\027U;\023\"%\275\270\211\211<\345c\021=+\036\033\275\033\225\227=\026\273\366\274\263|\360:\350E3\275\177[>\273\0046+\275\366\332\242=\206\345\251<_\037\322<\301\300\021<\235\035\337\275q\244\005\276\277BZ=\241~%>\200\372u=\323\221<=E\373\246=-\250\031\276S*\001\276\360Q\270<\2200\237;\231\325\014=\345\266\331\274\333\227\243\275\301\n\2109L]\210=3\263\027=\312\200\004\275\271\345\212\273z\031\250\274\340\250\013\274\223q\351\271b \262=\005\317l<\306\340H:\245\205\032=\014\236\265\275C\266/>_\263\037=\025;\245=d$=\275\245\332\223\275\024\242T\276\263\372\240\274\001\200:\274\033\317\273\275\362\017\032\275\267R\202=,@\240=\007\377\253==\353\300\274\374w\250=\362$\235\274\247\206\314\275 \004\221<}\351:=\221MQ=r\355Q=h\242\243\275U)\035=Mf\222<\353\225X\275\202D\367=K\234\005\274g-\026>+@\003\275B3e<$\327\240<\203=0\275\323\315\032<\301\240\272\273`\315\300\274\013\376\206\2751\345\236\275[gk\274xW\204\275\303\252%\276\237RY=\277\277\244\274c\216\243<\227\204\034\2755Z1\273{\315d\275\216\320x<\311\020\225=E\3131\275\203\224\270=\n)\343<\2324\027\275\267]\272=\036)\264=*L\324;\3663\233\275\'((\275M\301-= \031\221<h45\275zC\341=\266)R\273\335\\\235;\313\320\204\274\223\240\327\275\365\242\032<\030\017\t\276\020\243\336\274+AE\275\255^\t=9\213B=[\035o=\367^\026\274\036\352\004>-\354\366<\021\246\273=r/-\275:\347\350\274NQ\360<\034\264\354<C\356-\276\331\324\245<:\024V<\247\312\037\275\016\332h<AO\311\274\277\316\222\275lM\r\276\007+\262=\235Q\t\275\277\237\236=\r\372\323\274]T\005=\240\364\030\276\366\310\244<\242\351b\2755\352\303\275\213g\023\276\362\201w=\266\221\260<4\033\340<Q\233f=\357l\326\274z\224]\274\317\244\233\2750>\001\276\211\'\210\275\362\344\033\275\354G#\274id\200=\275\310m\274^\235\242<\275C\264=pN\210\2705\223\215:\026+\001=\204w|:;%\177=\tD\230\274\014\nr=\234\3110\2740+\322\274\240\244\024\276 8N=!\374\037\275\220h\262<\257)\211<g\241\275\274\333\223\016;\301\336\265=\266j\231=\330\257t\275\2612\317\274\302T\264\275\256\247\370\274\3751\237\274\2543\262\275\347W\233=G\346\245=\030^<\2744\270p\275g\210\337=\241a>\274\264;T=\242:u\274\252\334\331;\236*q\274xd*\275\036\315b\274#~\202\274\014D\331<\024\025\235<+\342\304\275\366\344p\275\217P|\275\033y\234\275RM\215;\177tt;\264\246_\275h\261\342;\024Dl=\210\017>=\350\234q\275\306\r|<\010\354\372<Z\272e\275s\302z\274\367\335\017=\025,\013\275\251\016\316\275\263Q\301<?\362\r\274\350\017}\275\247\374u\275\272\234\301\275\013\026\322=\037\235\243=5\300\251\275\376\246\000\275G\320A\273\023&\277=2nH\275\021\275\"\275\324\255\214\275\276\255\314\275\n\326\226\274\315\315q;#\355p=\234<_\274fd5=\"\261r=\033\251T\274HUO<\313E\271<\227\276\234\2735\356\336\274QN\332\275\016R\230\273\004k\031\2750\254\205\275\371W\002\275hND\275\006\227j;16\345<p\376\335=\203~\235= \035A<\310C\232=\370\241\271<e}?<\210\323\013\275\315\n\002=\034V\007\276\333\023\201=n\363\372\274\353LH=o\016\001\274\360\204o;\375`K\275\204\206\230=\252\'\322=\177\n\336\274\000\020\302=\2131\336<\210\205o\273b1\333=\316*H\275\212\210\204=\000\262h\274\340r\301\275\363\331\210\275\206\204\275\275\017\234\017=fw&\275)\262\013\275Y\373\327=;\016[\275\016\215,\275\263&~=6\026z=\323\360\270\275j\363|=\207}\254\275\326)A\276\236\r\350;\310.\254\275\214Z\031\272\336q\010\273\273d\325\275\254\320\366=\333\254\300;:.\020>w\264\317\275\r\006\375\275f\rT=\225\272+=\002M\210=N\340d\274Xt\237;A\274u=\260=<=\370\001\371\2745\247\206\275\010\214t=<\tP<s\301\300\274\214\257\273;\377\306B\273\356\205.\275\277\267&=b\315\262=\221^\200=\262\331\337\274\367T\033=\265\351\251\275\024c(\2751:\345:Yg\204=\177\316\027\275\220\0012=o\242\247\275cR\\\275\237S$<\360\362\004\276\006\264\236=9%-=\272\251X<\265\013b=\232\242\232=\272\325\347=\3356g=\022;\310=\324\307i;\341C\r<\332\254\210\274a\211\224\275\253\257\261\275\354\245\310=\266\003\345\275\312\352W\273N\204\341\273\263h\006=j\342;=\325\373\340=,\023\251\274\226\214\362;\260\017(\275<LO<\213\025\225=\017(\260\275\336n\261\274D\216\236<\212-\'=\323;\315;K\036\213\275H\262\235\274u\230\335<\311m\002\276\301\231a;\001\353*>$\364\203<g\327-<{?\335\274\007W2\275\303I\343\274\367\332\032\276\234\326\210\274\2305V=\014~\"\2767N\214\275\266\262\003>wn\177\273\271xD={t\321\274\245\220\275\274\357s\200=,\225o=\244\177\206\275\247\241\213<#\224\004\275\236V&\276\016{\220<c\312\037=e\211\363<\327b9<^\375D\275\343\3379\275\275\303\244=\251\262\232\275\3141\260<\362\337l\275\030{\346<\n\001\330<\264`\024\275h5\251=\324\337\316\275\026N\325;\314\253\022\276Y\362\257=\366\305\333\275 \367R\274p]\036\275\304b\233\274\031\326\361\275\323g\370\274m\301\323\274\277t^\274L/\226<w\001\022\275\r\226\301\275\334\273\242=\245Z\301<\\T2\274\207\017\236\275~Gn<\300(N=\331#\354=3\230\273=\010\322\231\2757\311$=\032)y=\252It\275\315r\341\274_9\036=T\"\'\274V\213\224\275C\004\242\275K\252\223;\354{Y<\236\204J\275\315\221\'=\341\031\274\2744\215,>c\251\022\276\326\003^<\214\240\221;N\246\346<q)L\273\367\237\313\274\003\373\361\275\2565\332=\033S\014\274`\330\t\276\317^I=]S\352<B|u=\007\323\363=\337\213\207=\257\243\016=\027\362\210\275s\227>=\031\243\025\274LpS\275\377\014f=;\317L=\212\020C\275\004\252\332=\230H\307\274]\"\261\275[\323?=\303qw=k\"\344\273i\362\211\275\331`\354<\225\2703=Z\031\036\275l\333\203\275\266\243\344;\201\320\273=(\030]\275\324b}\275\234\007\r\2742\"\333\275m[%\275\273_V=?\242\036<\304\321\243=\036\360\355;IM\004\275\356\327\207\273\030\327\244<\214\351\322\273\332+\242=b\211r<u\322\210;\247$\260=f\024\355\274\236M\256\273\\\345\306=\203\254\020\274`f\273<\027\227H=\301*\235<\225\'1\275\323>\202=4++\275.\020R\275\234`#\275\204\260\024>z\022C\273\377\335\031>\237\211\330\275<J\006=\035\226\315\275\330\216\010>Gl\002=f\213@\274;\230\237\273\tFA\275F11\275\030\005H\275,R&=\376\337\255<\324\375\000=Z}\242\275\352\327\034\275N\035X=\n\224\204\274 e\304=\0140\276=\3533\201\275\376\363\007>j\030O=m\003\316=\034!\225\275\007\350\007>\224\243\032\275\351\222j<\233\305\240=<R\237\275\370\312\020\275\322\250M\2742\'\333\274\225\024k\274\275\343\037<\261g\210\275\250\370\342<\205y\277:\256\247\204\275\210\033M\273\226\026\232\275\270e)\275\256\240\347<\216\370\230<\324\261\334\274Wto\275\001B3\275\360\357W\274g<Q=\267\362{<\235\262u\275\207:\251\2744#\222=s]X\275P\233{\275\375;*;\017\204\025>8&\235\275\260.~=\265H\207;fT\332<R\2135=\333\032\300=\371CC=\313\362\205\275\207\330\033=\305\223\344=\300\206\330\275\274q\202\275s>\253=s(\200\275\2024<\274T\343\024\275g\317\262\275\244Vy\275GEU\274U\351\034\275\r\t\265\275^\340\237<b\345\373=\241\361\343=\006\031\253=\210\036\034\2759[\004\275D\024\t=j\017\202=\001$\006\274<%)\275sW~\273\302\345/\275\22174=-A\246\273\246\266\356\274\230H\021<\004Gp<:\355x=\033o\207=\207\252\305\274C\266~;\275%\300=B,0<8(]\275\023\331W=9\340N\275E\006L=A\200V\274(\227`;*\364\000;\341\307\036<\270!L\274&\210\35698Z[\275\320\037\010\275\372\342\240=7_\037:.\275\236\275,\323\024<\210\265\000\274\216E\022;\347b\261\274\006\350d=\373\323d\275\272\220N\275\227\2231=\275()<\313\275<\274F\t\304=\037i\272<S\347`=|\237w\275\034\244i<^;.\275\277\371\270\275\213\206\020>\323\377\337:2\311 =\000l2=mH(\275\372zd=\177\300\365:r.\242\275\213m\270\274i\221\313\270tz\r=V\020\200=\246s\251<\341wW=y\211:=+\327\002\276\375q$>\227\177\275=\3503I\275\2362*;5\035?=c\2051=m\232\377\274\223\016/=qQ\313=\020\356\266\275\357\274\273=>\276\311=\n?\261\274\236\360\206\275c\263\223\274}jG=\226\247\212\275\347~C\274#19\272\333\304C\275lq\376=\264W\266<_\n\226<{\313\233\275J +=\001Y\300\275\031\250\262\275\010eq\2753\227\275\275\351?\313\274\002\036\300=\215\216\317\274\243\007\333\275g\336\232\275\277\214\314=\n3\005=\035\212\277<\310^ \274\026\330\016>b\256\313<\345\352T\275\025`\200=\313\332\220=\226W\364<,N\215\274\3623h\274\t\277\253=r\243\036=\327\220\002=Nq\207\274\013\304\231:\212\021\356=\247U}<\023\314\360<|\016u\274po\365\274\000\303\221=G\270e\275y\250\241\273\037j\204\275\343*\207\273\266R\034=\347\276\256=\327+\251\273~\275/\274R!\253:e\242\346\274,\266p\275a\034|\275G\255 <\353s\324\274\322i\236<\241\247\337\273\267\033j\275];A=\265\263\031\276H\016\264\275\204y\000\275r\016p=h\223\215=,\222\007\275\307\241\327;\2214\312=\245\324\244\272R\204\004>d\310T=\224\220\230=\271/c\274\035s\213\275?\376\275\2755\377\271\274HM\243\274\263\022\212=,.s=d\361\363;r\031;=h\230\025=\241h\201=\335\203\027>\365\236\365<\372\371R=\265\213\206=\311\354]=t\004\200<\341\001\031<\341e7=\222\255\312;\304\013\346\274\377\037\231=\021\243v\273\235D7=%@\275\2755u-\274`\272}=\317P\340=J\345\022<`wf=2\267\207\274\220#7\275\014R\023\2758B\000=\333u?\274\326\"\221\275\007\246\314\271\270\365t\275Z\204K=\205m/=\206\316\347\275\003\207W=\017\363\220<\261\333N\274\363\301\301;\200\211K\275\247@\234\275\371\2375\275\311\034\370\274%\375\021;\356-c=\224x\330<\355\"z=\253d\'<$2\037\275\'r\255\275\372\366\224;\267\375\326\275*\210\241\274\'\034:\275p,\244=\031WC>\262T\227\274\216\354\223<\364I\332=\"\361\341\275D\260!\274k\013W\274\232x\\<\221\003\227\275\335\020\013\2755\251\343<\307\357\017\2768\326\205\275\327\363x;\354\260\331=\362C.=\356\266\343<\352\t\343<DR \274\212\021\301\273I@\211;{\241\271=\'?\277<\366$-\276\037pU:\336\336\005=\313\034E=\014\262$\273\265\031,=\255^T\275B\265\343<W)T<:\322\330<\261\023\324=C\273\303\275=\352g\275M\243\203=\022\317\005\275G\340o\275\323\020D<-\323\242\275G\027d=\302c\367<\302I\206=g\315X<G\211\322\275\345\365\302=p&h\275\243\2064=g6\347=\241\247\221=\377\236\007\276y\247\262<\364x\241<\312\203\n=4$\005\275\245\366\272<iy\262;\224\256J=;\301\315\274\307\366h<a\2160=\261\277\211\275,\342:\276a\363,\275\246[\037\275\3530o=\376\257*\275T\266y\274u\271\367<\225\205\260\274z6v\275JC\344\271\236+\242\274\373*\000=\261\350\001\276\026\323r\274\004\025\273\275R\373\254\275\003\270\343=\202\257:=\346\377\204\274\303F\253<\205\203\022=\224\312\r\276\010^6=\217\227\333\2753\343Y\275\300\t\027\275\240\034\240=\030\234\211=\346z#>{\243\237\275QG\240<\024\244\344\274\310\252\345<Wn\360<(p\032\274&\275\020>\314\022\205\274\316\341\302=\312\316\222=)\226\201=\332\357^=}?6=\256l\200\274\021_\305=\363\274-\275\310J\277\2740\325\026<\026\343k\274n1\205\275a\224\006\275B\312\366\274mH\034\275L\206B\274\350-\337\275\322J\342=\204\036\233\275\367\301\256=\247xo\275\371\337\206<N\345\252<[=\220\274\\?y\275\250\373\216=\237\332\032=\341\236\364=\242#\323<\301\237\304\274\207\241\311<\363\210\346;\226\261\326<\362\346\265=F\261\212\275>\3761\274\241\031\242\275\256\t\203=\263>\210\274\201\341\222\273\237Pj=#zG=M\254\213<\221+>\2758\362\002<\016\032\237\2759\023Q=%\243\234<\365\265\201=mK\220\274\025\325\211;\231\026\272=\017\362\223=1\343\351<\364\361\240=\020\t(=8y=\275\207$\030\275\233\237\362\275\360\223\233=\260\307d<K\221\030\275\266UJ<\233.\217\275a!a=y5\352<D{\003=\304>\r\274\'\021\236\273\314/\037=\014\333\024>X\302\352<\270L\351=\200\222\007<\310\255\253\275)\316\276<4F\370\274=\322\307=\270=i=\304\261.\274\026\362!\275\215\235==\371\007\271=\ru\336\272\"\344\253\273\343\256\006=\324\303\306=\346\037\304=\2322\275\275fp&=\373\n\365=\010\240\312=\210\222\207=\303\212\226\2751#\206\274~\3239<\300\204\367=7\227s\2754\036\307\275\332\245\214<bT\231\275;1\231=qE\277\274S\273\205=Zs\354\274\236\306\244\274#AA\275\333;\023=\2264&\275x\330\206\274\303\250\336\274m\255\003\274\226\013\201<\230\203\224\274.6\310\275_\3627\275\303>\301\273\020\202\247=\330\220\031\273&\230\266=\312\331g\274d\321\201=i\316\263=r~\003\276(q\377<\035\275\020=\026o\375\273y\332\324\274l\376\362\275\237\257\000<\303\334\247=\377z\212\275,\312\363\273\350\272x\274\374;\343<\034p\227\275&!\272:l\274\206\273$\221\023=5\366\3209\003\024\t>\"8\"\275!\222\305<V\177s\275\352\205?=3LZ=\356<\300\275\370Ii<NU2:\301!\024<\263\3516=\036^I\275\320u\330=)\225\243\275\016\020\022\275\025\014V<\253H\r\275\360\232\270\275wj.<\213\337\r=\324ZT=\n\351\023\275\330 \016=7U\013>\367\215\214=*\200\036=dMM=Go\034\275|\272\254\275K\264\255\275!\270\230<\227\335\260<\237\330\255=\333\321\013\276)\263\264=\331\214\212\275\261\320,>0\340E<\252\346v<K\324x\275n\204\346<\225\007/\275R\306\312;\352\206\266\275&\236\235\274\217\002\002\276~\374\216<j\304\374:\355C\210<\014\220!\274?\213\200<-\315\333<\032\347\211<Q^\252=\n\257\242\275OE!=\037z\031\275\374\340\031\274\222\3712\275\231\360\222=\272\353\222<\262\014-\275\t\277\317\274J\302\346<\367\336l=@\203\326\275\037b\234\2749,\233=\025U\360\275t\363)\275\311\303\301\274\021F$\276\227\034\374<3xR\275\"\240:=\003y[=\306\223N=\t\253\320;\244\313\314=\370\\7\274\322\370\240\2756\3462=\340W\353\275\373t1=\313\201_\274\021Hx=\215\263\206\275xW\323;\025R\331\275<Jz=\316\224\373\275\362\357F\273\002\313\277\275\373\266\003<\256<#=2P\365\274\021\031\314=1\202\233\274\320\303\224\274L\306\215\275|\373~<\277\022\350<\2361\025\2763|\014\276\236_\177=\303\034\300=\364\267\251\275j\317@=\373\324X=\256\332a=B\027\203=\241\027U\275\262V\003\275\353\247\017\275\255\023\373<\010\304}\275C+D=\025\302\347=\225,#\274\343G$=\234\205]\275)>\002<\335\274*\275\001\021\326\274@pz\275\033\\\234<\243\324Z\274\002@\035;!\213\370<\224\325\224\275\232*\272\275\212\202\206\274\030QQ\274]\230\232\275\321\263\237\273n\007\027=:h\002>D\252\240<M.\326;\214\003\242:\226\201 \274\231\302\224\273\024x\003<\366s\237\275\030s\306\275~\242\022<L|\357\274\356xC=@5\325\2748\275C\273\252\336\013\275\232\026\217=\3175\311=\026\207d\275\232\306\261=@\006\204\275\374\310\"\274\010V%\275\276\313\032=\304\036\225=\030D\240\274D\266P\275\262\025+<xei\275?\347\274=B!\210\2751te\275D\t4;@m\327\2740\030\"\276\313\323\021;\3565Q\275%\302\201\2755{\237\275\252\020}\275MS,\275\274\034\213\275\032\310\037\274\332\363\315\274\225%Z\275wey\274\346\323\201=\3334\360\274\036\367\216\275\177g\000<\346\334\354\275/\304\377\274\271\371\247=Zau\275\313Z\371=\324\347\301\274\340\'\275\274b\";\274\257\021#9f\345\000\274\321Y\022=7\360\267=\310\313\376\274r\216\301\273\363\027b\274\361l\356\273\253P\300\274\371\210\213=\267\212\310\2733!\324\274\346W<\275y!\252\275Yek\275\206\212\373=/\220[=\003\347F=\224%\201\275k=\365<\347\202\307;H\2400=\350\223\342=P\257Y=9\\#=\370O|=l\020\300\273)\337\032\275\337Y%\2757\331\021=\206\324\207=\342WG=*\333\254=\033\361\002\275\323\242j\275\221x\217=\346WG=W\352\352;3\\\005\276\366Z\031\276\320L\234<\211\365\313\273e+@>\263e&\275\244H\351=\225\273\212=\"\230\026\276O\201\232\275\206\026~\274\201\272\275\273z\207V; \026\263\275\270\237(\275Q(k\275\034\034o=\301*\267;\201\333\000\274o\242\237\275\254\363\206\274I\335\330\2733=\032\274\244`\270<P\311N=y\260\315<\376\246\273\275\271\232\250=\350\255-=2\256\256\275\177\276\033\275\2315\323<m\036\352\274\370\\\263\275\265\262\324\275\216,\006\274\215\262\274=\214\264\030<\207\255\231<\231\272#\275i\252Q\275\313\362\204\274\231Vr<\314\363\333=i\332\337\274\220\223\253\275\017\360\250\275\263%\310\275Oj\357<~\035\\=D\r\307<\224L\207\275\027$\305<[\303i\275\216\223\337;S\201*=\2672\311\274Lq=\275W\277\004=BO|\275\243:H\274\n\360\315;\245(q;\3070\370\275\270P\336\274\261\251q\275\221\021-\275\275\016\265=\177dD\275\036\024\213=\312\311\252=\r\200\031=w\206\261\274\242\205z\274\354\267\236\274\016\002>\275\003B>\275\r(5\275Ng\303=\217J\224\275\225\n\261\274\311\2134=\362s\376\274\367\313\236=?0\243=E\333\"\275\'\250\216=\241#E\275\356\nk<0S\003\275\r7;=\275s\257=\321\257a=\223\013\321\275u\030`=\016\2616<\344\007B\274\036M\222=\257\375\327;\306\337I\275>\024\322\275a\272\347=\223\2147\275\201\n\301\274\220.Q\274\351a\002>N\221B=\'J\245=3\371\303=\304A\353\275\344f\225=\302y\256<\307x\n=\214ns\274\271\007\201=\034\215\204>\371Wq;\032\013\216=V\252\034\274\314UN\274:o\346\273\254\031\200=\013-U\275\342(\313;~\013\243\274\021\310\233\274\005j\354<\r\235\253=R\025[\273\246\332\n>$\234.\275\316\013\222<v\274\214<\312\030\'\275\301{\316<\031\002_=WO\002\276<\363\373=\026\312\252\274#\315\274=\244B\241=\nVU=uN\245\272\303\210\017>(\027\265\273\326uA\274\0104\037\275\035\370\257\274\367e\340\273\217_\343\275\203\263e<\3021\004\274\rd\254\274\242\375\177<,\033h==\302\033\275\016t\201=\371\313\322=61\221\273\035\372H<J\314\206=\263O\244\273v\306\354\274\374m\217=O\006\302\275\236\270!\2745\374O\275\306\261$=\2701&=}\224F=\274\266\260<\360\010\t<r\243!=r\275T=\204\347)=qR8=\341#\033=\373\370H\274`\270\320=\357s\347\275\nK\314\275&\313\252\275\r%\000<\2414*=\3465\277=\2202\207=~\225\300\274|,l=\367\254\214\275\334-|\274\355\303+\275\007\222L\275\301\255\300\275\345\371\033\275\220*\243<\025\026f=s*\212=\244\314Y<o\245\200=\312\221i\274\351\315\305\274f\205\242\275\300\265\000<\340\\\364\273Dk:\275\341\035*=\370\022E;\251[\354<8t0=\036S\211\274\377B\274=K\342\271<\223)\230\275\270*A\275\005{\347=s\262\211<\201\331i=a\252\202<\341\003W<\031\351\242\275\027l\307\2758\310\211\275\013k\224\274c\032\223<rS-\272\034j\242=\226D\220\274.\022\322=\020TA\275\265J\311\275\315\373P\275\034\340\"\274\037\211\367\272$U\343\273]6,\274\343\370\302\274\217\367s=\215\032\345\275\2178\033\275z[\206\275\357\333\251=\010k>\274\266\302\343=5\341\243=\005\263\233=\200\006\"\276\352\222\233\275\027q\275\275\373\310\320=\353:\205\275\'\362\200\275\344\r\260=\372\215C=\020\352\244\274?\315,\275\376\033\020>\334hf\274y\262\031\274\334Dw\2745\357`=1\240\270\273q\245F\274\201\262 \276\031\365V=q\340\024\276\370\237\254\2723b\003\275I\\&\275\021\010\223;\023D\210\274\306\021\375\273w\331Y;\324\254\247<$\'\215=&]&\275lw\001\275\267F\301=\246\\\220=\344X\272:QVL=\225\203\310<\226\336\242=\301N\332=\031z\351\274\350W\353\274\272N\321:e\027\253\274\357\202\031=\322\034\266\275\241\273v=\323\243\314=\036\221$\275\336m\301=@\230\364\273\342\230q<\001\373\306=\214\246\026\274\314/\211=\267\212\273=\221w\020<W\327\226\274w\267\316\274v=\004\274\'Y1<\206\003\306\273\243\035\221\275\261\204\311\274\246E\247=\251v\006\273\002\351J\274R\244Q\275\223\005\003<\212/\246<\330\344@<\345}\206\274\253\223\256<\334\017\003>\370\237\374\274\274\250\236=Rm\231=\265s\n\275C7\367=\255\364Z=\3300@=\035\330\004\275\0004a<\253\200z\2743\305\035;\260\335&=\255Z\251<*\214\311\271\276\233\005\276\213L\371\274\311\270\002>\024X\212\272h.\301\275(\277\t\275\244<\036=<M)\275\205X\304=\342\250\343=\225E\232=\366VA\275;\003\265=\240\241S<\003^\325\274\034QJ=\301\247\261\275\311U\334=\253\364\262=c\250r=\262\341\253\275\334L\362=\004\371\204=\024\032\201\272b\032\002\276\035W\220\275\372v\264\275\024\030\226=l\004\261={(\373:\333-\004>U\315\205\275]\241\177=\206z\300\274\363\3644=\255h\001\276F\236\016=\304w\345\275u\273\236\275\205\021M=\017Y\353\274|\200\027=\204\036+=\227\373\236<\006\022\235<\252\272\317<\262\245\304\274\t[\214\273\\\324f=1\305\252\274v\340\207=\255{D\275\037\314\032\275\227q\253\274$-\346=n\'\014>-9\351<\355Y(\275m\224\314=\257B\263=\233z\215:m\332J\275\235E\302<\356$\027=\'\314R\274w\260\202\275f\014|;\341\363+\274\213\372\205\274!y\337\275\203\300Z<A/\244\2757\342\334=c\334\324\275\3448E\274\365z\016=\367\330K\274\337rr:\034.g\2750\203\350:\277pb<*\030\003=\362\325\003\276\245\017\231\274c\216\327\274\324\203\267\273\305J\226\273J\316\206\275\234\025\006>\350-\375\274[\363\317\275\033\014\340\275b\326\351\274\255\322\372=\255<C\274\360\302\202=\244;=\275\'>\251\275V\347f<\334\364\277<\200p|\275\017\311\226\274\370\243\026\274\013v\251\275\353t\365;\313\0346=\220\364X\274\266uG\275\275\033\033\275S\255\t<\210\244\312=\222\362=\275*\272\325<\340+\257\275\240\014\275=e\244f=D\234d\275\245\270\3169\202\031\314</\254\271=\305)\271\274\320\216|=_\031\207=5\346\206<\032\021\304=\324\375?\275\\\304\303=\272\023\257==\373/\275\241\315\225;\315\032\220=\307\217\376=\002\343z\275\031\032\204\2756\022\275;\225vw=\367#d\2757\024\370<\236D\207;\204\237\343\274\313\035T\275\361\350\034>\361\004\265=lO\035\275\010\220\300<\315W#=~\272\324=\300-\332=\001w\240=\324U\032=\330\306\241\273\363u\'\275%\233\366\272\352C\033:zC\301=\2232G<\217&H\275\016\273s\275\244{\331\274\310\007v=2l|\275\260\353d\275\2032W\275ie\014\275\353C\353<\356\271\035\275WD:=\002=9<\277\213\n\274\342Lg\273\351w\026=\313\305\250=\346\277\365\275\023\241\016\275*\"\033;\361\200\003\275\205\322\277\275\221\331\335=5\034\223<\005\212\202=\305\340m\275aEJ\274\201\322\215=\004F\261\275x\222Z=\312\345\017\2751\274\267<>E7\275\245\302O\27364\005=\232\372\232\274s |\273k\322E>l\3507\275%\321\"\276_\350\201\274+a7=\010&\237=\352\216\353=\263u\211\275TH*\276\034\356\333\275\336o\032\274\275F\201=\210\231\002\274\232\037\310;R/\274<\326\217Z\275y!\347<\375\352j=\010\013`\274\020\003\304<y\256\260=\354\3178\274\324\t}\273\nq\257=\316\374N<\347z\316=\006)E\275\352NV\275Y\375\366\275\304c\006\27566\232\274yGw<\220mH\275QO\276;h\314\347\275+\372A<\"\201+:\207\r\257=\233\233n<\266\367,\274\257\001\025<\020\317\003\275\255\250l=\225\270\"=\277\010\342\275\326\233\224\275\022\221\020\272\276h\341=\013^\220\273\312\201\206<\332\203,=\202\024\036<@PZ=\237]\215\275<\r\232\274\264\357~;\217\346e\274\010\372Z\274k\223\330\272\203H\362\274P\234\016\275\337\301V<)10=Y\322v<\027y\273\275\267\344\023=\027\367\205:\005\211l\275\r\224\274=PJ\236\274\262i\200\275\240\255+\275\206\'\252=\243;[\275\374\030\005=g\r\327<-[\320;<[\232=\204\257\203=\317\'\227;\256\241\035\276\352i\034\275\037\241$<4n\217\275\371\030\331<6w\213\274\026%\225=\r\211\000\274\312\001\253\275o\000\273\275\240%\221=\351mx=\362>\267\2741t\324\273\224\232\202;\230(\242<\206\213*<i\254\006\276\000~\243=P\210\032>\"\017\267\275:\215,\275-N\007\275\250[v=\214\n\210\273e\330\257\275\276\021\227\275\316\023\002<yt\307<\262\347(\276\025\005\232\274e\031\037\275^]^=qiB\275\r\317\307<\372;7\275\014\305\275\275\351\374\\=T\236x\2754\211\"\275|\321\363\274\2652\002=\n\021\215\275(+N<\220\220\020>\243A\206=UT\024\275\330 \206\275\36369\275\332\214\223\274\366y\007\276\257\207G\275$\010\305=\307\255\216\2741\324\246\273uh\216\275\250V9=\352\003\240=\223\351\244\274\361\267Q=\003H\305={h0\274\030\203\271\2752\311r=|\241@=\257\304\003\274o\033\207\275\360Z0\275\352\030\251=\306m\014=\277\r,</\240_\274\304@\314<#\022\273\273F+ \275\353qL\275\330\246\370\273\220\371\227\275Pq\217\273\351\255\203\274\334\355N<\223\301\205<\301r\252\273\265A;<\021\331Z;\3116\025=[GW=\376,\236\275\327\230\327\275\235\356\017\275v\333\005\276\256\243\025<p\335(=\266\344\214=\260\2474\275\251]\333<\306\2740<h9\225=\331~\222\275\244\376\341;\241\314\366\274\030N\312;=H\335\275k\324\333:[4\207\275@5\353\274`\244\361=Z$\023=p`\340\275\352\ry=\357\265\001<!\376\205=\212\351V\275\332\244\016\275Z\202\344\274\263[$=!9\211=\341\034o=\'R\211\275\312\373\304\274}p1=\317\202u<`\274\202=\233\273\034=\017\351g\275\227w\215=:\023<<B(B\275L g=\203\207\306<\271`\223\274\313e\003=Af{\275D\301\240=\221\351@\274\233Y\310;\215\023\262\275\322\340\366=\010W\n\275\273\357o\275\310~4\275\363\236+=(*]=\220\306\362<\375\224p=g\354\214\275\202\210\242<;\335\266\274\327\2143\276 \032\331=~v\370\275\220\307\013>\223\225N\275\003(4=\t\3027\275\r#\366<\316qz\275X\253`\275Li\313\273i^}\275\344\250\004\275\226\333\001>\3139\361=\006\020\212=j#!=\272\266\235<w\214w=\271X4\275\004^o\274U\356\026<\303\036\225<\252s\364\274V\343~=o\276J\273\226\330-=\355p/=\372\026\226\274u;\257\275\274\246\013\275\020#\'\275\365\303\223=\370\370\225<\r\341\200\275P\036\233\275\320 !\275\350\314T=?+,\275h\320H=]\227\202\275\311w:\2733\345\315\275$\365\202=\243\2707\276\257V*\275\336\232]<\321\237\247=^\3677<\276k(>\"\226o\275+x\316\275>&\244\274XA9\275\347\204M=\256\234\343=z/\333\274jk\304\274\240\354\004:J\004\335\273\352\203\t=.\333T\275\353\223\027\275\316\363\002=\244l\306\275\214\024\371\275\224A#={[?=\254\250%=\350~\266\275\2225\376<\264\026\003<\010\2433\275\006c\277<O=\032\275\341\363A\275\236\023O\276\334\365%\275Cg\256<\333\0241=5\306\205\272\221Wi\274\333\232\262\274KC\342\272\306\235G=\303\340\201\275\034\003i8\027$\213;\217k\343\275\257\253\264<<H\271\275$\313\n\275\346{\216<\240\300}\275\373k\322\275\000(\371\274\232\213\227\275\206\247P\275\316f\273=\213\224\232\275\317\037\265\275Z_\351;\374\353Z=\276\330~<<c<\275\315.\224=\201\374\241=\342\024D=`F\360\274]\272\251<d\034K\274t\353R=\210\2015\274C?\351=\025\tE=\356\001\211=\261\242\r>\303\036\005\276\365\337\267=\245Q\356=\202\365\360\274*\250k<\250\217\003\276c[\010\275\003\347o\275@\227;=\375\245g\275\342\361\267\275k\322\256\275\213y\206=v\341p<\030\312h\275\232\222\034\273\231\317>=\tx\232\275\273\354\321;\346\374T=|\306#\275"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "IteratorGetNext"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "IteratorGetNext"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/mul/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_2"
  input: "lstm_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/mul_4/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/mul_4/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "lstm_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_4"
  op: "Enter"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Merge_4"
  op: "Merge"
  input: "lstm_1/while/Enter_4"
  input: "lstm_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Less_1"
  op: "Less"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Less_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "lstm_1/while/Less"
  input: "lstm_1/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_4"
  op: "Switch"
  input: "lstm_1/while/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity_4"
  op: "Identity"
  input: "lstm_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/add/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/mul/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/mul/x"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_2"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/add_4/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_4"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/mul_4/x"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_8"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_9/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_9"
  op: "Add"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_4"
  op: "NextIteration"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/while/Exit_4"
  op: "Exit"
  input: "lstm_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit_1"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3038218021392822
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3038218021392822
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8529150
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "lstm_1/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "dense_1/BiasAdd"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Square"
  op: "Square"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Square"
  input: "Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "Mean"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lstm_1/while/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/lstm_1/while/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lstm_1/while/mul_3_grad/Mul/StackPushV2"
  input: "^gradients/lstm_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/mul_4_grad/Mul/StackPushV2"
  input: "^gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lstm_1/while/mul_5_grad/Mul/StackPushV2"
  input: "^gradients/lstm_1/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lstm_1/while/mul_grad/Mul/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Shape"
  op: "Shape"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_1_grad/Reshape"
  input: "gradients/Mean_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Shape_1"
  op: "Shape"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_1_grad/Shape_1"
  input: "gradients/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_1_grad/Shape_2"
  input: "gradients/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_1_grad/Prod_1"
  input: "gradients/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_1_grad/Prod"
  input: "gradients/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_1_grad/Tile"
  input: "gradients/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/add"
  op: "Add"
  input: "Mean/reduction_indices"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/mod"
  op: "FloorMod"
  input: "gradients/Mean_grad/add"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range"
  op: "Range"
  input: "gradients/Mean_grad/range/start"
  input: "gradients/Mean_grad/Size"
  input: "gradients/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill"
  op: "Fill"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Mean_grad/range"
  input: "gradients/Mean_grad/mod"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/DynamicStitch"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Mean_1_grad/truediv"
  input: "gradients/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Shape"
  input: "Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_3"
  op: "Shape"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_3"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Square_grad/Const"
  op: "Const"
  input: "^gradients/Mean_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/Square_grad/Mul"
  op: "Mul"
  input: "sub"
  input: "gradients/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Shape"
  op: "Shape"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/Shape_1"
  op: "Shape"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sub_grad/Shape"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Sum"
  op: "Sum"
  input: "gradients/Square_grad/Mul_1"
  input: "gradients/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_grad/Sum"
  input: "gradients/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/Square_grad/Mul_1"
  input: "gradients/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Neg"
  op: "Neg"
  input: "gradients/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sub_grad/Neg"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sub_grad/Reshape"
  input: "^gradients/sub_grad/Reshape_1"
}
node {
  name: "gradients/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sub_grad/Reshape"
  input: "^gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sub_grad/Reshape_1"
  input: "^gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/sub_grad/tuple/control_dependency"
}
node {
  name: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sub_grad/tuple/control_dependency"
  input: "^gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_1/TensorArrayReadV3"
  input: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dense_1/MatMul_grad/MatMul"
  input: "^gradients/dense_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/dense_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_1/MatMul_grad/MatMul"
  input: "^gradients/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_1/MatMul_grad/MatMul_1"
  input: "^gradients/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_2"
  input: "^gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/sub"
  input: "gradients/dense_1/MatMul_grad/tuple/control_dependency"
  input: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/lstm_1/while/Exit_4_grad/b_exit"
  input: "gradients/lstm_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/lstm_1/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/Merge_2_grad/Switch"
  input: "^gradients/lstm_1/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "^gradients/lstm_1/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/lstm_1/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/Merge_3_grad/Switch"
  input: "^gradients/lstm_1/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "^gradients/lstm_1/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/Merge_4_grad/Switch"
}
node {
  name: "gradients/lstm_1/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/Merge_4_grad/Switch"
  input: "^gradients/lstm_1/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/Merge_4_grad/Switch:1"
  input: "^gradients/lstm_1/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/lstm_1/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/lstm_1/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/lstm_1/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/lstm_1/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/lstm_1/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2"
  input: "^gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2"
  input: "^gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2"
  input: "^gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lstm_1/while/mul_grad/Mul/StackPopV2"
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/lstm_1/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_5_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_5_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/mul_5_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lstm_1/while/mul_5_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "gradients/AddN"
  input: "gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_5_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_5_grad/Mul/Enter"
  input: "lstm_1/while/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_5_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_5_grad/Mul"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_5_grad/Sum"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_5_grad/Mul_1/Enter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_5_grad/Mul_1"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_5_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_5_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_5_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_5_grad/Reshape_1"
  input: "^gradients/lstm_1/while/mul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/mul_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "gradients/lstm_1/while/mul_5_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  input: "gradients/lstm_1/while/mul_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/lstm_1/while/mul_5_grad/Mul/StackPopV2"
  input: "gradients/lstm_1/while/mul_5_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_8"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/lstm_1/while/Merge_4_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_6_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_6_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/add_6_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_6_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_6_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lstm_1/while/add_6_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_1"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_6_grad/Sum"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_1"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_6_grad/Sum_1"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/add_6_grad/Reshape"
  input: "^gradients/lstm_1/while/add_6_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/add_6_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_6_grad/Reshape"
  input: "^gradients/lstm_1/while/add_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_6_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/add_6_grad/Reshape_1"
  input: "^gradients/lstm_1/while/add_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_6_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_8_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_8_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/add_8_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_8_grad/Sum"
  input: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_8_grad/Sum_1"
  input: "gradients/lstm_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/add_8_grad/Reshape"
  input: "^gradients/lstm_1/while/add_8_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/add_8_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_8_grad/Reshape"
  input: "^gradients/lstm_1/while/add_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_8_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_8_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/add_8_grad/Reshape_1"
  input: "^gradients/lstm_1/while/add_8_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_8_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lstm_1/while/mul_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_6_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_2_grad/Mul/Enter"
  input: "lstm_1/while/Identity_4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_2_grad/Mul"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_2_grad/Sum"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/lstm_1/while/add_6_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_2_grad/Mul_1/Enter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_2_grad/Mul_1"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_2_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_2_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_2_grad/Reshape_1"
  input: "^gradients/lstm_1/while/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/mul_3_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lstm_1/while/mul_3_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_6_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_3_grad/Mul/Enter"
  input: "lstm_1/while/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_3_grad/Mul"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_3_grad/Sum"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "gradients/lstm_1/while/add_6_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_3_grad/Mul_1/Enter"
  input: "lstm_1/while/clip_by_value"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_3_grad/Mul_1"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_3_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/mul_3_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_3_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_3_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_3_grad/Reshape_1"
  input: "^gradients/lstm_1/while/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_4_grad/Shape"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_4_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/mul_4_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_8_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_4_grad/Mul/Enter"
  input: "lstm_1/while/add_7"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_4_grad/Mul"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_4_grad/Sum"
  input: "gradients/lstm_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_4_grad/Mul_1/Const"
  input: "gradients/lstm_1/while/add_8_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_4_grad/Mul_1"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/mul_4_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_4_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_4_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_4_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "^gradients/lstm_1/while/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_4_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "gradients/lstm_1/while/mul_2_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  input: "gradients/lstm_1/while/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/mul_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "gradients/lstm_1/while/mul_3_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "gradients/lstm_1/while/clip_by_value_grad/zeros"
  input: "gradients/lstm_1/while/mul_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  input: "^gradients/lstm_1/while/clip_by_value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/lstm_1/while/mul_3_grad/Mul/StackPopV2"
  input: "gradients/lstm_1/while/mul_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_7_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_7_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/add_7_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_7_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_7_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lstm_1/while/add_7_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_4_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_7_grad/Sum"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_4_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_7_grad/Sum_1"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/add_7_grad/Reshape"
  input: "^gradients/lstm_1/while/add_7_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/add_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_7_grad/Reshape"
  input: "^gradients/lstm_1/while/add_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_7_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/add_7_grad/Reshape_1"
  input: "^gradients/lstm_1/while/add_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_7_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/clip_by_value_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  input: "gradients/lstm_1/while/clip_by_value_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_5_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_5_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/add_5_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_5_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lstm_1/while/add_5_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_5_grad/Sum"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_5_grad/Sum_1"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/add_5_grad/Reshape"
  input: "^gradients/lstm_1/while/add_5_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/add_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_5_grad/Reshape"
  input: "^gradients/lstm_1/while/add_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_5_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/add_5_grad/Reshape_1"
  input: "^gradients/lstm_1/while/add_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/lstm_1/while/add_7_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  input: "^gradients/lstm_1/while/add_7_grad/tuple/control_dependency"
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_7_grad/tuple/control_dependency"
  input: "^gradients/lstm_1/while/BiasAdd_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_7_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  input: "^gradients/lstm_1/while/BiasAdd_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/add_7_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "gradients/lstm_1/while/add_7_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_7_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  input: "^gradients/lstm_1/while/MatMul_7_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_4_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_4_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/add_4_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_4_grad/Sum"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "gradients/lstm_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/add_4_grad/Reshape"
  input: "^gradients/lstm_1/while/add_4_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/add_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_4_grad/Reshape"
  input: "^gradients/lstm_1/while/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_4_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/add_4_grad/Reshape_1"
  input: "^gradients/lstm_1/while/add_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_4_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/add_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_2_grad/Sum"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "gradients/lstm_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/add_2_grad/Reshape"
  input: "^gradients/lstm_1/while/add_2_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_2_grad/Reshape"
  input: "^gradients/lstm_1/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/add_2_grad/Reshape_1"
  input: "^gradients/lstm_1/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/lstm_1/while/add_5_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  input: "^gradients/lstm_1/while/add_5_grad/tuple/control_dependency"
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_5_grad/tuple/control_dependency"
  input: "^gradients/lstm_1/while/BiasAdd_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_5_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  input: "^gradients/lstm_1/while/BiasAdd_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/add_5_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "gradients/lstm_1/while/add_5_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
}
node {
  name: "gradients/lstm_1/while/MatMul_6_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_6_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  input: "^gradients/lstm_1/while/MatMul_6_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/BiasAdd_3_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "gradients/lstm_1/while/BiasAdd_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/MatMul_3_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_3_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  input: "^gradients/lstm_1/while/MatMul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/BiasAdd_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_7_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_1_grad/Shape"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_4_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_1_grad/Mul/Enter"
  input: "lstm_1/while/add_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_1_grad/Mul"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_1_grad/Sum"
  input: "gradients/lstm_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_1_grad/Mul_1/Const"
  input: "gradients/lstm_1/while/add_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_1_grad/Mul_1"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/mul_1_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_1_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "^gradients/lstm_1/while/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_grad/Shape"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_2_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/mul_grad/Mul/Enter"
  input: "lstm_1/while/add_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_grad/Mul"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_grad/Sum"
  input: "gradients/lstm_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_grad/Mul_1/Const"
  input: "gradients/lstm_1/while/add_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_grad/Mul_1"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/mul_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_grad/Reshape"
  input: "^gradients/lstm_1/while/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "^gradients/lstm_1/while/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/BiasAdd_2_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "gradients/lstm_1/while/BiasAdd_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/MatMul_2_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_2_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  input: "^gradients/lstm_1/while/MatMul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/BiasAdd_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_6_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_3_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/add_3_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lstm_1/while/add_3_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_3_grad/Sum"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_3_grad/Sum_1"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/add_3_grad/Reshape"
  input: "^gradients/lstm_1/while/add_3_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_3_grad/Reshape"
  input: "^gradients/lstm_1/while/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/add_3_grad/Reshape_1"
  input: "^gradients/lstm_1/while/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lstm_1/while/add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lstm_1/while/add_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_1_grad/Sum"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_1_grad/Sum_1"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/add_1_grad/Reshape"
  input: "^gradients/lstm_1/while/add_1_grad/Reshape_1"
}
node {
  name: "gradients/lstm_1/while/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_1_grad/Reshape"
  input: "^gradients/lstm_1/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/add_1_grad/Reshape_1"
  input: "^gradients/lstm_1/while/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/lstm_1/while/add_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  input: "^gradients/lstm_1/while/add_3_grad/tuple/control_dependency"
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_3_grad/tuple/control_dependency"
  input: "^gradients/lstm_1/while/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_3_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  input: "^gradients/lstm_1/while/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/add_3_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "gradients/lstm_1/while/add_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
}
node {
  name: "gradients/lstm_1/while/MatMul_5_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_5_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  input: "^gradients/lstm_1/while/MatMul_5_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/lstm_1/while/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/lstm_1/while/add_1_grad/tuple/control_dependency"
}
node {
  name: "gradients/lstm_1/while/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/add_1_grad/tuple/control_dependency"
  input: "^gradients/lstm_1/while/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/lstm_1/while/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/add_1_grad/tuple/control_dependency_1"
  input: "gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "gradients/lstm_1/while/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/MatMul_4_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
}
node {
  name: "gradients/lstm_1/while/MatMul_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_4_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_4_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  input: "^gradients/lstm_1/while/MatMul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/BiasAdd_1_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "gradients/lstm_1/while/BiasAdd_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/MatMul_1_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_1_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  input: "^gradients/lstm_1/while/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/BiasAdd_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_5_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "gradients/lstm_1/while/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lstm_1/while/MatMul_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul"
  input: "^gradients/lstm_1/while/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul_1"
  input: "^gradients/lstm_1/while/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/lstm_1/while/MatMul_7_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/MatMul_6_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/MatMul_5_grad/tuple/control_dependency"
  input: "gradients/lstm_1/while/MatMul_4_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/while/MatMul_7_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "lstm_1/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Adam/Assign"
  op: "Assign"
  input: "lstm_1/kernel/Adam"
  input: "lstm_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/Adam/read"
  op: "Identity"
  input: "lstm_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm_1/kernel/Adam_1"
  input: "lstm_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/Adam_1/read"
  op: "Identity"
  input: "lstm_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lstm_1/recurrent_kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lstm_1/recurrent_kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel/Adam"
  input: "lstm_1/recurrent_kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lstm_1/recurrent_kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lstm_1/recurrent_kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam_1/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel/Adam_1"
  input: "lstm_1/recurrent_kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Adam_1/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Adam/Assign"
  op: "Assign"
  input: "lstm_1/bias/Adam"
  input: "lstm_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/Adam/read"
  op: "Identity"
  input: "lstm_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "lstm_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "lstm_1/bias/Adam_1"
  input: "lstm_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/Adam_1/read"
  op: "Identity"
  input: "lstm_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Adam/Assign"
  op: "Assign"
  input: "dense_1/kernel/Adam"
  input: "dense_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/Adam/read"
  op: "Identity"
  input: "dense_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense_1/kernel/Adam_1"
  input: "dense_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1/read"
  op: "Identity"
  input: "dense_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Adam/Assign"
  op: "Assign"
  input: "dense_1/bias/Adam"
  input: "dense_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/Adam/read"
  op: "Identity"
  input: "dense_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense_1/bias/Adam_1"
  input: "dense_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/Adam_1/read"
  op: "Identity"
  input: "dense_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_lstm_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_1/kernel"
  input: "lstm_1/kernel/Adam"
  input: "lstm_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_1/recurrent_kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/Adam"
  input: "lstm_1/recurrent_kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lstm_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "lstm_1/bias"
  input: "lstm_1/bias/Adam"
  input: "lstm_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Adam"
  input: "dense_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_1/bias"
  input: "dense_1/bias/Adam"
  input: "dense_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_dense_1/bias/ApplyAdam"
  input: "^Adam/update_dense_1/kernel/ApplyAdam"
  input: "^Adam/update_lstm_1/bias/ApplyAdam"
  input: "^Adam/update_lstm_1/kernel/ApplyAdam"
  input: "^Adam/update_lstm_1/recurrent_kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_dense_1/bias/ApplyAdam"
  input: "^Adam/update_dense_1/kernel/ApplyAdam"
  input: "^Adam/update_lstm_1/bias/ApplyAdam"
  input: "^Adam/update_lstm_1/kernel/ApplyAdam"
  input: "^Adam/update_lstm_1/recurrent_kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_dense_1/bias/ApplyAdam"
  input: "^Adam/update_dense_1/kernel/ApplyAdam"
  input: "^Adam/update_lstm_1/bias/ApplyAdam"
  input: "^Adam/update_lstm_1/kernel/ApplyAdam"
  input: "^Adam/update_lstm_1/recurrent_kernel/ApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^dense_1/bias/Adam/Assign"
  input: "^dense_1/bias/Adam_1/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Adam/Assign"
  input: "^dense_1/kernel/Adam_1/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^global_step/Assign"
  input: "^lstm_1/bias/Adam/Assign"
  input: "^lstm_1/bias/Adam_1/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_1/kernel/Adam/Assign"
  input: "^lstm_1/kernel/Adam_1/Assign"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Adam/Assign"
  input: "^lstm_1/recurrent_kernel/Adam_1/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "lstm_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "lstm_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dense_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dense_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dense_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dense_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 18
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: "global_step"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "lstm_1/kernel/Adam"
        string_val: "lstm_1/kernel/Adam_1"
        string_val: "lstm_1/recurrent_kernel/Adam"
        string_val: "lstm_1/recurrent_kernel/Adam_1"
        string_val: "lstm_1/bias/Adam"
        string_val: "lstm_1/bias/Adam_1"
        string_val: "dense_1/kernel/Adam"
        string_val: "dense_1/kernel/Adam_1"
        string_val: "dense_1/bias/Adam"
        string_val: "dense_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "lstm_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "lstm_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dense_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dense_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dense_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dense_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 18
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: "global_step"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "lstm_1/kernel/Adam"
        string_val: "lstm_1/kernel/Adam_1"
        string_val: "lstm_1/recurrent_kernel/Adam"
        string_val: "lstm_1/recurrent_kernel/Adam_1"
        string_val: "lstm_1/bias/Adam"
        string_val: "lstm_1/bias/Adam_1"
        string_val: "dense_1/kernel/Adam"
        string_val: "dense_1/kernel/Adam_1"
        string_val: "dense_1/bias/Adam"
        string_val: "dense_1/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 18
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_f16aff429b7d470e9a99ec3d9aedccdb/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "dense_1/bias"
        string_val: "dense_1/bias/Adam"
        string_val: "dense_1/bias/Adam_1"
        string_val: "dense_1/kernel"
        string_val: "dense_1/kernel/Adam"
        string_val: "dense_1/kernel/Adam_1"
        string_val: "global_step"
        string_val: "lstm_1/bias"
        string_val: "lstm_1/bias/Adam"
        string_val: "lstm_1/bias/Adam_1"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/kernel/Adam"
        string_val: "lstm_1/kernel/Adam_1"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1/recurrent_kernel/Adam"
        string_val: "lstm_1/recurrent_kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "dense_1/bias"
  input: "dense_1/bias/Adam"
  input: "dense_1/bias/Adam_1"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Adam"
  input: "dense_1/kernel/Adam_1"
  input: "global_step"
  input: "lstm_1/bias"
  input: "lstm_1/bias/Adam"
  input: "lstm_1/bias/Adam_1"
  input: "lstm_1/kernel"
  input: "lstm_1/kernel/Adam"
  input: "lstm_1/kernel/Adam_1"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/Adam"
  input: "lstm_1/recurrent_kernel/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "dense_1/bias"
        string_val: "dense_1/bias/Adam"
        string_val: "dense_1/bias/Adam_1"
        string_val: "dense_1/kernel"
        string_val: "dense_1/kernel/Adam"
        string_val: "dense_1/kernel/Adam_1"
        string_val: "global_step"
        string_val: "lstm_1/bias"
        string_val: "lstm_1/bias/Adam"
        string_val: "lstm_1/bias/Adam_1"
        string_val: "lstm_1/kernel"
        string_val: "lstm_1/kernel/Adam"
        string_val: "lstm_1/kernel/Adam_1"
        string_val: "lstm_1/recurrent_kernel"
        string_val: "lstm_1/recurrent_kernel/Adam"
        string_val: "lstm_1/recurrent_kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 18
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 18
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dense_1/bias"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dense_1/bias/Adam"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dense_1/bias/Adam_1"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dense_1/kernel"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dense_1/kernel/Adam"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dense_1/kernel/Adam_1"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "lstm_1/bias"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "lstm_1/bias/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "lstm_1/bias/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "lstm_1/kernel/Adam"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "lstm_1/kernel/Adam_1"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "lstm_1/recurrent_kernel/Adam"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "lstm_1/recurrent_kernel/Adam_1"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "_make_dataset_ushGj6Alf4s"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 659
              }
              dim {
                size: 20
              }
              dim {
                size: 1
              }
            }
            tensor_content: "lK\004?U\226v?)T\335?\3115\232?uV\371?\346\332\262?V\027\022@\312|\331?$\016[@\225\254\304?H)\214?v\014\312?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@\3115\232?uV\371?\346\332\262?V\027\022@\312|\331?$\016[@\225\254\304?H)\214?v\014\312?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@V\027\022@\312|\331?$\016[@\225\254\304?H)\214?v\014\312?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\225\254\304?H)\214?v\014\312?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?z\025\017@\262o\032@y\253\352?\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\024\034F@\201v\n@\024H\020@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@IP>@\375\315\244@0\361\264?jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@jI0@\331s\027@\302\237\005@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\034\306v@dDJ@\rp\'@o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?o<,@^h\251?\316V\r@\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?\352b\250?\33249@\261\017\232@o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?o\311\370?\341\346\023@\3661\211?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?O0\305?4\347\006@>\237\311?8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@8\237\345?\253;\003@\207\225&@\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\221\231\223?\346\nr?R\365\300?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?\363r\037@1WU?g,\253?\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\330S\310?\021_\251?\023`,@e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?e\377\021@9b\222?U\307\301?\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\212\345\302?p$\035@\r\t\032@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\037\024\336?\036r\240?\242J\014@T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?T\266\220?\373\236\340?xS\345?\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@\350[\307?\371z\033@\222M\214@\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\227\266\350?\342\244\247?T\177\270?(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@(\266Y@\277\207k@\217\'\266?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?1l\013@O\007\001@\350\036\253?\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@\335\334\005@(\024\363?\232\000\377?\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\224)!@]\374\235@aQ\264?\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\010\225\262?\026\003\244?\352\340\222?Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@Q1\307?\204\202\014@0c\216?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?\375X\270?kR\375?\342/`@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\303\177\t@\253\351$@?\365\006@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@\305\265\035@\304\001L@\375V.@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\031\321\217@P\306c@\023\377P@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\341\361j@>P\230@\333\246;@K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?K,\006@?&\354?(P\n@\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\216\220\005@\251\333\017@\325M\301?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?\204N\014@\200w\023@@\301\016@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\217k;@\360\377b@\230\260\036@t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?t\224\036@\237\\2@\031\213\032@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@%\222\256?\361H\352?\272\n\374?\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\225\372\035@`Q\345?\226\215>@\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\022\307\022@\006\200\353?c\300\005@A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?A\344\014@\237\243\201@\036\204\261@\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?\307\t\024@\355\304\377?v\301=@Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?Op\013@\240p4@\271\340\034@\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?\317\3255@\231K\025@\304d\202@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\'\307\300?bA\224?\226\256\275?\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\010\247\212?\226\251B?G\360o?\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\236\311\001@\027U\334?H\225\245?\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\314\204\254?\214\272i?\233\233\217?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?N%\331?\352\023\303?0-\237?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?h\252\034@\2212\r@\343\253\252?\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@\236\202\334?\001dU@\305b(@hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?hte@\367\3023@\302y7@\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?\004\3146@\363l~@\001\326)@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\212\214\337?Ch\275?\326k\256?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\\\036\275?\014\351\273?\341\326\220?C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@C\215\242?\363\001\035@.:~@\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\350\035\367?\302\351\216?b\004\375?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\341\271\021@\256{\212?a%\203?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?\362\022\t@\273\006K@\305\2667@\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\251\n*@\317\310\332?\217\317\354?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?\223\227\266?s-\032@\351\000o@\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?\203)\"@-H\351?\214\231\354?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\026\035o@5F\321?\323*\324?\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\206\326\217?\222P\304?n\241*@\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\352~\026@\305\301X?\304\216\240?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?H\315F?\023\304\211?)\025\216?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\374x\016@\350:\337?iR\236?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?\313X\220?\313\300\357?\232\271\204?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\274z\347?\270\237W@\350\327\023@#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?#O\205?q\311\321?\367F\217?R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@R\000\273?)R\303?x\001\244?\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\366\372\263?\337\205a?\022\242)?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?\222\321\240?\003b\234?-\233\272?k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@k\223\002@\347\375\372?\365\262\351?Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@Fs\004@\364\372\314?\355\247\251?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\020\013\r@E/\021@\005f\010@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@\362\220\374?\013\347\r@\354\257h@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@]\021\227?\240\231\311?`\215\004@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@\"\335#@\34792@\307\031\037@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\302QC@\241b\010@\261H\376?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?\034\333\365?s\243\355?\242\243!@Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?Q~B@\014\177W@c\227]@\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?\366\027\213@\032K\025@\220\316\375?T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@T\266[@5\320*@`I\324?\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@\265i\346?}\312\"@\365*`A\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\037\246\207@\274\372\300?~\003\347?tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276tVB@\rk\273?\277\315]@\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\222\264\320?\324_\215?T\321\367?\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\232\257L@\235Fu@\314\000>@\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276\247Y\366?\034f/@.\274O@V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276V\233\232@\217)\tA\336\355\326\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\355\326\276\336\355\326\276\246b\220\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\265\355\254\276\335B\260\276\3469\262\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276@\343\273\276\246\216\273\276\267\353\256\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276\325\230\267\276L\327\304\276y\230\304\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276\013\002\277\276u\352\271\276h\211\277\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276`]\275\276h\305\277\276\336\302\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\037\032\270\276X\033\272\276\2076\271\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276Z^\306\276C\324\304\276\357\177\277\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\330\245\263\276RK\273\276r\205\277\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276D[\264\276\347@\303\276#4\302\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276Q\334\303\276\021\315\303\276\026\222\272\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276\261A\302\276LW\271\276\t\'\250\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\372\264\302\276I\243\265\276f\241\251\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276\232\017\245\276\235\010\263\276\200\034\266\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276C\016\270\276\036\244\263\276\320\014\300\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\236\255\300\276\014\004\272\276#I\302\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\323\363\270\276\317^\277\276C2\263\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\265\355\252\276^\343\252\276\014C\262\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\2762H\256\276\334\320\240\276|[\240\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276z\303\251\2761\356\224\276\203\324\222\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276\036\254\226\276Q\311\000\276\267V\272\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276K`\273\276C\327\276\276\204\364\274\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276\252\263\300\276\021o\267\276\346\311\271\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\234x\301\276\347^\264\276r4\275\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\257y\247\276\250n\277\276\030v\227\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\022u\234\276\276\267\253\276W\001\255\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276\340j\303\276\374\334\300\276\264\265\273\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\317\237\277\276\3464\303\276S\004\302\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\321\354\275\276M\231\261\276\032\335\274\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\343\220\262\276\334w\277\276\000\r\273\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276\224\322\305\276k/\264\276\347\250\247\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276<\215\274\276\243\207\302\276y\004\304\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\000\247\274\276\370,\275\276\021\226\275\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\0309\301\276@U\264\276\275\372\270\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276\315\365\221\276\374\233\300\276\350\202\267\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276\245\274\254\2761_\314\276wT\310\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276}k\304\276e\346\276\276\375\341\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\013\363\275\276\207%\305\276\267h\302\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276\032G\307\276\332n\302\276\3548\307\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\314\003\273\276\205\031\303\276z\216\305\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\027\373\301\276\032\316\277\276@\372\275\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276\244(\265\276\037\311\267\276\227\332\303\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276h\271\305\276\374,\300\276\333<\311\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\235j\311\276\"\226\303\276W?\304\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276}\277\272\276\336e\277\276\272=\276\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\3530\300\276\311\231\271\276\305\231\266\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\346\'\267\276$,\247\276n\342\270\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276\026\361\272\276\000\315\275\276*;\257\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\021G\301\276\342\206\266\276\032[\302\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276<M\301\276\374\000\300\276I\033\274\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276\247\344\275\276\250\336\265\276\364&\301\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\206\356\272\276\224\310\276\276\315\223\275\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\230h\300\276\241\304\275\276f\251\273\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\036q\304\276\207)\276\276\025M\275\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276\234q\305\276\256\214\271\276o\276\277\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\362\302\274\276\277\307\302\276s\026\301\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276\317\277\305\2769\r\313\276\027\213\276\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276|\010\272\276\257\355\243\276\017G\252\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\276*\314\233\276\260n\241\276\275\r\265\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\234[\304\2769!\306\276ry\303\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\243\302\262\276\r\324\304\276\347w\274\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276[^\271\276\302\006\232\276=H\274\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\036\316\274\276\345\304\275\276\323g\306\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\351C\303\276pt\303\2767\366\274\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\361p\306\276\345\t\302\276\017\301\303\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\263\234\261\276\001\332\300\276\375O\300\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\276\210\317\275\276\337\000\304\276\346\201\275\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276d*\276\276\261f\304\276\034\027\307\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\2765I\273\276\320\230\303\276\217\246\300\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\2762\214\300\276\031\006\303\276\302\310\300\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276|D\274\276\215\267\277\276\t\352\263\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\375\236\274\276\336l\256\2767t\300\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\210D\277\276$\333\302\276Ho\275\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276k\237\273\276Oe\266\276\337\371\266\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\">\305\276\r\335\271\276\270:\300\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276\313z\253\276\351\375\271\276\325\226\302\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\276\326>\267\276\302\221\270\276\r\275\302\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\222\226\271\276\321\335\255\276\243>\262\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\364\274\276_\246\305\276\225p\302\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\237N\304\276\261\377\300\276\177h\245\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276\227q\240\276\216Z\251\276I\021\267\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276\364/\266\276\262!\242\2768S\241\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276\033\177\264\276#\003\252\276\206\001\302\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276\030\267\263\276Z\265\245\276\204\215\273\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276H\366\306\276\364\304\312\276\0307\312\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276Y\343\301\276\254\253\303\276><\306\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\nO\306\276W\233\277\276|d\300\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\371\006\276\276\006h\272\276r\242\300\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276\306}\276\276\352\325\303\276Kp\277\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\235\316\303\276h\226\272\276\301\036\271\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276A\030\263\276}\262\260\276{\325\265\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\337\022\277\276f\231\271\276\257\317\277\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276j\235\300\276c\222\274\276\224\246\305\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276! \277\276\334z\265\276F\254\272\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276:^\276\276Tt\272\276\001Z\271\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\2765y\245\276\000\320\263\276\223\347\301\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\312J\301\276c&\277\276\r\016\303\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\250X\276\276\321\201\305\276\366#\263\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276\376 \277\276\206\346\265\276{b\270\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276@\027\275\276\260G\275\276\340\016\267\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276\335%\257\276\276?\266\276\246N\302\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276\252\301\276\276d\363\263\276\n\377\265\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276\027\016\255\276\014\205\263\276\366\251\267\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\0027\275\276\236l\302\276n\215\301\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\023\002\301\276\344E\302\276\253\365\303\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\266D\260\276/\314\261\276_\305\273\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276p\365\272\2762\300\301\276T8\270\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276\226B\302\276rg\275\276J`\304\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276+\316\305\276\010\033\314\276\216o\305\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\032l\307\276V\031\314\276\366\263\313\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\364\207\303\276\312#\310\276\036\256\307\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\2704\305\2766G\312\276\222\226\273\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276\372}\311\276\034\224\305\276A\274\273\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\037]\274\276\037#\276\276u\235\260\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276\000\224\300\276\223W\266\276\273.\303\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\2172\263\276\342\305\262\276\216\204\224\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276\001\331\254\276A\375\267\276\025R\310\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276%\340\304\276\346q\271\276&<\300\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\030\344\303\276$\351\300\276\225\234\304\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\323\364\267\276\323\037\267\276m\265\263\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\257\r\271\276.z\273\276\216m\262\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276%R\312\276\345\030\305\276be\306\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276.\334\276\276\270l\277\276\337\330\276\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\2766\330\272\276;(\277\276\360\022\266\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\262i\276\276\241\367\277\276\347N\301\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\\\213\276\276\370\342\276\276\374\373\262\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\304\302\276\276m,\271\276\362\371\265\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\360\n\244\276\266\351w\276\326\375z\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276\025\020\234\276\352L\232\276\025#\222\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\365\347\271\276\320\214\270\276\242\215\273\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\2761g\274\276\225\252\302\276\205\n\300\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\371\037\265\276\351V\254\276\343S\274\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\217x\276\276n\333\270\276\017\307\242\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276Lg\235\276\204A\231\276~\022\270\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\n\326\272\276\010\233\300\276\360\031\305\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276\312j\303\276L\364\303\276\2532\253\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\301$\247\276\020\251\304\276\345\'\302\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276\262\335\272\276\031\361\265\276\250\325\261\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\354\016\274\276\200\223\271\276V\321\257\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\226F\254\276C\231\305\276\210\261\275\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\360\214\276\276\357i\276\276x5\272\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\325\355\301\276}\t\275\276\306\273\306\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276T\235\306\276pv\305\276M\223\303\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\372 \274\276m\r\264\276\215\317\300\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276o/\310\276\036\033\306\276\325\356\304\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\323\362\302\276\354\n\303\276\235\326\304\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\004_\277\276\035\002\274\276\307\340\273\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\350\377\271\276\364\241\277\276VE\275\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276\3166\266\276\247\203\267\276\003-\274\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\263\362\257\276\264\234\304\276oR\304\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276$n\265\276@\034\267\276\326m\276\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\200\373\275\276-`\273\276\231\030\247\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276Y\273\274\276}\032\302\276\234\233\277\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\"y\267\276\375\266\260\276T\346\264\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\225=\263\276\221]\272\276\351p\263\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276@8\265\276\317\364\232\276\372\'\253\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\276\021\241\276\3155\257\276\247\205\237\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\':\240\276\216\317\n\276\370\353\276\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\330\360\266\276\316z\271\276\006R\273\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276\353\244\276\276f\014\304\276\366f\304\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276o\240\277\276\233\226\301\276L\216\301\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276\374\246\273\276\202V\272\276\3104\305\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276R^\302\276\023\002\303\276\274\204\262\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\363\265\264\276\022\211\304\276\320\222\306\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\305\031\261\276R\323\264\276S\236\303\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\340\201\303\276v:\314\276\023\221\311\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\250\013\306\276\317\352\302\276G\025\306\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\236\372\307\276\223\010\307\276t\350\257\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276dT\307\276j\342\310\276\264\236\271\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276Y\320\270\276\206}\301\276\350m\273\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\276\367\013\301\276\034`\267\276\275g\252\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276\345\311\267\276s\334\302\276\306\322\310\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276\232<\306\276\363w\275\276\305\364\277\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276LR\277\276\315\330\301\276\277\265\274\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\2373\272\276\004\327\305\276\350\321\302\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\326\250\275\2767\325\267\2761\357\265\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\367\226\301\2762\305\275\276+\244\307\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276w{\277\276\034r\275\276Tl\273\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\022V\265\276\307J\302\276\337`\307\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\327\224\306\276\246\276\305\276\235\223\302\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276oY\302\276$\n\275\276\252K\272\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\265\357\301\276\357\235\301\276\263\034\271\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\027h\263\276\211\n\301\276\'\023\272\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\276K\237\302\276Y\222\303\276\023\255\270\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276\035\024\244\276\324*\262\276\277\310\266\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3441\305\276\014R\304\276\377\302\305\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276E\307\300\276`}\303\276\035\320\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\253\252\261\276\353\215\276\276\026\233\276\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276y@\306\276\257\354\276\2765\332\272\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276\027\357\270\276\202\021\266\276M@\254\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276\'\313\275\276\"6\263\276\3621\277\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276s\322\273\276\253|\274\276\036\302\304\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\352\322\276\276e\357\276\276\223A\304\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276%V\303\276:\232\302\276\252\272\276\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\343\201\302\276\234\000\275\276e\337\276\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276\246\221\263\276\255\305\301\276?\325\306\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276\323\033\300\276\376\200\300\276\003\210\303\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276<5\274\276g\227\271\276\313\311\230\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\350)\303\276\337N\301\276\000U\306\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276\220\\\304\276\001\313\277\276\260K\303\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276\332|\300\276\010i\303\276oC\301\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\231\330\266\276\333@\302\276g\234\304\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276\342\225\306\276\317\360\277\276\003S\301\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\264\316\303\276\357\312\302\276\3068\266\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\010\316\263\276\243\362\251\276A\247\233\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\030\220\215\276\273[\267\276f\212\307\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\3348\305\276\367P\270\276\032\026\274\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276(\260\306\276\005o\305\276XN\311\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276\r-\306\276\362\002\272\276\026\217\302\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276o\343\277\2765\324\252\276\\\205\224\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276K\311s\276\250\\\252\276\233\306\272\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276d\002\267\276=\341\272\276\"\206\241\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\372\226\276\276\031|\307\276\344\355\277\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\276>\302\271\2765\010\277\276Z)\244\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\224\014\267\276%\355\256\276\027\322\273\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\300|\303\276\270+\277\276\361\274\254\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\n\277\270\276>\266\301\276\374\233\300\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276\262\242\271\276\252k\263\276\005\213\262\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276+\365\272\276Pj\247\2766$\241\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\2769H\235\276\246\342\225\276\263@\251\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276H\272\242\276+Z\247\276\253\307\275\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\2607\250\276X\370\273\276\017}\274\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\035m\305\276L\370\274\276C\310\273\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276e\234\311\276~\327\266\276?\353\247\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\037\"\271\276/\t\271\276x\004\300\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276g\\\251\276\331\n\263\276\335\366\266\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276=\311\267\276\260\245\272\276\236\r\300\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\311\234\276\276\202\264\267\276\364X\300\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276\030\355\307\276FW\264\276\266\354\274\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\237r\303\276\372g\250\276\331\022\305\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276\006\246\300\276zF\266\276\303\202\273\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276O\343\271\276Ml\277\276\257U\306\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276\230\312\303\276\341\215\303\276\031\365\277\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\276D\036\274\276\320\330\276\276K\t\276\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\3421\277\276\037I\277\276\023\032\310\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\316j\306\276\357\273\303\276,\356\300\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\3526\271\276\017\'\304\276D\232\273\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276\274I\263\276V\325\271\276c\366\266\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\374`\277\276>\016\300\2763\300\251\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\244\211\273\276\033\214\302\276\216\202\275\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276dz\256\276)\350\263\276\026\277\256\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276\202\223\277\276\314\332\303\276\310%\306\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\2765\372\276\276\306\271\302\276-\206\300\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\353)\302\276h,\303\276\375\360\277\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\227.\276\276\023~\300\276\330\330\300\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276~\016\277\276I\013\270\276m\246\303\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\27677\254\2769\222\275\276ee\262\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\355|\260\276\024\200\252\276\230i\301\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276\254y\271\276\013X\273\276\370\024\272\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\2762A\277\276\245\341\275\276\"d\267\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276\234\373\300\276\033\371\276\276\240\277\277\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\223\273\301\276w\326\304\276<\302\300\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276\275L\276\276\032V\310\276\320\334\306\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\277\004\306\276\232\005\300\276+\026\302\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\327\211\261\276~\n\246\276\306\037\301\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276=\270\301\276;\006\304\276=\\\271\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\353%\270\276\227\353\271\276\211\"\267\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\321\n\302\276\207\005\301\276]Z\252\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276N\315\245\276\265\255\276\276\353\275\304\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276\010\237\273\276\341\214\300\276\271\354\273\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276P\356\266\276\017.\244\276\331\246\270\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\270\344\303\276zp\303\276\207\245\275\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276\tQ\263\276\375\216\311\276\034p\310\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\204\277\307\276\023\352\275\276w\267\277\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\241\301\307\276D\262\302\276rL\304\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276\016,\307\276\2627\301\276\370\304\311\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276qq\276\276\202o\261\276\014\n\267\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276r\270\275\276Z\301\277\276fL\277\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\233\000\271\276\245\"\255\276\007D\260\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276\311\006\270\276\035f\307\276\274Y\267\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\276\032\266\276\261\222\265\276qQ\272\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276\225\215\303\276\207A\301\276\030<\265\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276Z\230\265\276\211x\263\276\275T\277\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\275\201\302\276\036%\276\276\334\177\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276>1\274\276\360]\310\276$b\275\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\345*\255\276\n5\254\276\177r\273\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276\242w\270\276(\353\270\276L\217\265\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\367k\265\276d=\247\276F\276\261\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276\351b\267\276-\201\304\276\334\316\311\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276NH\302\276qE\300\276\370v\301\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\310\373\270\276x\004\300\276\006K_\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\270T\272\276\005z\255\276w\376\276\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\3327\272\276w\231\277\276\266\324\271\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\2764\346\275\2763^\300\276j5\276\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\017\016\274\276;\314\301\276\001\254\272\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276\301<\252\276\021\345\310\276\302\373\302\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276>G\277\276E\254\270\276\367\220\267\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276H\024z\276\330\300\235\276\326\373\266\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\306e\310\276\355g\303\276\372m\303\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\n\"\303\276\370\007\275\276\243\213\273\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\233\337\300\276-\t\261\276}\254\263\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\027\003\266\276\353[\260\276\246\206\274\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\025\033\244\276X\253\264\276\375N\277\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\\w\245\276\255K\271\276\023*\273\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276C\036\272\276\275\014\301\276\333\t\272\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\256\276\251\276\244.\262\276\023s\251\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276\341\243\261\276?\251\267\276\233\337\300\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\031^\305\2765l\306\276\tC\306\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276\033\240\275\2767\256\240\276\331\334\275\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276\263\304\272\276\312\177\245\276\335\354\261\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\2768\277\311\276\013\014\265\276\r\356\276\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276^\232\272\2764\373\275\276(\374\273\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\224\\\303\276r\036\257\276\032\373\300\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276f\215\277\276\251r\276\276R\235\276\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\314\010\271\2767\376\301\276~\230\253\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\224\357\246\276\205\301\300\276G\271\275\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\2767\332\302\276{\330\272\276\3059\225\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276MA\236\276\025\207\256\276\021\036\271\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\030\000\302\276\257x\302\276\2470\304\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276n\376\307\276\301C\310\276\275+\304\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276/A\300\276\033\202\275\276\235\267\301\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\205\016\273\276Pr\306\276^\327\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276^\023\302\276\231e\273\276\243\324\272\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276B\367\300\276\251\003\311\276\350\013\303\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\026\001\275\276C\237\302\276\206B\302\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276\241\027\302\276I8\271\276\260\035\277\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276HA\273\276Z\335\271\276\243L\237\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\330\357\242\276\2419\275\276g\220\267\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\2768F\263\276|\252\253\276R\316\270\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276\242\332\302\276\030|\301\276\234\031\243\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276Y~\267\276\255\321\256\276o\235\305\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\265\025\262\276\212\311\271\276\356\203\301\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\303\340\313\2761<\316\276\235\036\303\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276\354\271\300\276\344\261\275\276\262\254\261\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\2761\016\252\276\213\006\262\276m\026\307\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276=\026\275\276C\300\272\276\357\321\261\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\341N\270\276\027\t\261\276\240\347\265\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276\231&\264\276\252\350\263\276\'\212\275\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\231\372\300\276\031d\263\276mb\276\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276O\321\300\276\325\304\310\276+@\317\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276\322\306\300\276H\023\306\276\322C\301\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\013f\275\276\267J\276\276\003\037\276\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276T\250\277\276X\214\261\276}=\276\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\000\342\275\276\352\032\254\276\307z\252\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\327p\270\276\313#\275\276\241\021\270\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276[%\276\276\321V\246\276JT\256\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\276\0238\267\276:w\306\276\006\220\303\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276*\033\311\276\317&\305\276\3428\275\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\346f\302\276I\265\275\276\025\225\273\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276\"\247\271\276\034\314\301\276\250\307\302\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276_\\\305\276\377\337\302\276l~\305\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276\362\212\304\2763\302\272\2767\316\265\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\2761\220\304\276F\335\270\276\223{\302\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\276\003\246\305\276b\212\265\276\365\267\300\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\367\213\310\276K,\311\276J\025\301\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\211s\310\276OW\311\276\207\227\277\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\271h\271\276\323\306\304\276u\311\277\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\2765\217\263\276\2140\264\276b\235\261\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\235\026\261\276KI\252\2760\262\273\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276\037\336\267\276\233W\266\276\031\337\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276l\273\275\276=T\305\276\245\270\302\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\3632\271\276X;\300\276\270\226\273\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\253\255\264\276R\245\260\276\277\230\254\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276\205x\245\276\013G\247\276\355\356\250\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276@\377\250\276(C\231\276!\271\216\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\223\257\276\377w\276\276\335H\272\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\302_\275\276\004+\276\276\272\\\303\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276\273^\276\276\034\220\275\276\005\335\304\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\323\026\302\276 \210\277\276u\033\264\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\0011\276\276\022\341\304\276\033\245\306\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\316\243\301\276\024\212\276\276\377\260\275\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276s\307\304\276\240\200\305\276\3466\307\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\237\'\276\276\034*\301\276+\362\302\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276v\210\307\276\034\371\302\276\334\357\301\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276P\345\303\276\031\342\303\276\232\020\310\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276U\205\303\276\036Y\277\276\267\252\277\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\003(\300\276\203\377\302\276\200\026\267\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276f\250\270\276!~\272\276\352I\304\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276\347\226\275\276\357~\274\276\275~\271\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276II\276\276R\340\276\276\271\234\274\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276\367@\307\276\351-\302\276\346\352\302\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\311-\272\276(X\306\276\214\247\304\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\276v\300\301\276$I\304\276\303\231\277\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276\233\304\305\276\241\274\274\276}\304\266\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\214b\276\276\335\037\277\276\312C\262\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\345\377\255\276\003/\300\276?\320\273\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276\255\346\273\276\233\310\276\276\354\352\274\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\027\262\263\276k:\236\2762\361\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276\236\254\273\276\210X\272\276..\244\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276\"\332\267\276\022\255\264\276\363M\301\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\2768%\273\2765\311\263\276\260\203\275\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276Nx\273\276<w\277\276U\014\257\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276^\365\260\2761\326\300\276\271\255\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276r\036\274\276\017\344\256\276G\t\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276\0232\272\276\014\317\265\276?\315\307\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\327[\274\276i\251\270\276\0228\246\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276\025T\277\276x\320\272\276\226>\255\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276A5\262\276\2002\265\276\342\037\304\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276A\304\274\276\220\330\301\276\nJ\271\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276;\376\300\276dj\273\276R;\267\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276&(\303\276\034\203\302\276\262\036\273\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276\243\326\276\276g\017\261\276Ha\262\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276$L\272\276YH\301\276\212\204\300\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\352j\274\276$\214\246\276#\247\256\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\227\027\251\276\365L\231\276\3017\220\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276>\342\301\276y\026\271\276\025(\277\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276&\024\271\276 %\246\276Q\374\232\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276u\010\215\276\037\224\246\276\253\013\262\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276e\203\226\276\350u\255\276\326\006\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276g:\275\276+\220\273\276\224\020\256\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\247\360\210\276`\251\241\276e_\206\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276B\327\230\276\253&1\276\212L\267\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\225\'\303\276{\357\276\276\204\372\254\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\264\352\241\276\203\223\264\276\261\365\273\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276\325\237\310\276K6\277\276\274\003\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276\254\325\277\276U\356\273\276\'T\272\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\341\320\264\276xE\276\276\023\372\301\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276\214\220\302\276{z\273\276\214\307\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276Y3\264\276-Q\274\276\237\311\302\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276\372\251\307\276\260\212\277\276ge\253\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276w%\303\276\324\317\273\276v\223\276\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276It\277\276-L\302\276\2163\301\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276ga\262\276\352\326\267\276A\203\276\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276\246\300\253\276\262\336\275\276\214\354\275\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276`\246\274\276\201\203\273\276Gj\301\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\224\304\270\276W\022\264\276\206\006\276\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\360\231\275\276\366\370\302\276\315\232\312\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276\255\275\300\276\247U\304\276\034\363\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\210\302\257\276\304\005\277\276z\016\276\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276&\212\273\276*y\267\276Kf\266\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276%e\231\276\232\264\201\276\352\263\271\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\2762\237\274\276\251\222\302\276\244\356\266\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276\313\330\252\276\333\214\267\276JO\277\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\"L\301\276\200\007\270\276\006-\271\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276z \302\276\325i\301\276\2628\302\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276p\260\266\276\307b\270\276\377\361\254\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276D\250\310\276\300a\306\276\316=\305\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276\ne\305\276\032\177\301\276^U\303\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276\353\257\267\276\006N\300\276\211\340\306\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\322l\274\276\273\376\270\276\300\374\273\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276\226\221\261\276j>\261\276#\223\244\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\203\356\216\276\362$\244\276\262\254\261\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\2322\301\276\030\031\273\276d\027\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276r\304\271\276\353\314\247\276^\032\261\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\342\357\275\276\206=\304\276\224\036\273\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276\005\307\264\276\210g\271\276B\271\266\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\310\215\271\276\340\250\270\276\337\305\265\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276\307?\274\276s:\276\276\377\244\301\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276n\"\266\276\326\031\265\276\304\204\226\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\2767\020\250\276f]\267\276\335\317\262\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\325r\266\276\361s\217\276jq\263\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\2769t\271\276\361\206\270\276\345\363\261\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276h\277\265\276L\367\271\276i\313\300\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276\247\037\277\276\230\252\260\276>i\270\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276+.\266\276\023]\273\276\373\350\266\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2326\272\276*\031\264\276\215\203\255\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276\254\254\267\276WS\277\276P\221\272\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\355\275\277\276\336\240\276\276\322\336\305\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276\264\272\306\276C\r\265\276m8\263\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\'_\300\276\344\004\302\276[\202\270\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\350\315\253\276\243\225\276\276\2375\276\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276\332j\307\276\032;\274\276K\305\266\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\217=\273\276\350\211\267\276\343]\301\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276\250\230\273\276\336Y\266\276=f\276\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\354\355\301\276\t\023\276\276\223\330\276\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276\257\003\264\276\346\201\237\276\304\253\270\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\312p\302\276\340\344\272\276n`\255\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276\371M\252\2764\306\267\276\3345\255\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276$\017\265\276\227\334\272\276Sv\274\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\3274\270\276I5\264\276\363\322\265\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276}\250\272\276\344\300\274\276x:\264\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\006\345\234\276\331\201\251\276\030\330\253\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276R\321\277\276L\336\261\276wy\233\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276\235\022\272\276 N\256\276\003\307\277\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276;\204\266\276\245\206\247\276\360&\261\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276\354J\240\276\006\360\225\276Tm\004\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\241\001\266\276%\240\266\276\300\202\261\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\3522\263\2764g\250\276lu\226\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276wa\264\276\3440\265\276&\344\277\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\355\234\264\276G\234\217\276\200\233\251\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276c\372\276\276\313L\272\276L\225\262\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276\021\247\261\276\356\177\252\276\301:\210\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276k\\\252\276|\277\230\276\024\037\267\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276\251\036\267\276R\343\264\276p\345\270\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\373\370\272\2760\t\235\276\247\337\264\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2767\357\261\276&Z\263\276$\324\227\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276\304\273\234\276\375\340\254\276J\210\255\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276LF\245\276\305\227\245\276\202\306\301\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\023H\252\276\343\034\262\276@X\252\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276\356w\253\276\005\255\276\276\262\n\240\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276\316\005\234\276M\374l\2761\371\215\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276\3550\271\276]\001\270\276/Y\264\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\260\350\255\276|\375\217\276\005\213\243\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\276\303\241\300\276\004i\302\276\316\324\277\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\037\266\277\276\216\037\246\276q\370\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276\241\322\254\276v?\267\276Jf\243\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\336S\271\276\036\261\275\276(7\277\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276\006e\263\276\354<\261\276\332m\237\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\2762\240\237\276\264\305\220\2766\272\211\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276\261\030z\276\004\224\262\276\030\276\263\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276\364\022\267\276&F\270\276}m\271\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\321\333\272\276n\343\252\276\2157\247\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\242\337\276\276\262\t\254\276x*\262\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\255\342\261\276l\203\260\276\025\267\266\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\302\024\270\276PZ\303\276O\320\277\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276~G\270\276\303\276\256\276~\374\264\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\201j\263\276\177g\204\276\332\024\234\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276+\347\274\276\270\343\302\276\362\365\276\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276j\323\270\276~\354\264\276\344w\260\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\245\234\271\276\027S\263\276\242\271\273\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276\020\324\277\276\020\345\265\276\031l\301\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276G\244\275\276Ad\271\276\214\324\270\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276\312#\273\276\316@\273\276\323\330\254\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276q:\266\276$/\254\276Z\010\273\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\305`\273\276-n\254\276\320\250\247\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276\246\031\274\276PP\276\276+\347\274\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276 \365\254\276\342\265\256\276\370,\260\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276>Y\303\276\344\304\265\276X\277\240\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\242\177\273\276q\301\275\276\237k\264\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276]\226\256\276\220\004\263\276\003\210\224\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\276J>\272\276g\232\261\276}\232\253\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\2765\001\237\2762]\273\276\241)\273\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276\375\370\261\276F[\255\276\213\256\242\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276=\214\241\276hP\244\276\\\324\260\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276\235?\271\276\250\323\255\276v\345\241\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276EG\233\276?\312\242\2764\"\263\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276\022\030\257\276T\322\273\276\337\324\264\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276\375\263\253\276!_\252\276aJ\247\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276*\340\251\276^\026\253\276\353\225\256\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276\023\026\257\276\252y\257\276$J\270\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\341t\275\276\1778\275\276\256\233\274\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\355q\310\276E?\272\276}\037\276\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\033j\247\276:\336\266\276D#\247\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276>T\272\276\003i\257\276\254\336\245\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\2760\026\270\276\234\230\272\276@\304\266\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\324J\232\276P\350\250\276\226\334\264\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276KO\264\276x\314\243\276\332\030\206\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\276\372\007\251\276\304\242\226\276\376)\262\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276\037\264\273\276\354\024\267\276\t3\263\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\304\311\272\276\214\007\271\276X\352\260\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\373\274\270\276\024s\257\276\007\232\273\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\233\377\265\276\274N\236\276_J\216\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\321\367\251\276\016.\257\2761G\266\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\n\250\230\276n\253\260\276_\244\224\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\2769\305\216\276T\203\237\276\014S\230\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\374B\256\276\240\313\271\276\211^\254\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276m&\253\276\352\246\240\276\231\261\224\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276:\377\275\276\251\261\266\276\273\017\276\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276\353\243\275\276S\013\261\276\257\226\244\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276M\203\241\276\341\276\256\276\2074\231\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276\017\027\221\276\375\373\213\276\247I\212\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276\202\341\232\276\274v\226\276{O\236\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276{W\260\276\235\367\236\276\361\017\244\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\0244\263\276\256.\257\276q:\266\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\0322\272\276\367v\237\276\242I\245\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\210\314\226\276\303\323\254\276$\007\224\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276\212\006\256\276?&\270\276{\243\266\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\266\323\270\276%r\203\276\355\'\265\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\r~\271\276W\237\270\276\030*\276\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\324\223\252\276\211\323\253\276\364\221\235\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276B-\246\276cZ\223\276\203{\204\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276P\311\264\276\201\353\220\276S\r\210\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\210\337t\276\210@H\276\003qG\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\335;\220\276M\r\220\276\272\233\256\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276\253e\247\276\010\210\267\276\321\250\251\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276\312\310\263\276t,\267\276{l\277\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276\362\262\274\276\002\321\300\276\260y\272\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\2763\331\276\276\371\325\245\276\373\013\265\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276L|\254\276\004\032\267\276\366u\247\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276M\232\260\276\244\r\272\276{\260\261\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\\\312\272\276n4\255\276b\307\274\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\247\312\245\276\007\365\244\276Oc\243\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\240\270\260\276\371\322\276\276\275\030\273\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\005\232\263\276\001|\277\276\223N\260\276\010\206\263\276\256S\240\276_\246\266\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\005\232\263\276\001|\277\276\223N\260\276\312h\262\276\220K\237\276\275\365\276\276\260n\260\276\024\346\252\276u\365\237\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\005\232\263\276\001|\277\276\223N\260\276\312h\262\276\220K\237\276\275\365\276\276R\333\244\276e`\266\276\345\224\261\276\330\312\202\276\226\032\273\276\353\000\270\276\032\030\276\276\207\333\263\276\010?\251\276oi\244\276\006\316\270\276\005\232\263\276\001|\277\276\223N\260\276\312h\262\276\220K\237\276\275\365\276\276R\333\244\276e`\266\276\345\224\261\276[)\265\276\272\033\266\276\334&\275\276"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 659
              }
              dim {
                size: 1
              }
            }
            tensor_content: "0\361\264?\302\237\005@\rp\'@\316V\r@\261\017\232@\3661\211?>\237\311?\207\225&@R\365\300?g,\253?\023`,@U\307\301?\r\t\032@\242J\014@xS\345?\222M\214@T\177\270?\217\'\266?\350\036\253?\232\000\377?aQ\264?\352\340\222?0c\216?\342/`@?\365\006@\375V.@\023\377P@\333\246;@(P\n@\325M\301?@\301\016@\230\260\036@\031\213\032@\272\n\374?\226\215>@c\300\005@\036\204\261@v\301=@\271\340\034@\304d\202@\226\256\275?G\360o?H\225\245?\233\233\217?0-\237?\343\253\252?\305b(@\302y7@\001\326)@\326k\256?\341\326\220?.:~@b\004\375?a%\203?\305\2667@\217\317\354?\351\000o@\214\231\354?\323*\324?n\241*@\304\216\240?)\025\216?iR\236?\232\271\204?\350\327\023@\367F\217?x\001\244?\022\242)?-\233\272?\365\262\351?\355\247\251?\005f\010@\354\257h@`\215\004@\307\031\037@\261H\376?\242\243!@c\227]@\220\316\375?`I\324?\365*`A~\003\347?\277\315]@T\321\367?\314\000>@.\274O@\336\355\326\276\246b\220\276\3469\262\276\267\353\256\276y\230\304\276h\211\277\276\336\302\271\276\2076\271\276\357\177\277\276r\205\277\276#4\302\276\026\222\272\276\t\'\250\276f\241\251\276\200\034\266\276\320\014\300\276#I\302\276C2\263\276\014C\262\276|[\240\276\203\324\222\276\267V\272\276\204\364\274\276\346\311\271\276r4\275\276\030v\227\276W\001\255\276\264\265\273\276S\004\302\276\032\335\274\276\000\r\273\276\347\250\247\276y\004\304\276\021\226\275\276\275\372\270\276\350\202\267\276wT\310\276\375\341\300\276\267h\302\276\3548\307\276z\216\305\276@\372\275\276\227\332\303\276\333<\311\276W?\304\276\272=\276\276\305\231\266\276n\342\270\276*;\257\276\032[\302\276I\033\274\276\364&\301\276\315\223\275\276f\251\273\276\025M\275\276o\276\277\276s\026\301\276\027\213\276\276\017G\252\276\275\r\265\276ry\303\276\347w\274\276=H\274\276\323g\306\2767\366\274\276\017\301\303\276\375O\300\276\346\201\275\276\034\027\307\276\217\246\300\276\302\310\300\276\t\352\263\2767t\300\276Ho\275\276\337\371\266\276\270:\300\276\325\226\302\276\r\275\302\276\243>\262\276\225p\302\276\177h\245\276I\021\267\2768S\241\276\206\001\302\276\204\215\273\276\0307\312\276><\306\276|d\300\276r\242\300\276Kp\277\276\301\036\271\276{\325\265\276\257\317\277\276\224\246\305\276F\254\272\276\001Z\271\276\223\347\301\276\r\016\303\276\366#\263\276{b\270\276\340\016\267\276\246N\302\276\n\377\265\276\366\251\267\276n\215\301\276\253\365\303\276_\305\273\276T8\270\276J`\304\276\216o\305\276\366\263\313\276\036\256\307\276\222\226\273\276A\274\273\276u\235\260\276\273.\303\276\216\204\224\276\025R\310\276&<\300\276\225\234\304\276m\265\263\276\216m\262\276be\306\276\337\330\276\276\360\022\266\276\347N\301\276\374\373\262\276\362\371\265\276\326\375z\276\025#\222\276\242\215\273\276\205\n\300\276\343S\274\276\017\307\242\276~\022\270\276\360\031\305\276\2532\253\276\345\'\302\276\250\325\261\276V\321\257\276\210\261\275\276x5\272\276\306\273\306\276M\223\303\276\215\317\300\276\325\356\304\276\235\326\304\276\307\340\273\276VE\275\276\003-\274\276oR\304\276\326m\276\276\231\030\247\276\234\233\277\276T\346\264\276\351p\263\276\372\'\253\276\247\205\237\276\370\353\276\276\006R\273\276\366f\304\276L\216\301\276\3104\305\276\274\204\262\276\320\222\306\276S\236\303\276\023\221\311\276G\025\306\276t\350\257\276\264\236\271\276\350m\273\276\275g\252\276\306\322\310\276\305\364\277\276\277\265\274\276\350\321\302\2761\357\265\276+\244\307\276Tl\273\276\337`\307\276\235\223\302\276\252K\272\276\263\034\271\276\'\023\272\276\023\255\270\276\277\310\266\276\377\302\305\276\035\320\276\276\026\233\276\2765\332\272\276M@\254\276\3621\277\276\036\302\304\276\223A\304\276\252\272\276\276e\337\276\276?\325\306\276\003\210\303\276\313\311\230\276\000U\306\276\260K\303\276oC\301\276g\234\304\276\003S\301\276\3068\266\276A\247\233\276f\212\307\276\032\026\274\276XN\311\276\026\217\302\276\\\205\224\276\233\306\272\276\"\206\241\276\344\355\277\276Z)\244\276\027\322\273\276\361\274\254\276\374\233\300\276\005\213\262\2766$\241\276\263@\251\276\253\307\275\276\017}\274\276C\310\273\276?\353\247\276x\004\300\276\335\366\266\276\236\r\300\276\364X\300\276\266\354\274\276\331\022\305\276\303\202\273\276\257U\306\276\031\365\277\276K\t\276\276\023\032\310\276,\356\300\276D\232\273\276c\366\266\2763\300\251\276\216\202\275\276\026\277\256\276\310%\306\276-\206\300\276\375\360\277\276\330\330\300\276m\246\303\276ee\262\276\230i\301\276\370\024\272\276\"d\267\276\240\277\277\276<\302\300\276\320\334\306\276+\026\302\276\306\037\301\276=\\\271\276\211\"\267\276]Z\252\276\353\275\304\276\271\354\273\276\331\246\270\276\207\245\275\276\034p\310\276w\267\277\276rL\304\276\370\304\311\276\014\n\267\276fL\277\276\007D\260\276\274Y\267\276qQ\272\276\030<\265\276\275T\277\276\334\177\300\276$b\275\276\177r\273\276L\217\265\276F\276\261\276\334\316\311\276\370v\301\276\006K_\276w\376\276\276\266\324\271\276j5\276\276\001\254\272\276\302\373\302\276\367\220\267\276\326\373\266\276\372m\303\276\243\213\273\276}\254\263\276\246\206\274\276\375N\277\276\023*\273\276\333\t\272\276\023s\251\276\233\337\300\276\tC\306\276\331\334\275\276\335\354\261\276\r\356\276\276(\374\273\276\032\373\300\276R\235\276\276~\230\253\276G\271\275\276\3059\225\276\021\036\271\276\2470\304\276\275+\304\276\235\267\301\276^\327\275\276\243\324\272\276\350\013\303\276\206B\302\276\260\035\277\276\243L\237\276g\220\267\276R\316\270\276\234\031\243\276o\235\305\276\356\203\301\276\235\036\303\276\262\254\261\276m\026\307\276\357\321\261\276\240\347\265\276\'\212\275\276mb\276\276+@\317\276\322C\301\276\003\037\276\276}=\276\276\307z\252\276\241\021\270\276JT\256\276\006\220\303\276\3428\275\276\025\225\273\276\250\307\302\276l~\305\2767\316\265\276\223{\302\276\365\267\300\276J\025\301\276\207\227\277\276u\311\277\276b\235\261\2760\262\273\276\031\337\276\276\245\270\302\276\270\226\273\276\277\230\254\276\355\356\250\276!\271\216\276\335H\272\276\272\\\303\276\005\335\304\276u\033\264\276\033\245\306\276\377\260\275\276\3466\307\276+\362\302\276\334\357\301\276\232\020\310\276\267\252\277\276\200\026\267\276\352I\304\276\275~\271\276\271\234\274\276\346\352\302\276\214\247\304\276\303\231\277\276}\304\266\276\312C\262\276?\320\273\276\354\352\274\2762\361\256\276..\244\276\363M\301\276\260\203\275\276U\014\257\276\271\255\301\276G\t\273\276?\315\307\276\0228\246\276\226>\255\276\342\037\304\276\nJ\271\276R;\267\276\262\036\273\276Ha\262\276\212\204\300\276#\247\256\276\3017\220\276\025(\277\276Q\374\232\276\253\013\262\276\326\006\277\276\224\020\256\276e_\206\276\212L\267\276\204\372\254\276\261\365\273\276\274\003\273\276\'T\272\276\023\372\301\276\214\307\275\276\237\311\302\276ge\253\276v\223\276\276\2163\301\276A\203\276\276\214\354\275\276Gj\301\276\206\006\276\276\315\232\312\276\034\363\270\276z\016\276\276Kf\266\276\352\263\271\276\244\356\266\276JO\277\276\006-\271\276\2628\302\276\377\361\254\276\316=\305\276^U\303\276\211\340\306\276\300\374\273\276#\223\244\276\262\254\261\276d\027\265\276^\032\261\276\224\036\273\276B\271\266\276\337\305\265\276\377\244\301\276\304\204\226\276\335\317\262\276jq\263\276\345\363\261\276i\313\300\276>i\270\276\373\350\266\276\215\203\255\276P\221\272\276\322\336\305\276m8\263\276[\202\270\276\2375\276\276K\305\266\276\343]\301\276=f\276\276\223\330\276\276\304\253\270\276n`\255\276\3345\255\276Sv\274\276\363\322\265\276x:\264\276\030\330\253\276wy\233\276\003\307\277\276\360&\261\276Tm\004\276\300\202\261\276lu\226\276&\344\277\276\200\233\251\276L\225\262\276\301:\210\276\024\037\267\276p\345\270\276\247\337\264\276$\324\227\276J\210\255\276\202\306\301\276@X\252\276\262\n\240\2761\371\215\276/Y\264\276\005\213\243\276\316\324\277\276q\370\270\276Jf\243\276(7\277\276\332m\237\2766\272\211\276\030\276\263\276}m\271\276\2157\247\276x*\262\276\025\267\266\276O\320\277\276~\374\264\276\332\024\234\276\362\365\276\276\344w\260\276\242\271\273\276\031l\301\276\214\324\270\276\323\330\254\276Z\010\273\276\320\250\247\276+\347\274\276\370,\260\276X\277\240\276\237k\264\276\003\210\224\276}\232\253\276\241)\273\276\213\256\242\276\\\324\260\276v\345\241\2764\"\263\276\337\324\264\276aJ\247\276\353\225\256\276$J\270\276\256\233\274\276}\037\276\276D#\247\276\254\336\245\276@\304\266\276\226\334\264\276\332\030\206\276\376)\262\276\t3\263\276X\352\260\276\007\232\273\276_J\216\2761G\266\276_\244\224\276\014S\230\276\211^\254\276\231\261\224\276\273\017\276\276\257\226\244\276\2074\231\276\247I\212\276{O\236\276\361\017\244\276q:\266\276\242I\245\276$\007\224\276{\243\266\276\355\'\265\276\030*\276\276\364\221\235\276\203{\204\276S\r\210\276\003qG\276\272\233\256\276\321\250\251\276{l\277\276\260y\272\276\373\013\265\276\366u\247\276{\260\261\276b\307\274\276Oc\243\276\275\030\273\276_\246\266\276u\365\237\276\353\000\270\276\010?\251\276\005\232\263\276\312h\262\276R\333\244\276[)\265\276F\317\251\276"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/tensors/component_0:output:0"
      input: "TensorSliceDataset/tensors/component_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 20
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "TensorSliceDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 20
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 64
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "RepeatDataset:handle:0"
      input: "BatchDatasetV2/batch_size:output:0"
      input: "BatchDatasetV2/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "BatchDatasetV2:handle:0"
      input: "optimizations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 20
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}
